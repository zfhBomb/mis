webpackJsonp([1],{

/***/ 867:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global) {\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n!function (t, e) {\n   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (e), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : \"object\" == (typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) && module.exports ? module.exports = e() : t.echarts = e();\n}(undefined, function () {\n  var t, e;!function () {\n    function i(t, e) {\n      if (!e) return t;if (0 === t.indexOf(\".\")) {\n        var i = e.split(\"/\"),\n            n = t.split(\"/\"),\n            r = i.length - 1,\n            a = n.length,\n            o = 0,\n            s = 0;t: for (var l = 0; a > l; l++) {\n          switch (n[l]) {case \"..\":\n              if (!(r > o)) break t;o++, s++;break;case \".\":\n              s++;break;default:\n              break t;}\n        }return i.length = r - o, n = n.slice(s), i.concat(n).join(\"/\");\n      }return t;\n    }function n(t) {\n      function e(e, o) {\n        if (\"string\" == typeof e) {\n          var s = n[e];return s || (s = a(i(e, t)), n[e] = s), s;\n        }e instanceof Array && (o = o || function () {}, o.apply(this, r(e, o, t)));\n      }var n = {};return e;\n    }function r(e, n, r) {\n      for (var s = [], l = o[r], u = 0, c = Math.min(e.length, n.length); c > u; u++) {\n        var h,\n            f = i(e[u], r);switch (f) {case \"require\":\n            h = l && l.require || t;break;case \"exports\":\n            h = l.exports;break;case \"module\":\n            h = l;break;default:\n            h = a(f);}s.push(h);\n      }return s;\n    }function a(t) {\n      var e = o[t];if (!e) throw new Error(\"No \" + t);if (!e.defined) {\n        var i = e.factory,\n            n = i.apply(this, r(e.deps || [], i, t));\"undefined\" != typeof n && (e.exports = n), e.defined = 1;\n      }return e.exports;\n    }var o = {};e = function e(t, _e2, i) {\n      o[t] = { id: t, deps: _e2, factory: i, defined: 0, exports: {}, require: n(t) };\n    }, t = n(\"\");\n  }();var i = \"__dirty\",\n      n = \"buildPath\",\n      r = \"moveTo\",\n      a = \"transform\",\n      o = \"hasItemOption\",\n      s = \"ecModel\",\n      l = \"undefined\",\n      u = \"../../util/number\",\n      c = \"updateData\",\n      h = \"getName\",\n      f = \"toFixed\",\n      d = \"option\",\n      p = \"mergeOption\",\n      v = \"rotation\",\n      m = \"parent\",\n      g = \"getShallow\",\n      y = \"stroke\",\n      x = \"lineWidth\",\n      _ = \"applyTransform\",\n      b = \"emphasis\",\n      w = \"getRawValue\",\n      M = \"setShape\",\n      S = \"getItemVisual\",\n      T = \"eachItemGraphicEl\",\n      A = \"getItemGraphicEl\",\n      C = \"setItemGraphicEl\",\n      k = \"execute\",\n      L = \"getItemModel\",\n      P = \"getItemLayout\",\n      D = \"normal\",\n      z = \"../../echarts\",\n      I = \"../../util/graphic\",\n      O = \"dataToCoord\",\n      R = \"parsePercent\",\n      E = \"getBaseAxis\",\n      N = \"dataToPoint\",\n      B = \"dimensions\",\n      V = \"retrieve\",\n      F = \"queryComponents\",\n      H = \"toGlobalCoord\",\n      G = \"ordinal\",\n      Z = \"componentIndex\",\n      q = \"getAxis\",\n      W = \"category\",\n      j = \"getExtent\",\n      U = \"concat\",\n      X = \"createElement\",\n      Y = \"normalize\",\n      $ = \"contain\",\n      Q = \"opacity\",\n      K = \"position\",\n      J = \"center\",\n      te = \"middle\",\n      ee = \"getBoundingRect\",\n      ie = \"getTextColor\",\n      ne = \"getFont\",\n      re = \"textAlign\",\n      ae = \"textStyle\",\n      oe = \"inherits\",\n      se = \"indexOf\",\n      le = \"filter\",\n      ue = \"number\",\n      ce = \"function\",\n      he = \"isArray\",\n      fe = \"replace\",\n      de = \"zlevel\",\n      pe = \"setStyle\",\n      ve = \"traverse\",\n      me = \"getDataParams\",\n      ge = \"seriesIndex\",\n      ye = \"dataIndex\",\n      xe = \"target\",\n      _e = \"mouseout\",\n      be = \"mouseover\",\n      we = \"silent\",\n      Me = \"splice\",\n      Se = \"series\",\n      Te = \"trigger\",\n      Ae = \"length\",\n      Ce = \"dispatchAction\",\n      ke = \"extend\",\n      Le = \"remove\",\n      Pe = \"isObject\",\n      De = \"updateLayout\",\n      ze = \"eachSeries\",\n      Ie = \"update\",\n      Oe = \"create\",\n      Re = \"height\",\n      Ee = \"bottom\",\n      Ne = \"ignore\",\n      Be = \"eachComponent\",\n      Ve = \"storage\",\n      Fe = \"canvasSupported\",\n      He = \"getHeight\",\n      Ge = \"getWidth\",\n      Ze = \"getModel\",\n      qe = \"animation\",\n      We = \"resize\",\n      je = \"string\",\n      Ue = \"prototype\",\n      Xe = \"toLowerCase\",\n      Ye = \"zrender/core/vector\",\n      $e = \"zrender/tool/color\",\n      Qe = \"zrender/core/env\",\n      Ke = \"getItemStyle\",\n      Je = \"defaults\",\n      ti = \"coordinateSystem\",\n      ei = \"removeAll\",\n      ii = \"extendComponentView\",\n      ni = \"getData\",\n      ri = \"zrender/core/util\",\n      ai = \"require\";e(\"echarts/chart/bar\", [ai, ri, \"../coord/cartesian/Grid\", \"./bar/BarSeries\", \"./bar/BarView\", \"../layout/barGrid\", \"../echarts\", \"../component/grid\"], function (t) {\n    var e = t(ri);t(\"../coord/cartesian/Grid\"), t(\"./bar/BarSeries\"), t(\"./bar/BarView\");var i = t(\"../layout/barGrid\"),\n        n = t(\"../echarts\");n.registerLayout(e.curry(i, \"bar\")), n.registerVisual(function (t) {\n      t.eachSeriesByType(\"bar\", function (t) {\n        var e = t[ni]();e.setVisual(\"legendSymbol\", \"roundRect\");\n      });\n    }), t(\"../component/grid\");\n  }), e(\"echarts/component/grid\", [ai, \"../util/graphic\", ri, \"../echarts\", \"../coord/cartesian/Grid\", \"./axis\"], function (t) {\n    var e = t(\"../util/graphic\"),\n        i = t(ri),\n        n = t(\"../echarts\");t(\"../coord/cartesian/Grid\"), t(\"./axis\"), n[ii]({ type: \"grid\", render: function render(t) {\n        this.group[ei](), t.get(\"show\") && this.group.add(new e.Rect({ shape: t[ti].getRect(), style: i[Je]({ fill: t.get(\"backgroundColor\") }, t[Ke]()), silent: !0 }));\n      } }), n.registerPreprocessor(function (t) {\n      t.xAxis && t.yAxis && !t.grid && (t.grid = {});\n    });\n  }), e(\"echarts/chart/pie\", [ai, ri, \"../echarts\", \"./pie/PieSeries\", \"./pie/PieView\", \"../action/createDataSelectAction\", \"../visual/dataColor\", \"./pie/pieLayout\", \"../processor/dataFilter\"], function (t) {\n    var e = t(ri),\n        i = t(\"../echarts\");t(\"./pie/PieSeries\"), t(\"./pie/PieView\"), t(\"../action/createDataSelectAction\")(\"pie\", [{ type: \"pieToggleSelect\", event: \"pieselectchanged\", method: \"toggleSelected\" }, { type: \"pieSelect\", event: \"pieselected\", method: \"select\" }, { type: \"pieUnSelect\", event: \"pieunselected\", method: \"unSelect\" }]), i.registerVisual(e.curry(t(\"../visual/dataColor\"), \"pie\")), i.registerLayout(e.curry(t(\"./pie/pieLayout\"), \"pie\")), i.registerProcessor(e.curry(t(\"../processor/dataFilter\"), \"pie\"));\n  }), e(\"echarts/chart/line\", [ai, ri, \"../echarts\", \"./line/LineSeries\", \"./line/LineView\", \"../visual/symbol\", \"../layout/points\", \"../processor/dataSample\", \"../component/grid\"], function (t) {\n    var e = t(ri),\n        i = t(\"../echarts\"),\n        n = i.PRIORITY;t(\"./line/LineSeries\"), t(\"./line/LineView\"), i.registerVisual(e.curry(t(\"../visual/symbol\"), \"line\", \"circle\", \"line\")), i.registerLayout(e.curry(t(\"../layout/points\"), \"line\")), i.registerProcessor(n.PROCESSOR.STATISTIC, e.curry(t(\"../processor/dataSample\"), \"line\")), t(\"../component/grid\");\n  }), e(\"echarts/echarts\", [ai, Qe, \"./model/Global\", \"./ExtensionAPI\", \"./CoordinateSystem\", \"./model/OptionManager\", \"./model/Component\", \"./model/Series\", \"./view/Component\", \"./view/Chart\", \"./util/graphic\", \"zrender\", ri, $e, \"zrender/mixin/Eventful\", \"zrender/core/timsort\", \"./visual/seriesColor\", \"./preprocessor/backwardCompat\", \"./loading/default\", \"./data/List\", \"./model/Model\", \"./util/number\", \"./util/format\", \"zrender/core/matrix\", Ye], function (t) {\n    function e(t) {\n      return function (e, i, n) {\n        e = e && e[Xe](), L[Ue][t].call(this, e, i, n);\n      };\n    }function i() {\n      L.call(this);\n    }function n(t, e, n) {\n      function r(t, e) {\n        return t.prio - e.prio;\n      }n = n || {}, (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) === je && (e = $[e]), this.id, this.group, this._dom = t, this._zr = A.init(t, { renderer: n.renderer || \"canvas\", devicePixelRatio: n.devicePixelRatio }), this._theme = C.clone(e), this._chartsViews = [], this._chartsMap = {}, this._componentsViews = [], this._componentsMap = {}, this._api = new y(this), this._coordSysMgr = new x(), L.call(this), this._messageCenter = new i(), this._initEvents(), this[We] = C.bind(this[We], this), this._pendingActions = [], P(Y, r), P(U, r), this._zr[qe].on(\"frame\", this._onframe, this);\n    }function r(t, e) {\n      var i = this._model;i && i[Be]({ mainType: \"series\", query: e }, function (n) {\n        var r = this._chartsMap[n.__viewId];r && r.__alive && r[t](n, i, this._api, e);\n      }, this);\n    }function a(t, e, i) {\n      var n = this._api;D(this._componentsViews, function (r) {\n        var a = r.__model;r[t](a, e, n, i), p(a, r);\n      }, this), e[ze](function (r) {\n        var a = this._chartsMap[r.__viewId];a[t](r, e, n, i), p(r, a), d(r, a);\n      }, this), f(this._zr, e);\n    }function o(t, e) {\n      for (var i = \"component\" === t, n = i ? this._componentsViews : this._chartsViews, r = i ? this._componentsMap : this._chartsMap, a = this._zr, o = 0; o < n[Ae]; o++) {\n        n[o].__alive = !1;\n      }e[i ? Be : ze](function (t, o) {\n        if (i) {\n          if (t === Se) return;\n        } else o = t;var s = o.id + \"_\" + o.type,\n            l = r[s];if (!l) {\n          var u = b.parseClassType(o.type),\n              c = i ? M.getClass(u.main, u.sub) : S.getClass(u.sub);if (!c) return;l = new c(), l.init(e, this._api), r[s] = l, n.push(l), a.add(l.group);\n        }o.__viewId = s, l.__alive = !0, l.__id = s, l.__model = o;\n      }, this);for (var o = 0; o < n[Ae];) {\n        var s = n[o];s.__alive ? o++ : (a[Le](s.group), s.dispose(e, this._api), n[Me](o, 1), delete r[s.__id]);\n      }\n    }function s(t, e) {\n      D(U, function (i) {\n        i.func(t, e);\n      });\n    }function l(t) {\n      var e = {};t[ze](function (t) {\n        var i = t.get(\"stack\"),\n            n = t[ni]();if (i && \"list\" === n.type) {\n          var r = e[i];r && (n.stackedOn = r), e[i] = n;\n        }\n      });\n    }function u(t, e) {\n      var i = this._api;D(Y, function (n) {\n        n.isLayout && n.func(t, i, e);\n      });\n    }function c(t, e) {\n      var i = this._api;t.clearColorPalette(), t[ze](function (t) {\n        t.clearColorPalette();\n      }), D(Y, function (n) {\n        n.func(t, i, e);\n      });\n    }function h(t, e) {\n      var i = this._api;D(this._componentsViews, function (n) {\n        var r = n.__model;n.render(r, t, i, e), p(r, n);\n      }, this), D(this._chartsViews, function (t) {\n        t.__alive = !1;\n      }, this), t[ze](function (n) {\n        var r = this._chartsMap[n.__viewId];r.__alive = !0, r.render(n, t, i, e), r.group[we] = !!n.get(we), p(n, r), d(n, r);\n      }, this), f(this._zr, t), D(this._chartsViews, function (e) {\n        e.__alive || e[Le](t, i);\n      }, this);\n    }function f(t, e) {\n      var i = t[Ve],\n          n = 0;i[ve](function (t) {\n        t.isGroup || n++;\n      }), n > e.get(\"hoverLayerThreshold\") && !m.node && i[ve](function (t) {\n        t.isGroup || (t.useHoverLayer = !0);\n      });\n    }function d(t, e) {\n      var i = 0;e.group[ve](function (t) {\n        \"group\" === t.type || t[Ne] || i++;\n      });var n = +t.get(\"progressive\"),\n          r = i > t.get(\"progressiveThreshold\") && n && !m.node;r && e.group[ve](function (t) {\n        t.isGroup || (t.progressive = r ? Math.floor(i++ / n) : -1, r && t.stopAnimation(!0));\n      });var a = t.get(\"blendMode\") || null;e.group[ve](function (t) {\n        t.isGroup || t[pe](\"blend\", a);\n      });\n    }function p(t, e) {\n      var i = t.get(\"z\"),\n          n = t.get(de);e.group[ve](function (t) {\n        \"group\" !== t.type && (null != i && (t.z = i), null != n && (t[de] = n));\n      });\n    }function v(t) {\n      function e(t, e) {\n        for (var i = 0; i < t[Ae]; i++) {\n          var n = t[i];n[a] = e;\n        }\n      }var i = 0,\n          n = 1,\n          r = 2,\n          a = \"__connectUpdateStatus\";C.each(j, function (o, s) {\n        t._messageCenter.on(s, function (o) {\n          if (J[t.group] && t[a] !== i) {\n            var s = t.makeActionFromEvent(o),\n                l = [];for (var u in K) {\n              var c = K[u];c !== t && c.group === t.group && l.push(c);\n            }e(l, i), D(l, function (t) {\n              t[a] !== n && t[Ce](s);\n            }), e(l, r);\n          }\n        });\n      });\n    }var m = t(Qe),\n        g = t(\"./model/Global\"),\n        y = t(\"./ExtensionAPI\"),\n        x = t(\"./CoordinateSystem\"),\n        _ = t(\"./model/OptionManager\"),\n        b = t(\"./model/Component\"),\n        w = t(\"./model/Series\"),\n        M = t(\"./view/Component\"),\n        S = t(\"./view/Chart\"),\n        T = t(\"./util/graphic\"),\n        A = t(\"zrender\"),\n        C = t(ri),\n        k = t($e),\n        L = t(\"zrender/mixin/Eventful\"),\n        P = t(\"zrender/core/timsort\"),\n        D = C.each,\n        z = 1e3,\n        I = 5e3,\n        O = 1e3,\n        R = 2e3,\n        E = 3e3,\n        N = 4e3,\n        B = 5e3,\n        V = \"__flag_in_main_process\",\n        F = \"_hasGradientOrPatternBg\",\n        H = \"_optionUpdated\";i[Ue].on = e(\"on\"), i[Ue].off = e(\"off\"), i[Ue].one = e(\"one\"), C.mixin(i, L);var G = n[Ue];G._onframe = function () {\n      this[H] && (this[V] = !0, Z.prepareAndUpdate.call(this), this[V] = !1, this[H] = !1);\n    }, G.getDom = function () {\n      return this._dom;\n    }, G.getZr = function () {\n      return this._zr;\n    }, G.setOption = function (t, e, i) {\n      if (this[V] = !0, !this._model || e) {\n        var n = new _(this._api),\n            r = this._theme,\n            a = this._model = new g(null, null, r, n);a.init(null, null, r, n);\n      }this._model.setOption(t, X), i ? this[H] = !0 : (Z.prepareAndUpdate.call(this), this._zr.refreshImmediately(), this[H] = !1), this[V] = !1, this._flushPendingActions();\n    }, G.setTheme = function () {\n      console.log(\"ECharts#setTheme() is DEPRECATED in ECharts 3.0\");\n    }, G[Ze] = function () {\n      return this._model;\n    }, G.getOption = function () {\n      return this._model && this._model.getOption();\n    }, G[Ge] = function () {\n      return this._zr[Ge]();\n    }, G[He] = function () {\n      return this._zr[He]();\n    }, G.getRenderedCanvas = function (t) {\n      if (m[Fe]) {\n        t = t || {}, t.pixelRatio = t.pixelRatio || 1, t.backgroundColor = t.backgroundColor || this._model.get(\"backgroundColor\");var e = this._zr,\n            i = e[Ve].getDisplayList();return C.each(i, function (t) {\n          t.stopAnimation(!0);\n        }), e.painter.getRenderedCanvas(t);\n      }\n    }, G.getDataURL = function (t) {\n      t = t || {};var e = t.excludeComponents,\n          i = this._model,\n          n = [],\n          r = this;D(e, function (t) {\n        i[Be]({ mainType: t }, function (t) {\n          var e = r._componentsMap[t.__viewId];e.group[Ne] || (n.push(e), e.group[Ne] = !0);\n        });\n      });var a = this.getRenderedCanvas(t).toDataURL(\"image/\" + (t && t.type || \"png\"));return D(n, function (t) {\n        t.group[Ne] = !1;\n      }), a;\n    }, G.getConnectedDataURL = function (t) {\n      if (m[Fe]) {\n        var e = this.group,\n            i = Math.min,\n            n = Math.max,\n            r = 1 / 0;if (J[e]) {\n          var a = r,\n              o = r,\n              s = -r,\n              l = -r,\n              u = [],\n              c = t && t.pixelRatio || 1;for (var h in K) {\n            var f = K[h];if (f.group === e) {\n              var d = f.getRenderedCanvas(C.clone(t)),\n                  p = f.getDom().getBoundingClientRect();a = i(p.left, a), o = i(p.top, o), s = n(p.right, s), l = n(p[Ee], l), u.push({ dom: d, left: p.left, top: p.top });\n            }\n          }a *= c, o *= c, s *= c, l *= c;var v = s - a,\n              g = l - o,\n              y = C.createCanvas();y.width = v, y[Re] = g;var x = A.init(y);return D(u, function (t) {\n            var e = new T.Image({ style: { x: t.left * c - a, y: t.top * c - o, image: t.dom } });x.add(e);\n          }), x.refreshImmediately(), y.toDataURL(\"image/\" + (t && t.type || \"png\"));\n        }return this.getDataURL(t);\n      }\n    };var Z = { update: function update(t) {\n        var e = this._model,\n            i = this._api,\n            n = this._coordSysMgr,\n            r = this._zr;if (e) {\n          e.restoreData(), n[Oe](this._model, this._api), s.call(this, e, i), l.call(this, e), n[Ie](e, i), c.call(this, e, t), h.call(this, e, t);var a = e.get(\"backgroundColor\") || \"transparent\",\n              o = r.painter;if (o.isSingleCanvas && o.isSingleCanvas()) r.configLayer(0, { clearColor: a });else {\n            if (!m[Fe]) {\n              var u = k.parse(a);a = k.stringify(u, \"rgb\"), 0 === u[3] && (a = \"transparent\");\n            }a.colorStops || a.image ? (r.configLayer(0, { clearColor: a }), this[F] = !0, this._dom.style.background = \"transparent\") : (this[F] && r.configLayer(0, { clearColor: null }), this[F] = !1, this._dom.style.background = a);\n          }\n        }\n      }, updateView: function updateView(t) {\n        var e = this._model;e && (e[ze](function (t) {\n          t[ni]().clearAllVisual();\n        }), c.call(this, e, t), a.call(this, \"updateView\", e, t));\n      }, updateVisual: function updateVisual(t) {\n        var e = this._model;e && (e[ze](function (t) {\n          t[ni]().clearAllVisual();\n        }), c.call(this, e, t), a.call(this, \"updateVisual\", e, t));\n      }, updateLayout: function updateLayout(t) {\n        var e = this._model;e && (u.call(this, e, t), a.call(this, De, e, t));\n      }, highlight: function highlight(t) {\n        r.call(this, \"highlight\", t);\n      }, downplay: function downplay(t) {\n        r.call(this, \"downplay\", t);\n      }, prepareAndUpdate: function prepareAndUpdate(t) {\n        var e = this._model;o.call(this, \"component\", e), o.call(this, \"chart\", e), Z[Ie].call(this, t);\n      } };G[We] = function () {\n      this[V] = !0, this._zr[We]();var t = this._model && this._model.resetOption(\"media\");Z[t ? \"prepareAndUpdate\" : Ie].call(this), this._loadingFX && this._loadingFX[We](), this[V] = !1, this._flushPendingActions();\n    }, G.showLoading = function (t, e) {\n      if (C[Pe](t) && (e = t, t = \"\"), t = t || \"default\", this.hideLoading(), Q[t]) {\n        var i = Q[t](this._api, e),\n            n = this._zr;this._loadingFX = i, n.add(i);\n      }\n    }, G.hideLoading = function () {\n      this._loadingFX && this._zr[Le](this._loadingFX), this._loadingFX = null;\n    }, G.makeActionFromEvent = function (t) {\n      var e = C[ke]({}, t);return e.type = j[t.type], e;\n    }, G[Ce] = function (t, e) {\n      var i = W[t.type];if (i) {\n        var n = i.actionInfo,\n            r = n[Ie] || Ie;if (this[V]) return void this._pendingActions.push(t);this[V] = !0;var a = [t],\n            o = !1;t.batch && (o = !0, a = C.map(t.batch, function (e) {\n          return e = C[Je](C[ke]({}, e), t), e.batch = null, e;\n        }));for (var s, l = [], u = \"highlight\" === t.type || \"downplay\" === t.type, c = 0; c < a[Ae]; c++) {\n          var h = a[c];s = i.action(h, this._model), s = s || C[ke]({}, h), s.type = n.event || s.type, l.push(s), u && Z[r].call(this, h);\n        }\"none\" === r || u || (this[H] ? (Z.prepareAndUpdate.call(this, t), this[H] = !1) : Z[r].call(this, t)), s = o ? { type: n.event || t.type, batch: l } : l[0], this[V] = !1, !e && this._messageCenter[Te](s.type, s), this._flushPendingActions();\n      }\n    }, G._flushPendingActions = function () {\n      for (var t = this._pendingActions; t[Ae];) {\n        var e = t.shift();this[Ce](e);\n      }\n    }, G.on = e(\"on\"), G.off = e(\"off\"), G.one = e(\"one\");var q = [\"click\", \"dblclick\", be, _e, \"mousemove\", \"mousedown\", \"mouseup\", \"globalout\"];G._initEvents = function () {\n      D(q, function (t) {\n        this._zr.on(t, function (e) {\n          var i = this[Ze](),\n              n = e[xe];if (n && null != n[ye]) {\n            var r = n.dataModel || i.getSeriesByIndex(n[ge]),\n                a = r && r[me](n[ye], n.dataType) || {};a.event = e, a.type = t, this[Te](t, a);\n          } else n && n.eventData && this[Te](t, n.eventData);\n        }, this);\n      }, this), D(j, function (t, e) {\n        this._messageCenter.on(e, function (t) {\n          this[Te](e, t);\n        }, this);\n      }, this);\n    }, G.isDisposed = function () {\n      return this._disposed;\n    }, G.clear = function () {\n      this.setOption({ series: [] }, !0);\n    }, G.dispose = function () {\n      if (!this._disposed) {\n        this._disposed = !0;var t = this._api,\n            e = this._model;D(this._componentsViews, function (i) {\n          i.dispose(e, t);\n        }), D(this._chartsViews, function (i) {\n          i.dispose(e, t);\n        }), this._zr.dispose(), delete K[this.id];\n      }\n    }, C.mixin(n, L);var W = [],\n        j = {},\n        U = [],\n        X = [],\n        Y = [],\n        $ = {},\n        Q = {},\n        K = {},\n        J = {},\n        te = new Date() - 0,\n        ee = new Date() - 0,\n        ie = \"_echarts_instance_\",\n        ne = { version: \"3.2.3\", dependencies: { zrender: \"3.1.3\" } };ne.init = function (t, e, i) {\n      var r = new n(t, e, i);return r.id = \"ec_\" + te++, K[r.id] = r, t.setAttribute && t.setAttribute(ie, r.id), v(r), r;\n    }, ne.connect = function (t) {\n      if (C[he](t)) {\n        var e = t;t = null, C.each(e, function (e) {\n          null != e.group && (t = e.group);\n        }), t = t || \"g_\" + ee++, C.each(e, function (e) {\n          e.group = t;\n        });\n      }return J[t] = !0, t;\n    }, ne.disConnect = function (t) {\n      J[t] = !1;\n    }, ne.dispose = function (t) {\n      C.isDom(t) ? t = ne.getInstanceByDom(t) : (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === je && (t = K[t]), t instanceof n && !t.isDisposed() && t.dispose();\n    }, ne.getInstanceByDom = function (t) {\n      var e = t.getAttribute(ie);return K[e];\n    }, ne.getInstanceById = function (t) {\n      return K[t];\n    }, ne.registerTheme = function (t, e) {\n      $[t] = e;\n    }, ne.registerPreprocessor = function (t) {\n      X.push(t);\n    }, ne.registerProcessor = function (t, e) {\n      (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === ce && (e = t, t = z), U.push({ prio: t, func: e });\n    }, ne.registerAction = function (t, e, i) {\n      (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) === ce && (i = e, e = \"\");var n = C[Pe](t) ? t.type : [t, t = { event: e }][0];t.event = (t.event || n)[Xe](), e = t.event, W[n] || (W[n] = { action: i, actionInfo: t }), j[e] = n;\n    }, ne.registerCoordinateSystem = function (t, e) {\n      x.register(t, e);\n    }, ne.registerLayout = function (t, e) {\n      (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === ce && (e = t, t = O), Y.push({ prio: t, func: e, isLayout: !0 });\n    }, ne.registerVisual = function (t, e) {\n      (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === ce && (e = t, t = E), Y.push({ prio: t, func: e });\n    }, ne.registerLoading = function (t, e) {\n      Q[t] = e;\n    };var re = b.parseClassType;return ne.extendComponentModel = function (t, e) {\n      var i = b;if (e) {\n        var n = re(e);i = b.getClass(n.main, n.sub, !0);\n      }return i[ke](t);\n    }, ne[ii] = function (t, e) {\n      var i = M;if (e) {\n        var n = re(e);i = M.getClass(n.main, n.sub, !0);\n      }return i[ke](t);\n    }, ne.extendSeriesModel = function (t, e) {\n      var i = w;if (e) {\n        e = \"series.\" + e[fe](\"series.\", \"\");var n = re(e);i = w.getClass(n.main, n.sub, !0);\n      }return i[ke](t);\n    }, ne.extendChartView = function (t, e) {\n      var i = S;if (e) {\n        e[fe](\"series.\", \"\");var n = re(e);i = S.getClass(n.main, !0);\n      }return i[ke](t);\n    }, ne.setCanvasCreator = function (t) {\n      C.createCanvas = t;\n    }, ne.registerVisual(R, t(\"./visual/seriesColor\")), ne.registerPreprocessor(t(\"./preprocessor/backwardCompat\")), ne.registerLoading(\"default\", t(\"./loading/default\")), ne.registerAction({ type: \"highlight\", event: \"highlight\", update: \"highlight\" }, C.noop), ne.registerAction({ type: \"downplay\", event: \"downplay\", update: \"downplay\" }, C.noop), ne.List = t(\"./data/List\"), ne.Model = t(\"./model/Model\"), ne.graphic = t(\"./util/graphic\"), ne[ue] = t(\"./util/number\"), ne.format = t(\"./util/format\"), ne.matrix = t(\"zrender/core/matrix\"), ne.vector = t(Ye), ne.color = t($e), ne.util = {}, D([\"map\", \"each\", le, se, oe, \"reduce\", le, \"bind\", \"curry\", he, \"isString\", Pe, \"isFunction\", ke, Je], function (t) {\n      ne.util[t] = C[t];\n    }), ne.PRIORITY = { PROCESSOR: { FILTER: z, STATISTIC: I }, VISUAL: { LAYOUT: O, GLOBAL: R, CHART: E, COMPONENT: N, BRUSH: B } }, ne;\n  }), e(\"echarts/component/title\", [ai, \"../echarts\", \"../util/graphic\", \"../util/layout\"], function (t) {\n    var e = t(\"../echarts\"),\n        i = t(\"../util/graphic\"),\n        n = t(\"../util/layout\");e.extendComponentModel({ type: \"title\", layoutMode: { type: \"box\", ignoreSize: !0 }, defaultOption: { zlevel: 0, z: 6, show: !0, text: \"\", target: \"blank\", subtext: \"\", subtarget: \"blank\", left: 0, top: 0, backgroundColor: \"rgba(0,0,0,0)\", borderColor: \"#ccc\", borderWidth: 0, padding: 5, itemGap: 10, textStyle: { fontSize: 18, fontWeight: \"bolder\", color: \"#333\" }, subtextStyle: { color: \"#aaa\" } } }), e[ii]({ type: \"title\", render: function render(t, e, r) {\n        if (this.group[ei](), t.get(\"show\")) {\n          var a = this.group,\n              o = t[Ze](ae),\n              s = t[Ze](\"subtextStyle\"),\n              l = t.get(re),\n              u = t.get(\"textBaseline\"),\n              c = new i.Text({ style: { text: t.get(\"text\"), textFont: o[ne](), fill: o[ie]() }, z2: 10 }),\n              h = c[ee](),\n              f = t.get(\"subtext\"),\n              d = new i.Text({ style: { text: f, textFont: s[ne](), fill: s[ie](), y: h[Re] + t.get(\"itemGap\"), textBaseline: \"top\" }, z2: 10 }),\n              p = t.get(\"link\"),\n              v = t.get(\"sublink\");c[we] = !p, d[we] = !v, p && c.on(\"click\", function () {\n            window.open(p, \"_\" + t.get(xe));\n          }), v && d.on(\"click\", function () {\n            window.open(v, \"_\" + t.get(\"subtarget\"));\n          }), a.add(c), f && a.add(d);var m = a[ee](),\n              g = t.getBoxLayoutParams();g.width = m.width, g[Re] = m[Re];var y = n.getLayoutRect(g, { width: r[Ge](), height: r[He]() }, t.get(\"padding\"));l || (l = t.get(\"left\") || t.get(\"right\"), l === te && (l = J), \"right\" === l ? y.x += y.width : l === J && (y.x += y.width / 2)), u || (u = t.get(\"top\") || t.get(Ee), u === J && (u = te), u === Ee ? y.y += y[Re] : u === te && (y.y += y[Re] / 2), u = u || \"top\"), a.attr(K, [y.x, y.y]);var x = { textAlign: l, textVerticalAlign: u };c[pe](x), d[pe](x), m = a[ee]();var _ = y.margin,\n              b = t[Ke]([\"color\", Q]);b.fill = t.get(\"backgroundColor\");var w = new i.Rect({ shape: { x: m.x - _[3], y: m.y - _[0], width: m.width + _[1] + _[3], height: m[Re] + _[0] + _[2] }, style: b, silent: !0 });i.subPixelOptimizeRect(w), a.add(w);\n        }\n      } });\n  }), e(\"echarts/component/legend\", [ai, \"./legend/LegendModel\", \"./legend/legendAction\", \"./legend/LegendView\", \"../echarts\", \"./legend/legendFilter\"], function (t) {\n    t(\"./legend/LegendModel\"), t(\"./legend/legendAction\"), t(\"./legend/LegendView\");var e = t(\"../echarts\");e.registerProcessor(t(\"./legend/legendFilter\"));\n  }), e(\"echarts/component/tooltip\", [ai, \"./tooltip/TooltipModel\", \"./tooltip/TooltipView\", \"../echarts\"], function (t) {\n    t(\"./tooltip/TooltipModel\"), t(\"./tooltip/TooltipView\"), t(\"../echarts\").registerAction({ type: \"showTip\", event: \"showTip\", update: \"none\" }, function () {}), t(\"../echarts\").registerAction({ type: \"hideTip\", event: \"hideTip\", update: \"none\" }, function () {});\n  }), e(\"echarts/component/markPoint\", [ai, \"./marker/MarkPointModel\", \"./marker/MarkPointView\", \"../echarts\"], function (t) {\n    t(\"./marker/MarkPointModel\"), t(\"./marker/MarkPointView\"), t(\"../echarts\").registerPreprocessor(function (t) {\n      t.markPoint = t.markPoint || {};\n    });\n  }), e(\"echarts/component/markArea\", [ai, \"./marker/MarkAreaModel\", \"./marker/MarkAreaView\", \"../echarts\"], function (t) {\n    t(\"./marker/MarkAreaModel\"), t(\"./marker/MarkAreaView\"), t(\"../echarts\").registerPreprocessor(function (t) {\n      t.markArea = t.markArea || {};\n    });\n  }), e(\"echarts/component/markLine\", [ai, \"./marker/MarkLineModel\", \"./marker/MarkLineView\", \"../echarts\"], function (t) {\n    t(\"./marker/MarkLineModel\"), t(\"./marker/MarkLineView\"), t(\"../echarts\").registerPreprocessor(function (t) {\n      t.markLine = t.markLine || {};\n    });\n  }), e(\"echarts/component/toolbox\", [ai, \"./toolbox/ToolboxModel\", \"./toolbox/ToolboxView\", \"./toolbox/feature/SaveAsImage\", \"./toolbox/feature/MagicType\", \"./toolbox/feature/DataView\", \"./toolbox/feature/DataZoom\", \"./toolbox/feature/Restore\"], function (t) {\n    t(\"./toolbox/ToolboxModel\"), t(\"./toolbox/ToolboxView\"), t(\"./toolbox/feature/SaveAsImage\"), t(\"./toolbox/feature/MagicType\"), t(\"./toolbox/feature/DataView\"), t(\"./toolbox/feature/DataZoom\"), t(\"./toolbox/feature/Restore\");\n  }), e(\"zrender/vml/vml\", [ai, \"./graphic\", \"../zrender\", \"./Painter\"], function (t) {\n    t(\"./graphic\"), t(\"../zrender\").registerPainter(\"vml\", t(\"./Painter\"));\n  }), e(\"echarts/scale/Time\", [ai, ri, \"../util/number\", \"../util/format\", \"./Interval\"], function (t) {\n    var e = t(ri),\n        i = t(\"../util/number\"),\n        n = t(\"../util/format\"),\n        r = t(\"./Interval\"),\n        a = r[Ue],\n        o = Math.ceil,\n        s = Math.floor,\n        l = 1e3,\n        u = 60 * l,\n        c = 60 * u,\n        h = 24 * c,\n        f = function f(t, e, i, n) {\n      for (; n > i;) {\n        var r = i + n >>> 1;t[r][2] < e ? i = r + 1 : n = r;\n      }return i;\n    },\n        d = r[ke]({ type: \"time\", getLabel: function getLabel(t) {\n        var e = this._stepLvl,\n            i = new Date(t);return n.formatTime(e[0], i);\n      }, niceExtent: function niceExtent(t, e, n) {\n        var r = this._extent;if (r[0] === r[1] && (r[0] -= h, r[1] += h), r[1] === -1 / 0 && 1 / 0 === r[0]) {\n          var a = new Date();r[1] = new Date(a.getFullYear(), a.getMonth(), a.getDate()), r[0] = r[1] - h;\n        }this.niceTicks(t);var l = this._interval;e || (r[0] = i.round(s(r[0] / l) * l)), n || (r[1] = i.round(o(r[1] / l) * l));\n      }, niceTicks: function niceTicks(t) {\n        t = t || 10;var e = this._extent,\n            n = e[1] - e[0],\n            r = n / t,\n            a = p[Ae],\n            l = f(p, r, 0, a),\n            u = p[Math.min(l, a - 1)],\n            c = u[2];if (\"year\" === u[0]) {\n          var h = n / c,\n              d = i.nice(h / t, !0);c *= d;\n        }var v = [o(e[0] / c) * c, s(e[1] / c) * c];this._stepLvl = u, this._interval = c, this._niceExtent = v;\n      }, parse: function parse(t) {\n        return +i.parseDate(t);\n      } });e.each([$, Y], function (t) {\n      d[Ue][t] = function (e) {\n        return a[t].call(this, this.parse(e));\n      };\n    });var p = [[\"hh:mm:ss\", 1, l], [\"hh:mm:ss\", 5, 5 * l], [\"hh:mm:ss\", 10, 10 * l], [\"hh:mm:ss\", 15, 15 * l], [\"hh:mm:ss\", 30, 30 * l], [\"hh:mm\\nMM-dd\", 1, u], [\"hh:mm\\nMM-dd\", 5, 5 * u], [\"hh:mm\\nMM-dd\", 10, 10 * u], [\"hh:mm\\nMM-dd\", 15, 15 * u], [\"hh:mm\\nMM-dd\", 30, 30 * u], [\"hh:mm\\nMM-dd\", 1, c], [\"hh:mm\\nMM-dd\", 2, 2 * c], [\"hh:mm\\nMM-dd\", 6, 6 * c], [\"hh:mm\\nMM-dd\", 12, 12 * c], [\"MM-dd\\nyyyy\", 1, h], [\"week\", 7, 7 * h], [\"month\", 1, 31 * h], [\"quarter\", 3, 380 * h / 4], [\"half-year\", 6, 380 * h / 2], [\"year\", 1, 380 * h]];return d[Oe] = function () {\n      return new d();\n    }, d;\n  }), e(ri, [ai], function () {\n    function t(e) {\n      if (\"object\" == (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) && null !== e) {\n        var i = e;if (e instanceof Array) {\n          i = [];for (var n = 0, r = e[Ae]; r > n; n++) {\n            i[n] = t(e[n]);\n          }\n        } else if (!w(e) && !M(e)) {\n          i = {};for (var a in e) {\n            e.hasOwnProperty(a) && (i[a] = t(e[a]));\n          }\n        }return i;\n      }return e;\n    }function e(i, n, r) {\n      if (!b(n) || !b(i)) return r ? t(n) : i;for (var a in n) {\n        if (n.hasOwnProperty(a)) {\n          var o = i[a],\n              s = n[a];!b(s) || !b(o) || y(s) || y(o) || M(s) || M(o) || w(s) || w(o) ? !r && a in i || (i[a] = t(n[a], !0)) : e(o, s, r);\n        }\n      }return i;\n    }function i(t, i) {\n      for (var n = t[0], r = 1, a = t[Ae]; a > r; r++) {\n        n = e(n, t[r], i);\n      }return n;\n    }function n(t, e) {\n      for (var i in e) {\n        e.hasOwnProperty(i) && (t[i] = e[i]);\n      }return t;\n    }function r(t, e, i) {\n      for (var n in e) {\n        e.hasOwnProperty(n) && (i ? null != e[n] : null == t[n]) && (t[n] = e[n]);\n      }return t;\n    }function a() {\n      return document[X](\"canvas\");\n    }function o() {\n      return C || (C = E.createCanvas().getContext(\"2d\")), C;\n    }function s(t, e) {\n      if (t) {\n        if (t[se]) return t[se](e);for (var i = 0, n = t[Ae]; n > i; i++) {\n          if (t[i] === e) return i;\n        }\n      }return -1;\n    }function l(t, e) {\n      function i() {}var n = t[Ue];i[Ue] = e[Ue], t[Ue] = new i();for (var r in n) {\n        t[Ue][r] = n[r];\n      }t[Ue].constructor = t, t.superClass = e;\n    }function u(t, e, i) {\n      t = Ue in t ? t[Ue] : t, e = Ue in e ? e[Ue] : e, r(t, e, i);\n    }function c(t) {\n      return t ? (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) == je ? !1 : _typeof(t[Ae]) == ue : void 0;\n    }function h(t, e, i) {\n      if (t && e) if (t.forEach && t.forEach === D) t.forEach(e, i);else if (t[Ae] === +t[Ae]) for (var n = 0, r = t[Ae]; r > n; n++) {\n        e.call(i, t[n], n, t);\n      } else for (var a in t) {\n        t.hasOwnProperty(a) && e.call(i, t[a], a, t);\n      }\n    }function f(t, e, i) {\n      if (t && e) {\n        if (t.map && t.map === O) return t.map(e, i);for (var n = [], r = 0, a = t[Ae]; a > r; r++) {\n          n.push(e.call(i, t[r], r, t));\n        }return n;\n      }\n    }function d(t, e, i, n) {\n      if (t && e) {\n        if (t.reduce && t.reduce === R) return t.reduce(e, i, n);for (var r = 0, a = t[Ae]; a > r; r++) {\n          i = e.call(n, i, t[r], r, t);\n        }return i;\n      }\n    }function p(t, e, i) {\n      if (t && e) {\n        if (t[le] && t[le] === z) return t[le](e, i);for (var n = [], r = 0, a = t[Ae]; a > r; r++) {\n          e.call(i, t[r], r, t) && n.push(t[r]);\n        }return n;\n      }\n    }function v(t, e, i) {\n      if (t && e) for (var n = 0, r = t[Ae]; r > n; n++) {\n        if (e.call(i, t[n], n, t)) return t[n];\n      }\n    }function m(t, e) {\n      var i = I.call(arguments, 2);return function () {\n        return t.apply(e, i[U](I.call(arguments)));\n      };\n    }function g(t) {\n      var e = I.call(arguments, 1);return function () {\n        return t.apply(this, e[U](I.call(arguments)));\n      };\n    }function y(t) {\n      return \"[object Array]\" === L.call(t);\n    }function x(t) {\n      return (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === ce;\n    }function _(t) {\n      return \"[object String]\" === L.call(t);\n    }function b(t) {\n      var e = typeof t === \"undefined\" ? \"undefined\" : _typeof(t);return e === ce || !!t && \"object\" == e;\n    }function w(t) {\n      return !!k[L.call(t)];\n    }function M(t) {\n      return t && 1 === t.nodeType && _typeof(t.nodeName) == je;\n    }function S() {\n      for (var t = 0, e = arguments[Ae]; e > t; t++) {\n        if (null != arguments[t]) return arguments[t];\n      }\n    }function T() {\n      return Function.call.apply(I, arguments);\n    }function A(t, e) {\n      if (!t) throw new Error(e);\n    }var C,\n        k = { \"[object Function]\": 1, \"[object RegExp]\": 1, \"[object Date]\": 1, \"[object Error]\": 1, \"[object CanvasGradient]\": 1, \"[object CanvasPattern]\": 1, \"[object Image]\": 1 },\n        L = Object[Ue].toString,\n        P = Array[Ue],\n        D = P.forEach,\n        z = P[le],\n        I = P.slice,\n        O = P.map,\n        R = P.reduce,\n        E = { inherits: l, mixin: u, clone: t, merge: e, mergeAll: i, extend: n, defaults: r, getContext: o, createCanvas: a, indexOf: s, slice: T, find: v, isArrayLike: c, each: h, map: f, reduce: d, filter: p, bind: m, curry: g, isArray: y, isString: _, isObject: b, isFunction: x, isBuildInObject: w, isDom: M, retrieve: S, assert: A, noop: function noop() {} };return E;\n  }), e(\"echarts/scale/Log\", [ai, ri, \"./Scale\", \"../util/number\", \"./Interval\"], function (t) {\n    var e = t(ri),\n        i = t(\"./Scale\"),\n        n = t(\"../util/number\"),\n        r = t(\"./Interval\"),\n        a = i[Ue],\n        o = r[Ue],\n        s = Math.floor,\n        l = Math.ceil,\n        u = Math.pow,\n        c = Math.log,\n        h = i[ke]({ type: \"log\", base: 10, getTicks: function getTicks() {\n        return e.map(o.getTicks.call(this), function (t) {\n          return n.round(u(this.base, t));\n        }, this);\n      }, getLabel: o.getLabel, scale: function scale(t) {\n        return t = a.scale.call(this, t), u(this.base, t);\n      }, setExtent: function setExtent(t, e) {\n        var i = this.base;t = c(t) / c(i), e = c(e) / c(i), o.setExtent.call(this, t, e);\n      }, getExtent: function getExtent() {\n        var t = this.base,\n            e = a[j].call(this);return e[0] = u(t, e[0]), e[1] = u(t, e[1]), e;\n      }, unionExtent: function unionExtent(t) {\n        var e = this.base;t[0] = c(t[0]) / c(e), t[1] = c(t[1]) / c(e), a.unionExtent.call(this, t);\n      }, niceTicks: function niceTicks(t) {\n        t = t || 10;var e = this._extent,\n            i = e[1] - e[0];if (!(1 / 0 === i || 0 >= i)) {\n          var r = n.quantity(i),\n              a = t / i * r;for (.5 >= a && (r *= 10); !isNaN(r) && Math.abs(r) < 1 && Math.abs(r) > 0;) {\n            r *= 10;\n          }var o = [n.round(l(e[0] / r) * r), n.round(s(e[1] / r) * r)];this._interval = r, this._niceExtent = o;\n        }\n      }, niceExtent: o.niceExtent });return e.each([$, Y], function (t) {\n      h[Ue][t] = function (e) {\n        return e = c(e) / c(this.base), a[t].call(this, e);\n      };\n    }), h[Oe] = function () {\n      return new h();\n    }, h;\n  }), e(\"echarts/coord/cartesian/Grid\", [ai, \"exports\", \"../../util/layout\", \"../../coord/axisHelper\", ri, \"./Cartesian2D\", \"./Axis2D\", \"./GridModel\", \"../../CoordinateSystem\"], function (t) {\n    function e(t, e) {\n      return t.findGridModel() === e;\n    }function i(t) {\n      var e,\n          i = t.model,\n          n = i.getFormattedLabels(),\n          r = 1,\n          a = n[Ae];a > 40 && (r = Math.ceil(a / 40));for (var o = 0; a > o; o += r) {\n        if (!t.isLabelIgnored(o)) {\n          var s = i.getTextRect(n[o]);e ? e.union(s) : e = s;\n        }\n      }return e;\n    }function n(t, e, i) {\n      this._coordsMap = {}, this._coordsList = [], this._axesMap = {}, this._axesList = [], this._initCartesian(t, e, i), this._model = t;\n    }function r(t, e) {\n      var i = t[j](),\n          n = i[0] + i[1];t[H] = \"x\" === t.dim ? function (t) {\n        return t + e;\n      } : function (t) {\n        return n - t + e;\n      }, t.toLocalCoord = \"x\" === t.dim ? function (t) {\n        return t - e;\n      } : function (t) {\n        return n - t + e;\n      };\n    }function a(t, e) {\n      return u.map(m, function (i) {\n        var n = e[F]({ mainType: i, index: t.get(i + \"Index\"), id: t.get(i + \"Id\") })[0];return n;\n      });\n    }function o(t) {\n      return \"cartesian2d\" === t.get(ti);\n    }var s = t(\"../../util/layout\"),\n        l = t(\"../../coord/axisHelper\"),\n        u = t(ri),\n        c = t(\"./Cartesian2D\"),\n        h = t(\"./Axis2D\"),\n        f = u.each,\n        d = l.ifAxisCrossZero,\n        p = l.niceScaleExtent;t(\"./GridModel\");var v = n[Ue];v.type = \"grid\", v.getRect = function () {\n      return this._rect;\n    }, v[Ie] = function (t, e) {\n      function i(t) {\n        var e = n[t];for (var i in e) {\n          var r = e[i];if (r && (r.type === W || !d(r))) return !0;\n        }return !1;\n      }var n = this._axesMap;this._updateScale(t, this._model), f(n.x, function (t) {\n        p(t, t.model);\n      }), f(n.y, function (t) {\n        p(t, t.model);\n      }), f(n.x, function (t) {\n        i(\"y\") && (t.onZero = !1);\n      }), f(n.y, function (t) {\n        i(\"x\") && (t.onZero = !1);\n      }), this[We](this._model, e);\n    }, v[We] = function (t, e) {\n      function n() {\n        f(o, function (t) {\n          var e = t.isHorizontal(),\n              i = e ? [0, a.width] : [0, a[Re]],\n              n = t.inverse ? 1 : 0;t.setExtent(i[n], i[1 - n]), r(t, e ? a.x : a.y);\n        });\n      }var a = s.getLayoutRect(t.getBoxLayoutParams(), { width: e[Ge](), height: e[He]() });this._rect = a;var o = this._axesList;n(), t.get(\"containLabel\") && (f(o, function (t) {\n        if (!t.model.get(\"axisLabel.inside\")) {\n          var e = i(t);if (e) {\n            var n = t.isHorizontal() ? Re : \"width\",\n                r = t.model.get(\"axisLabel.margin\");a[n] -= e[n] + r, \"top\" === t[K] ? a.y += e[Re] + r : \"left\" === t[K] && (a.x += e.width + r);\n          }\n        }\n      }), n());\n    }, v[q] = function (t, e) {\n      var i = this._axesMap[t];if (null != i) {\n        if (null == e) for (var n in i) {\n          return i[n];\n        }return i[e];\n      }\n    }, v.getCartesian = function (t, e) {\n      if (null != t && null != e) {\n        var i = \"x\" + t + \"y\" + e;return this._coordsMap[i];\n      }for (var n = 0, r = this._coordsList; n < r[Ae]; n++) {\n        if (r[n][q](\"x\").index === t || r[n][q](\"y\").index === e) return r[n];\n      }\n    }, v._initCartesian = function (t, i) {\n      function n(n) {\n        return function (s, u) {\n          if (e(s, t, i)) {\n            var c = s.get(K);\"x\" === n ? \"top\" !== c && c !== Ee && (c = Ee, r[c] && (c = \"top\" === c ? Ee : \"top\")) : \"left\" !== c && \"right\" !== c && (c = \"left\", r[c] && (c = \"left\" === c ? \"right\" : \"left\")), r[c] = !0;var f = new h(n, l.createScaleByModel(s), [0, 0], s.get(\"type\"), c),\n                d = f.type === W;f.onBand = d && s.get(\"boundaryGap\"), f.inverse = s.get(\"inverse\"), f.onZero = s.get(\"axisLine.onZero\"), s.axis = f, f.model = s, f.grid = this, f.index = u, this._axesList.push(f), a[n][u] = f, o[n]++;\n          }\n        };\n      }var r = { left: !1, right: !1, top: !1, bottom: !1 },\n          a = { x: {}, y: {} },\n          o = { x: 0, y: 0 };return i[Be](\"xAxis\", n(\"x\"), this), i[Be](\"yAxis\", n(\"y\"), this), o.x && o.y ? (this._axesMap = a, void f(a.x, function (t, e) {\n        f(a.y, function (i, n) {\n          var r = \"x\" + e + \"y\" + n,\n              a = new c(r);a.grid = this, this._coordsMap[r] = a, this._coordsList.push(a), a.addAxis(t), a.addAxis(i);\n        }, this);\n      }, this)) : (this._axesMap = {}, void (this._axesList = []));\n    }, v._updateScale = function (t, i) {\n      function n(t, e, i) {\n        f(i.coordDimToDataDim(e.dim), function (i) {\n          e.scale.unionExtent(t.getDataExtent(i, e.scale.type !== G));\n        });\n      }u.each(this._axesList, function (t) {\n        t.scale.setExtent(1 / 0, -1 / 0);\n      }), t[ze](function (r) {\n        if (o(r)) {\n          var s = a(r, t),\n              l = s[0],\n              u = s[1];if (!e(l, i, t) || !e(u, i, t)) return;var c = this.getCartesian(l[Z], u[Z]),\n              h = r[ni](),\n              f = c[q](\"x\"),\n              d = c[q](\"y\");\"list\" === h.type && (n(h, f, r), n(h, d, r));\n        }\n      }, this);\n    };var m = [\"xAxis\", \"yAxis\"];return n[Oe] = function (t, e) {\n      var i = [];return t[Be](\"grid\", function (r, a) {\n        var o = new n(r, t, e);o.name = \"grid_\" + a, o[We](r, e), r[ti] = o, i.push(o);\n      }), t[ze](function (e) {\n        if (o(e)) {\n          var i = a(e, t),\n              n = i[0],\n              r = i[1],\n              s = n.findGridModel(),\n              l = s[ti];e[ti] = l.getCartesian(n[Z], r[Z]);\n        }\n      }), i;\n    }, n[B] = c[Ue][B], t(\"../../CoordinateSystem\").register(\"cartesian2d\", n), n;\n  }), e(\"echarts/chart/bar/BarSeries\", [ai, \"../../model/Series\", \"../helper/createListFromArray\"], function (t) {\n    var e = t(\"../../model/Series\"),\n        i = t(\"../helper/createListFromArray\");return e[ke]({ type: \"series.bar\", dependencies: [\"grid\", \"polar\"], getInitialData: function getInitialData(t, e) {\n        return i(t.data, this, e);\n      }, getMarkerPosition: function getMarkerPosition(t) {\n        var e = this[ti];if (e) {\n          var i = e[N](t, !0),\n              n = this[ni](),\n              r = n.getLayout(\"offset\"),\n              a = n.getLayout(\"size\"),\n              o = e[E]().isHorizontal() ? 0 : 1;return i[o] += r + a / 2, i;\n        }return [0 / 0, 0 / 0];\n      }, brushSelector: \"rect\", defaultOption: { zlevel: 0, z: 2, coordinateSystem: \"cartesian2d\", legendHoverLink: !0, barMinHeight: 0, itemStyle: { normal: {}, emphasis: {} } } });\n  }), e(\"echarts/layout/barGrid\", [ai, ri, \"../util/number\"], function (t) {\n    function e(t) {\n      return t.get(\"stack\") || \"__ec_stack_\" + t[ge];\n    }function i(t) {\n      return t.dim + t.index;\n    }function n(t) {\n      var n = {};a.each(t, function (t) {\n        var r = t[ni](),\n            a = t[ti],\n            o = a[E](),\n            l = o[j](),\n            u = o.type === W ? o.getBandWidth() : Math.abs(l[1] - l[0]) / r.count(),\n            c = n[i(o)] || { bandWidth: u, remainedWidth: u, autoWidthCount: 0, categoryGap: \"20%\", gap: \"30%\", stacks: {} },\n            h = c.stacks;n[i(o)] = c;var f = e(t);h[f] || c.autoWidthCount++, h[f] = h[f] || { width: 0, maxWidth: 0 };var d = s(t.get(\"barWidth\"), u),\n            p = s(t.get(\"barMaxWidth\"), u),\n            v = t.get(\"barGap\"),\n            m = t.get(\"barCategoryGap\");d && !h[f].width && (d = Math.min(c.remainedWidth, d), h[f].width = d, c.remainedWidth -= d), p && (h[f].maxWidth = p), null != v && (c.gap = v), null != m && (c.categoryGap = m);\n      });var r = {};return a.each(n, function (t, e) {\n        r[e] = {};var i = t.stacks,\n            n = t.bandWidth,\n            o = s(t.categoryGap, n),\n            l = s(t.gap, 1),\n            u = t.remainedWidth,\n            c = t.autoWidthCount,\n            h = (u - o) / (c + (c - 1) * l);h = Math.max(h, 0), a.each(i, function (t) {\n          var e = t.maxWidth;!t.width && e && h > e && (e = Math.min(e, u), u -= e, t.width = e, c--);\n        }), h = (u - o) / (c + (c - 1) * l), h = Math.max(h, 0);var f,\n            d = 0;a.each(i, function (t) {\n          t.width || (t.width = h), f = t, d += t.width * (1 + l);\n        }), f && (d -= f.width * l);var p = -d / 2;a.each(i, function (t, i) {\n          r[e][i] = r[e][i] || { offset: p, width: t.width }, p += t.width * (1 + l);\n        });\n      }), r;\n    }function r(t, r) {\n      var o = n(a[le](r.getSeriesByType(t), function (t) {\n        return !r.isSeriesFiltered(t) && t[ti] && \"cartesian2d\" === t[ti].type;\n      })),\n          s = {};r.eachSeriesByType(t, function (t) {\n        var n = t[ni](),\n            r = t[ti],\n            a = r[E](),\n            l = e(t),\n            u = o[i(a)][l],\n            c = u.offset,\n            h = u.width,\n            f = r.getOtherAxis(a),\n            d = t.get(\"barMinHeight\") || 0,\n            p = a.onZero ? f[H](f[O](0)) : f.getGlobalExtent()[0],\n            v = r.dataToPoints(n, !0);s[l] = s[l] || [], n.setLayout({ offset: c, size: h }), n.each(f.dim, function (t, e) {\n          if (!isNaN(t)) {\n            s[l][e] || (s[l][e] = { p: p, n: p });var i,\n                r,\n                a,\n                o,\n                u = t >= 0 ? \"p\" : \"n\",\n                m = v[e],\n                g = s[l][e][u];f.isHorizontal() ? (i = g, r = m[1] + c, a = m[0] - g, o = h, Math.abs(a) < d && (a = (0 > a ? -1 : 1) * d), s[l][e][u] += a) : (i = m[0] + c, r = g, a = h, o = m[1] - g, Math.abs(o) < d && (o = (0 >= o ? -1 : 1) * d), s[l][e][u] += o), n.setItemLayout(e, { x: i, y: r, width: a, height: o });\n          }\n        }, !0);\n      }, this);\n    }var a = t(ri),\n        o = t(\"../util/number\"),\n        s = o[R];return r;\n  }), e(\"echarts/chart/bar/BarView\", [ai, ri, I, \"../../model/Model\", \"./barItemStyle\", z], function (t) {\n    function e(t, e) {\n      var i = t.width > 0 ? 1 : -1,\n          n = t[Re] > 0 ? 1 : -1;e = Math.min(e, Math.abs(t.width), Math.abs(t[Re])), t.x += i * e / 2, t.y += n * e / 2, t.width -= i * e, t[Re] -= n * e;\n    }var i = t(ri),\n        n = t(I);return i[ke](t(\"../../model/Model\")[Ue], t(\"./barItemStyle\")), t(z).extendChartView({ type: \"bar\", render: function render(t, e, i) {\n        var n = t.get(ti);return \"cartesian2d\" === n && this._renderOnCartesian(t, e, i), this.group;\n      }, _renderOnCartesian: function _renderOnCartesian(t) {\n        function r(r, a) {\n          var s = o[P](r),\n              l = o[L](r).get(f) || 0;e(s, l);var u = new n.Rect({ shape: i[ke]({}, s) });if (h) {\n            var d = u.shape,\n                p = c ? Re : \"width\",\n                v = {};d[p] = 0, v[p] = s[p], n[a ? \"updateProps\" : \"initProps\"](u, { shape: v }, t, r);\n          }return u;\n        }var a = this.group,\n            o = t[ni](),\n            s = this._data,\n            l = t[ti],\n            u = l[E](),\n            c = u.isHorizontal(),\n            h = t.get(qe),\n            f = [\"itemStyle\", D, \"barBorderWidth\"];o.diff(s).add(function (t) {\n          if (o.hasValue(t)) {\n            var e = r(t);o[C](t, e), a.add(e);\n          }\n        })[Ie](function (i, l) {\n          var u = s[A](l);if (!o.hasValue(i)) return void a[Le](u);u || (u = r(i, !0));var c = o[P](i),\n              h = o[L](i).get(f) || 0;e(c, h), n.updateProps(u, { shape: c }, t, i), o[C](i, u), a.add(u);\n        })[Le](function (e) {\n          var i = s[A](e);i && (i.style.text = \"\", n.updateProps(i, { shape: { width: 0 } }, t, e, function () {\n            a[Le](i);\n          }));\n        })[k](), this._updateStyle(t, o, c), this._data = o;\n      }, _updateStyle: function _updateStyle(t, e, r) {\n        function a(t, e, i, r, a) {\n          n.setText(t, e, i), t.text = r, \"outside\" === t.textPosition && (t.textPosition = a);\n        }e[T](function (o, s) {\n          var l = e[L](s),\n              u = e[S](s, \"color\"),\n              c = e[S](s, Q),\n              h = e[P](s),\n              f = l[Ze](\"itemStyle.normal\"),\n              d = l[Ze](\"itemStyle.emphasis\").getBarItemStyle();o[M](\"r\", f.get(\"barBorderRadius\") || 0), o.useStyle(i[Je]({ fill: u, opacity: c }, f.getBarItemStyle()));var p = r ? h[Re] > 0 ? Ee : \"top\" : h.width > 0 ? \"left\" : \"right\",\n              v = l[Ze](\"label.normal\"),\n              m = l[Ze](\"label.emphasis\"),\n              g = o.style;v.get(\"show\") ? a(g, v, u, i[V](t.getFormattedLabel(s, D), t[w](s)), p) : g.text = \"\", m.get(\"show\") ? a(d, m, u, i[V](t.getFormattedLabel(s, b), t[w](s)), p) : d.text = \"\", n.setHoverStyle(o, d);\n        });\n      }, remove: function remove(t) {\n        var e = this.group;t.get(qe) ? this._data && this._data[T](function (i) {\n          i.style.text = \"\", n.updateProps(i, { shape: { width: 0 } }, t, i[ye], function () {\n            e[Le](i);\n          });\n        }) : e[ei]();\n      } });\n  }), e(\"echarts/component/axis\", [ai, \"../coord/cartesian/AxisModel\", \"./axis/AxisView\"], function (t) {\n    t(\"../coord/cartesian/AxisModel\"), t(\"./axis/AxisView\");\n  }), e(\"echarts/util/graphic\", [ai, ri, \"zrender/tool/path\", \"zrender/graphic/Path\", $e, \"zrender/core/matrix\", Ye, \"zrender/graphic/Gradient\", \"zrender/container/Group\", \"zrender/graphic/Image\", \"zrender/graphic/Text\", \"zrender/graphic/shape/Circle\", \"zrender/graphic/shape/Sector\", \"zrender/graphic/shape/Ring\", \"zrender/graphic/shape/Polygon\", \"zrender/graphic/shape/Polyline\", \"zrender/graphic/shape/Rect\", \"zrender/graphic/shape/Line\", \"zrender/graphic/shape/BezierCurve\", \"zrender/graphic/shape/Arc\", \"zrender/graphic/CompoundPath\", \"zrender/graphic/LinearGradient\", \"zrender/graphic/RadialGradient\", \"zrender/core/BoundingRect\"], function (t) {\n    function e(t) {\n      return null != t && \"none\" != t;\n    }function i(t) {\n      return (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === je ? T.lift(t, -.1) : t;\n    }function n(t) {\n      if (t.__hoverStlDirty) {\n        var n = t.style[y],\n            r = t.style.fill,\n            a = t.__hoverStl;a.fill = a.fill || (e(r) ? i(r) : null), a[y] = a[y] || (e(n) ? i(n) : null);var o = {};for (var s in a) {\n          a.hasOwnProperty(s) && (o[s] = t.style[s]);\n        }t.__normalStl = o, t.__hoverStlDirty = !1;\n      }\n    }function r(t) {\n      t.__isHover || (n(t), t.useHoverLayer ? t.__zr && t.__zr.addHover(t, t.__hoverStl) : (t[pe](t.__hoverStl), t.z2 += 1), t.__isHover = !0);\n    }function a(t) {\n      if (t.__isHover) {\n        var e = t.__normalStl;t.useHoverLayer ? t.__zr && t.__zr.removeHover(t) : (e && t[pe](e), t.z2 -= 1), t.__isHover = !1;\n      }\n    }function o(t) {\n      \"group\" === t.type ? t[ve](function (t) {\n        \"group\" !== t.type && r(t);\n      }) : r(t);\n    }function s(t) {\n      \"group\" === t.type ? t[ve](function (t) {\n        \"group\" !== t.type && a(t);\n      }) : a(t);\n    }function l(t, e) {\n      t.__hoverStl = t.hoverStyle || e || {}, t.__hoverStlDirty = !0, t.__isHover && n(t);\n    }function u() {\n      !this.__isEmphasis && o(this);\n    }function c() {\n      !this.__isEmphasis && s(this);\n    }function h() {\n      this.__isEmphasis = !0, o(this);\n    }function f() {\n      this.__isEmphasis = !1, s(this);\n    }function d(t, e, i, n, r, a) {\n      (typeof r === \"undefined\" ? \"undefined\" : _typeof(r)) === ce && (a = r, r = null);var o = n && (n.ifEnableAnimation ? n.ifEnableAnimation() : n[g](qe));if (o) {\n        var s = t ? \"Update\" : \"\",\n            l = n && n[g](\"animationDuration\" + s),\n            u = n && n[g](\"animationEasing\" + s),\n            c = n && n[g](\"animationDelay\" + s);(typeof c === \"undefined\" ? \"undefined\" : _typeof(c)) === ce && (c = c(r)), l > 0 ? e.animateTo(i, l, c || 0, u, a) : (e.attr(i), a && a());\n      } else e.attr(i), a && a();\n    }var p = t(ri),\n        w = t(\"zrender/tool/path\"),\n        M = Math.round,\n        S = t(\"zrender/graphic/Path\"),\n        T = t($e),\n        A = t(\"zrender/core/matrix\"),\n        C = t(Ye),\n        k = (t(\"zrender/graphic/Gradient\"), {});return k.Group = t(\"zrender/container/Group\"), k.Image = t(\"zrender/graphic/Image\"), k.Text = t(\"zrender/graphic/Text\"), k.Circle = t(\"zrender/graphic/shape/Circle\"), k.Sector = t(\"zrender/graphic/shape/Sector\"), k.Ring = t(\"zrender/graphic/shape/Ring\"), k.Polygon = t(\"zrender/graphic/shape/Polygon\"), k.Polyline = t(\"zrender/graphic/shape/Polyline\"), k.Rect = t(\"zrender/graphic/shape/Rect\"), k.Line = t(\"zrender/graphic/shape/Line\"), k.BezierCurve = t(\"zrender/graphic/shape/BezierCurve\"), k.Arc = t(\"zrender/graphic/shape/Arc\"), k.CompoundPath = t(\"zrender/graphic/CompoundPath\"), k.LinearGradient = t(\"zrender/graphic/LinearGradient\"), k.RadialGradient = t(\"zrender/graphic/RadialGradient\"), k.BoundingRect = t(\"zrender/core/BoundingRect\"), k.extendShape = function (t) {\n      return S[ke](t);\n    }, k.extendPath = function (t, e) {\n      return w.extendFromString(t, e);\n    }, k.makePath = function (t, e, i, n) {\n      var r = w.createFromString(t, e),\n          a = r[ee]();if (i) {\n        var o = a.width / a[Re];if (n === J) {\n          var s,\n              l = i[Re] * o;l <= i.width ? s = i[Re] : (l = i.width, s = l / o);var u = i.x + i.width / 2,\n              c = i.y + i[Re] / 2;i.x = u - l / 2, i.y = c - s / 2, i.width = l, i[Re] = s;\n        }this.resizePath(r, i);\n      }return r;\n    }, k.mergePath = w.mergePath, k.resizePath = function (t, e) {\n      if (t[_]) {\n        var i = t[ee](),\n            n = i.calculateTransform(e);t[_](n);\n      }\n    }, k.subPixelOptimizeLine = function (t) {\n      var e = k.subPixelOptimize,\n          i = t.shape,\n          n = t.style[x];return M(2 * i.x1) === M(2 * i.x2) && (i.x1 = i.x2 = e(i.x1, n, !0)), M(2 * i.y1) === M(2 * i.y2) && (i.y1 = i.y2 = e(i.y1, n, !0)), t;\n    }, k.subPixelOptimizeRect = function (t) {\n      var e = k.subPixelOptimize,\n          i = t.shape,\n          n = t.style[x],\n          r = i.x,\n          a = i.y,\n          o = i.width,\n          s = i[Re];return i.x = e(i.x, n, !0), i.y = e(i.y, n, !0), i.width = Math.max(e(r + o, n, !1) - i.x, 0 === o ? 0 : 1), i[Re] = Math.max(e(a + s, n, !1) - i.y, 0 === s ? 0 : 1), t;\n    }, k.subPixelOptimize = function (t, e, i) {\n      var n = M(2 * t);return (n + M(e)) % 2 === 0 ? n / 2 : (n + (i ? 1 : -1)) / 2;\n    }, k.setHoverStyle = function (t, e) {\n      \"group\" === t.type ? t[ve](function (t) {\n        \"group\" !== t.type && l(t, e);\n      }) : l(t, e), t.on(be, u).on(_e, c), t.on(b, h).on(D, f);\n    }, k.setText = function (t, e, i) {\n      var n = e[g](K) || \"inside\",\n          r = n[se](\"inside\") >= 0 ? \"white\" : i,\n          a = e[Ze](ae);p[ke](t, { textDistance: e[g](\"distance\") || 5, textFont: a[ne](), textPosition: n, textFill: a[ie]() || r });\n    }, k.updateProps = function (t, e, i, n, r) {\n      d(!0, t, e, i, n, r);\n    }, k.initProps = function (t, e, i, n, r) {\n      d(!1, t, e, i, n, r);\n    }, k.getTransform = function (t, e) {\n      for (var i = A.identity([]); t && t !== e;) {\n        A.mul(i, t.getLocalTransform(), i), t = t[m];\n      }return i;\n    }, k[_] = function (t, e, i) {\n      return i && (e = A.invert([], e)), C[_]([], t, e);\n    }, k.transformDirection = function (t, e, i) {\n      var n = 0 === e[4] || 0 === e[5] || 0 === e[0] ? 1 : Math.abs(2 * e[4] / e[0]),\n          r = 0 === e[4] || 0 === e[5] || 0 === e[2] ? 1 : Math.abs(2 * e[4] / e[2]),\n          a = [\"left\" === t ? -n : \"right\" === t ? n : 0, \"top\" === t ? -r : t === Ee ? r : 0];return a = k[_](a, e, i), Math.abs(a[0]) > Math.abs(a[1]) ? a[0] > 0 ? \"right\" : \"left\" : a[1] > 0 ? Ee : \"top\";\n    }, k.groupTransition = function (t, e, i) {\n      function n(t) {\n        var e = {};return t[ve](function (t) {\n          !t.isGroup && t.anid && (e[t.anid] = t);\n        }), e;\n      }function r(t) {\n        var e = { position: C.clone(t[K]), rotation: t[v] };return t.shape && (e.shape = p[ke]({}, t.shape)), e;\n      }if (t && e) {\n        var a = n(t);e[ve](function (t) {\n          if (!t.isGroup && t.anid) {\n            var e = a[t.anid];if (e) {\n              var n = r(t);t.attr(r(e)), k.updateProps(t, n, i, t[ye]);\n            }\n          }\n        });\n      }\n    }, k;\n  }), e(\"echarts/chart/pie/PieSeries\", [ai, \"../../data/List\", ri, \"../../util/model\", \"../../data/helper/completeDimensions\", \"../../component/helper/selectableMixin\", z], function (t) {\n    var e = t(\"../../data/List\"),\n        i = t(ri),\n        n = t(\"../../util/model\"),\n        r = t(\"../../data/helper/completeDimensions\"),\n        a = t(\"../../component/helper/selectableMixin\"),\n        o = t(z).extendSeriesModel({ type: \"series.pie\", init: function init(t) {\n        o.superApply(this, \"init\", arguments), this.legendDataProvider = function () {\n          return this._dataBeforeProcessed;\n        }, this.updateSelectedMap(t.data), this._defaultLabelLine(t);\n      }, mergeOption: function mergeOption(t) {\n        o.superCall(this, p, t), this.updateSelectedMap(this[d].data);\n      }, getInitialData: function getInitialData(t) {\n        var i = r([\"value\"], t.data),\n            n = new e(i, this);return n.initData(t.data), n;\n      }, getDataParams: function getDataParams(t) {\n        var e = this._data,\n            i = o.superCall(this, me, t),\n            n = e.getSum(\"value\");return i.percent = n ? +(e.get(\"value\", t) / n * 100)[f](2) : 0, i.$vars.push(\"percent\"), i;\n      }, _defaultLabelLine: function _defaultLabelLine(t) {\n        n.defaultEmphasis(t.labelLine, [\"show\"]);var e = t.labelLine[D],\n            i = t.labelLine[b];e.show = e.show && t.label[D].show, i.show = i.show && t.label[b].show;\n      }, defaultOption: { zlevel: 0, z: 2, legendHoverLink: !0, hoverAnimation: !0, center: [\"50%\", \"50%\"], radius: [0, \"75%\"], clockwise: !0, startAngle: 90, minAngle: 0, selectedOffset: 10, avoidLabelOverlap: !0, label: { normal: { rotate: !1, show: !0, position: \"outer\" }, emphasis: {} }, labelLine: { normal: { show: !0, length: 15, length2: 15, smooth: !1, lineStyle: { width: 1, type: \"solid\" } } }, itemStyle: { normal: { borderWidth: 1 }, emphasis: {} }, animationEasing: \"cubicOut\", data: [] } });return i.mixin(o, a), o;\n  }), e(\"echarts/chart/pie/PieView\", [ai, I, ri, \"../../view/Chart\"], function (t) {\n    function e(t, e, n, r) {\n      var a = e[ni](),\n          o = this[ye],\n          s = a[h](o),\n          l = e.get(\"selectedOffset\");r[Ce]({ type: \"pieToggleSelect\", from: t, name: s, seriesId: e.id }), a.each(function (t) {\n        i(a[A](t), a[P](t), e.isSelected(a[h](t)), l, n);\n      });\n    }function i(t, e, i, n, r) {\n      var a = (e.startAngle + e.endAngle) / 2,\n          o = Math.cos(a),\n          s = Math.sin(a),\n          l = i ? n : 0,\n          u = [o * l, s * l];r ? t.animate().when(200, { position: u }).start(\"bounceOut\") : t.attr(K, u);\n    }function n(t, e) {\n      function i() {\n        o[Ne] = o.hoverIgnore, s[Ne] = s.hoverIgnore;\n      }function n() {\n        o[Ne] = o.normalIgnore, s[Ne] = s.normalIgnore;\n      }a.Group.call(this);var r = new a.Sector({ z2: 2 }),\n          o = new a.Polyline(),\n          s = new a.Text();this.add(r), this.add(o), this.add(s), this[c](t, e, !0), this.on(b, i).on(D, n).on(be, i).on(_e, n);\n    }function r(t, e, i, n, r) {\n      var a = n[Ze](ae),\n          s = \"inside\" === r || \"inner\" === r;return { fill: a[ie]() || (s ? \"#fff\" : t[S](e, \"color\")), opacity: t[S](e, Q), textFont: a[ne](), text: o[V](t.hostModel.getFormattedLabel(e, i), t[h](e)) };\n    }var a = t(I),\n        o = t(ri),\n        s = n[Ue];s[c] = function (t, e, n) {\n      function r() {\n        l.stopAnimation(!0), l.animateTo({ shape: { r: h.r + 10 } }, 300, \"elasticOut\");\n      }function s() {\n        l.stopAnimation(!0), l.animateTo({ shape: { r: h.r } }, 300, \"elasticOut\");\n      }var l = this.childAt(0),\n          u = t.hostModel,\n          c = t[L](e),\n          h = t[P](e),\n          f = o[ke]({}, h);f.label = null, n ? (l[M](f), l.shape.endAngle = h.startAngle, a.updateProps(l, { shape: { endAngle: h.endAngle } }, u, e)) : a.updateProps(l, { shape: f }, u, e);var d = c[Ze](\"itemStyle\"),\n          p = t[S](e, \"color\");l.useStyle(o[Je]({ lineJoin: \"bevel\", fill: p }, d[Ze](D)[Ke]())), l.hoverStyle = d[Ze](b)[Ke](), i(this, t[P](e), c.get(\"selected\"), u.get(\"selectedOffset\"), u.get(qe)), l.off(be).off(_e).off(b).off(D), c.get(\"hoverAnimation\") && u.ifEnableAnimation() && l.on(be, r).on(_e, s).on(b, r).on(D, s), this._updateLabel(t, e), a.setHoverStyle(this);\n    }, s._updateLabel = function (t, e) {\n      var i = this.childAt(1),\n          n = this.childAt(2),\n          o = t.hostModel,\n          s = t[L](e),\n          l = t[P](e),\n          u = l.label,\n          c = t[S](e, \"color\");a.updateProps(i, { shape: { points: u.linePoints || [[u.x, u.y], [u.x, u.y], [u.x, u.y]] } }, o, e), a.updateProps(n, { style: { x: u.x, y: u.y } }, o, e), n.attr({ style: { textVerticalAlign: u.verticalAlign, textAlign: u[re], textFont: u.font }, rotation: u[v], origin: [u.x, u.y], z2: 10 });var h = s[Ze](\"label.normal\"),\n          f = s[Ze](\"label.emphasis\"),\n          d = s[Ze](\"labelLine.normal\"),\n          p = s[Ze](\"labelLine.emphasis\"),\n          m = h.get(K) || f.get(K);n[pe](r(t, e, D, h, m)), n[Ne] = n.normalIgnore = !h.get(\"show\"), n.hoverIgnore = !f.get(\"show\"), i[Ne] = i.normalIgnore = !d.get(\"show\"), i.hoverIgnore = !p.get(\"show\"), i[pe]({ stroke: c, opacity: t[S](e, Q) }), i[pe](d[Ze](\"lineStyle\").getLineStyle()), n.hoverStyle = r(t, e, b, f, m), i.hoverStyle = p[Ze](\"lineStyle\").getLineStyle();var g = d.get(\"smooth\");g && g === !0 && (g = .4), i[M]({ smooth: g });\n    }, o[oe](n, a.Group);var l = t(\"../../view/Chart\")[ke]({ type: \"pie\", init: function init() {\n        var t = new a.Group();this._sectorGroup = t;\n      }, render: function render(t, i, r, a) {\n        if (!a || a.from !== this.uid) {\n          var s = t[ni](),\n              l = this._data,\n              u = this.group,\n              h = i.get(qe),\n              f = !l,\n              d = o.curry(e, this.uid, t, h, r),\n              p = t.get(\"selectedMode\");if (s.diff(l).add(function (t) {\n            var e = new n(s, t);f && e.eachChild(function (t) {\n              t.stopAnimation(!0);\n            }), p && e.on(\"click\", d), s[C](t, e), u.add(e);\n          })[Ie](function (t, e) {\n            var i = l[A](e);i[c](s, t), i.off(\"click\"), p && i.on(\"click\", d), u.add(i), s[C](t, i);\n          })[Le](function (t) {\n            var e = l[A](t);u[Le](e);\n          })[k](), h && f && s.count() > 0) {\n            var v = s[P](0),\n                m = Math.max(r[Ge](), r[He]()) / 2,\n                g = o.bind(u.removeClipPath, u);u.setClipPath(this._createClipPath(v.cx, v.cy, m, v.startAngle, v.clockwise, g, t));\n          }this._data = s;\n        }\n      }, _createClipPath: function _createClipPath(t, e, i, n, r, o, s) {\n        var l = new a.Sector({ shape: { cx: t, cy: e, r0: 0, r: i, startAngle: n, endAngle: n, clockwise: r } });return a.initProps(l, { shape: { endAngle: n + (r ? 1 : -1) * Math.PI * 2 } }, s, o), l;\n      } });return l;\n  }), e(\"echarts/action/createDataSelectAction\", [ai, \"../echarts\", ri], function (t) {\n    var e = t(\"../echarts\"),\n        i = t(ri);return function (t, n) {\n      i.each(n, function (i) {\n        i[Ie] = \"updateView\", e.registerAction(i, function (e, n) {\n          var r = {};return n[Be]({ mainType: \"series\", subType: t, query: e }, function (t) {\n            t[i.method] && t[i.method](e.name);var n = t[ni]();n.each(function (e) {\n              var i = n[h](e);r[i] = t.isSelected(i) || !1;\n            });\n          }), { name: e.name, selected: r };\n        });\n      });\n    };\n  }), e(\"echarts/visual/dataColor\", [ai], function () {\n    return function (t, e) {\n      var i = {};e.eachRawSeriesByType(t, function (t) {\n        var n = t.getRawData(),\n            r = {};if (!e.isSeriesFiltered(t)) {\n          var a = t[ni]();a.each(function (t) {\n            var e = a.getRawIndex(t);r[e] = t;\n          }), n.each(function (e) {\n            var o = n[L](e),\n                s = r[e],\n                l = null != s && a[S](s, \"color\", !0);if (l) n.setItemVisual(e, \"color\", l);else {\n              var u = o.get(\"itemStyle.normal.color\") || t.getColorFromPalette(n[h](e), i);n.setItemVisual(e, \"color\", u), null != s && a.setItemVisual(s, \"color\", u);\n            }\n          });\n        }\n      });\n    };\n  }), e(\"echarts/processor/dataFilter\", [], function () {\n    return function (t, e) {\n      var i = e.findComponents({ mainType: \"legend\" });i && i[Ae] && e.eachSeriesByType(t, function (t) {\n        var e = t[ni]();e.filterSelf(function (t) {\n          for (var n = e[h](t), r = 0; r < i[Ae]; r++) {\n            if (!i[r].isSelected(n)) return !1;\n          }return !0;\n        }, this);\n      }, this);\n    };\n  }), e(\"echarts/chart/pie/pieLayout\", [ai, u, \"./labelLayout\", ri], function (t) {\n    var e = t(u),\n        i = e[R],\n        n = t(\"./labelLayout\"),\n        r = t(ri),\n        a = 2 * Math.PI,\n        o = Math.PI / 180;return function (t, s, l) {\n      s.eachSeriesByType(t, function (t) {\n        var s = t.get(J),\n            u = t.get(\"radius\");r[he](u) || (u = [0, u]), r[he](s) || (s = [s, s]);var c = l[Ge](),\n            h = l[He](),\n            f = Math.min(c, h),\n            d = i(s[0], c),\n            p = i(s[1], h),\n            v = i(u[0], f / 2),\n            m = i(u[1], f / 2),\n            g = t[ni](),\n            y = -t.get(\"startAngle\") * o,\n            x = t.get(\"minAngle\") * o,\n            _ = g.getSum(\"value\"),\n            b = Math.PI / (_ || g.count()) * 2,\n            w = t.get(\"clockwise\"),\n            M = t.get(\"roseType\"),\n            S = g.getDataExtent(\"value\");S[0] = 0;var T = a,\n            A = 0,\n            C = y,\n            k = w ? 1 : -1;if (g.each(\"value\", function (t, i) {\n          var n;n = \"area\" !== M ? 0 === _ ? b : t * b : a / (g.count() || 1), x > n ? (n = x, T -= x) : A += t;var r = C + k * n;g.setItemLayout(i, { angle: n, startAngle: C, endAngle: r, clockwise: w, cx: d, cy: p, r0: v, r: M ? e.linearMap(t, S, [v, m]) : m }), C = r;\n        }, !0), a > T) if (.001 >= T) {\n          var L = a / g.count();g.each(function (t) {\n            var e = g[P](t);e.startAngle = y + k * t * L, e.endAngle = y + k * (t + 1) * L;\n          });\n        } else b = T / A, C = y, g.each(\"value\", function (t, e) {\n          var i = g[P](e),\n              n = i.angle === x ? x : t * b;i.startAngle = C, i.endAngle = C + k * n, C += n;\n        });n(t, m, c, h);\n      });\n    };\n  }), e(\"echarts/chart/line/LineSeries\", [ai, \"../helper/createListFromArray\", \"../../model/Series\"], function (t) {\n    var e = t(\"../helper/createListFromArray\"),\n        i = t(\"../../model/Series\");return i[ke]({ type: \"series.line\", dependencies: [\"grid\", \"polar\"], getInitialData: function getInitialData(t, i) {\n        return e(t.data, this, i);\n      }, defaultOption: { zlevel: 0, z: 2, coordinateSystem: \"cartesian2d\", legendHoverLink: !0, hoverAnimation: !0, clipOverflow: !0, label: { normal: { position: \"top\" } }, lineStyle: { normal: { width: 2, type: \"solid\" } }, step: !1, smooth: !1, smoothMonotone: null, symbol: \"emptyCircle\", symbolSize: 4, symbolRotate: null, showSymbol: !0, showAllSymbol: !1, connectNulls: !1, sampling: \"none\", animationEasing: \"linear\", progressive: 0, hoverLayerThreshold: 1 / 0 } });\n  }), e(\"echarts/chart/line/LineView\", [ai, ri, \"../helper/SymbolDraw\", \"../helper/Symbol\", \"./lineAnimationDiff\", I, \"./poly\", \"../../view/Chart\"], function (t) {\n    function e(t, e) {\n      if (t[Ae] === e[Ae]) {\n        for (var i = 0; i < t[Ae]; i++) {\n          var n = t[i],\n              r = e[i];if (n[0] !== r[0] || n[1] !== r[1]) return;\n        }return !0;\n      }\n    }function i(t) {\n      return (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === ue ? t : t ? .3 : 0;\n    }function n(t) {\n      var e = t.getGlobalExtent();if (t.onBand) {\n        var i = t.getBandWidth() / 2 - 1,\n            n = e[1] > e[0] ? 1 : -1;e[0] += n * i, e[1] -= n * i;\n      }return e;\n    }function r(t) {\n      return t >= 0 ? 1 : -1;\n    }function a(t, e) {\n      var i = t[E](),\n          n = t.getOtherAxis(i),\n          a = i.onZero ? 0 : n.scale[j]()[0],\n          o = n.dim,\n          s = \"x\" === o || \"radius\" === o ? 1 : 0;return e.mapArray([o], function (n, l) {\n        for (var u, c = e.stackedOn; c && r(c.get(o, l)) === r(n);) {\n          u = c;break;\n        }var h = [];return h[s] = e.get(i.dim, l), h[1 - s] = u ? u.get(o, l, !0) : a, t[N](h);\n      }, !0);\n    }function o(t, e) {\n      return null != e[ye] ? e[ye] : null != e.name ? t.indexOfName(e.name) : void 0;\n    }function s(t, e, i) {\n      var r = n(t[q](\"x\")),\n          a = n(t[q](\"y\")),\n          o = t[E]().isHorizontal(),\n          s = Math.min(r[0], r[1]),\n          l = Math.min(a[0], a[1]),\n          u = Math.max(r[0], r[1]) - s,\n          c = Math.max(a[0], a[1]) - l,\n          h = i.get(\"lineStyle.normal.width\") || 2,\n          f = i.get(\"clipOverflow\") ? h / 2 : Math.max(u, c);o ? (l -= f, c += 2 * f) : (s -= f, u += 2 * f);var d = new y.Rect({ shape: { x: s, y: l, width: u, height: c } });return e && (d.shape[o ? \"width\" : Re] = 0, y.initProps(d, { shape: { width: u, height: c } }, i)), d;\n    }function l(t, e, i) {\n      var n = t.getAngleAxis(),\n          r = t.getRadiusAxis(),\n          a = r[j](),\n          o = n[j](),\n          s = Math.PI / 180,\n          l = new y.Sector({ shape: { cx: t.cx, cy: t.cy, r0: a[0], r: a[1], startAngle: -o[0] * s, endAngle: -o[1] * s, clockwise: n.inverse } });return e && (l.shape.endAngle = -o[0] * s, y.initProps(l, { shape: { endAngle: -o[1] * s } }, i)), l;\n    }function u(t, e, i) {\n      return \"polar\" === t.type ? l(t, e, i) : s(t, e, i);\n    }function h(t, e, i) {\n      for (var n = e[E](), r = \"x\" === n.dim || \"radius\" === n.dim ? 0 : 1, a = [], o = 0; o < t[Ae] - 1; o++) {\n        var s = t[o + 1],\n            l = t[o];a.push(l);var u = [];switch (i) {case \"end\":\n            u[r] = s[r], u[1 - r] = l[1 - r], a.push(u);break;case te:\n            var c = (l[r] + s[r]) / 2,\n                h = [];u[r] = h[r] = c, u[1 - r] = l[1 - r], h[1 - r] = s[1 - r], a.push(u), a.push(h);break;default:\n            u[r] = l[r], u[1 - r] = s[1 - r], a.push(u);}\n      }return t[o] && a.push(t[o]), a;\n    }function f(t, e) {\n      return Math.max(Math.min(t, e[1]), e[0]);\n    }function d(t, e) {\n      var i = t.getVisual(\"visualMeta\");if (i && i[Ae]) {\n        for (var n, r = i[Ae] - 1; r >= 0; r--) {\n          if (i[r].dimension < 2) {\n            n = i[r];break;\n          }\n        }if (n && \"cartesian2d\" === e.type) {\n          var a = n.dimension,\n              o = t[B][a],\n              s = t.getDataExtent(o),\n              l = n.stops,\n              u = [];l[0].interval && l.sort(function (t, e) {\n            return t.interval[0] - e.interval[0];\n          });var c = l[0],\n              h = l[l[Ae] - 1],\n              d = c.interval ? f(c.interval[0], s) : c.value,\n              p = h.interval ? f(h.interval[1], s) : h.value,\n              v = p - d;if (0 === v) return t[S](0, \"color\");for (var r = 0; r < l[Ae]; r++) {\n            if (l[r].interval) {\n              if (l[r].interval[1] === l[r].interval[0]) continue;u.push({ offset: (f(l[r].interval[0], s) - d) / v, color: l[r].color }, { offset: (f(l[r].interval[1], s) - d) / v, color: l[r].color });\n            } else u.push({ offset: (l[r].value - d) / v, color: l[r].color });\n          }var m = new y.LinearGradient(0, 0, 0, 0, u, !0),\n              g = e[q](o),\n              x = Math.round(g[H](g[O](d))),\n              _ = Math.round(g[H](g[O](p)));return m[o] = x, m[o + \"2\"] = _, m;\n        }\n      }\n    }var p = t(ri),\n        v = t(\"../helper/SymbolDraw\"),\n        m = t(\"../helper/Symbol\"),\n        g = t(\"./lineAnimationDiff\"),\n        y = t(I),\n        x = t(\"./poly\"),\n        _ = t(\"../../view/Chart\");return _[ke]({ type: \"line\", init: function init() {\n        var t = new y.Group(),\n            e = new v();this.group.add(e.group), this._symbolDraw = e, this._lineGroup = t;\n      }, render: function render(t, n, r) {\n        var o = t[ti],\n            s = this.group,\n            l = t[ni](),\n            f = t[Ze](\"lineStyle.normal\"),\n            v = t[Ze](\"areaStyle.normal\"),\n            m = l.mapArray(l[P], !0),\n            g = \"polar\" === o.type,\n            y = this._coordSys,\n            x = this._symbolDraw,\n            _ = this._polyline,\n            b = this._polygon,\n            w = this._lineGroup,\n            S = t.get(qe),\n            A = !v.isEmpty(),\n            k = a(o, l),\n            L = t.get(\"showSymbol\"),\n            D = L && !g && !t.get(\"showAllSymbol\") && this._getSymbolIgnoreFunc(l, o),\n            z = this._data;z && z[T](function (t, e) {\n          t.__temp && (s[Le](t), z[C](e, null));\n        }), L || x[Le](), s.add(w);var I = !g && t.get(\"step\");_ && y.type === o.type && I === this._step ? (A && !b ? b = this._newPolygon(m, k, o, S) : b && !A && (w[Le](b), b = this._polygon = null), w.setClipPath(u(o, !1, t)), L && x[c](l, D), l[T](function (t) {\n          t.stopAnimation(!0);\n        }), e(this._stackedOnPoints, k) && e(this._points, m) || (S ? this._updateAnimation(l, k, o, r, I) : (I && (m = h(m, o, I), k = h(k, o, I)), _[M]({ points: m }), b && b[M]({ points: m, stackedOnPoints: k })))) : (L && x[c](l, D), I && (m = h(m, o, I), k = h(k, o, I)), _ = this._newPolyline(m, o, S), A && (b = this._newPolygon(m, k, o, S)), w.setClipPath(u(o, !0, t)));var O = d(l, o) || l.getVisual(\"color\");_.useStyle(p[Je](f.getLineStyle(), { fill: \"none\", stroke: O, lineJoin: \"bevel\" }));var R = t.get(\"smooth\");if (R = i(t.get(\"smooth\")), _[M]({ smooth: R, smoothMonotone: t.get(\"smoothMonotone\"), connectNulls: t.get(\"connectNulls\") }), b) {\n          var E = l.stackedOn,\n              N = 0;if (b.useStyle(p[Je](v.getAreaStyle(), { fill: O, opacity: .7, lineJoin: \"bevel\" })), E) {\n            var B = E.hostModel;N = i(B.get(\"smooth\"));\n          }b[M]({ smooth: R, stackedOnSmooth: N, smoothMonotone: t.get(\"smoothMonotone\"), connectNulls: t.get(\"connectNulls\") });\n        }this._data = l, this._coordSys = o, this._stackedOnPoints = k, this._points = m, this._step = I;\n      }, highlight: function highlight(t, e, i, n) {\n        var r = t[ni](),\n            a = o(r, n);if (!(a instanceof Array) && null != a && a >= 0) {\n          var s = r[A](a);if (!s) {\n            var l = r[P](a);s = new m(r, a), s[K] = l, s.setZ(t.get(de), t.get(\"z\")), s[Ne] = isNaN(l[0]) || isNaN(l[1]), s.__temp = !0, r[C](a, s), s.stopSymbolAnimation(!0), this.group.add(s);\n          }s.highlight();\n        } else _[Ue].highlight.call(this, t, e, i, n);\n      }, downplay: function downplay(t, e, i, n) {\n        var r = t[ni](),\n            a = o(r, n);if (null != a && a >= 0) {\n          var s = r[A](a);s && (s.__temp ? (r[C](a, null), this.group[Le](s)) : s.downplay());\n        } else _[Ue].downplay.call(this, t, e, i, n);\n      }, _newPolyline: function _newPolyline(t) {\n        var e = this._polyline;return e && this._lineGroup[Le](e), e = new x.Polyline({ shape: { points: t }, silent: !0, z2: 10 }), this._lineGroup.add(e), this._polyline = e, e;\n      }, _newPolygon: function _newPolygon(t, e) {\n        var i = this._polygon;return i && this._lineGroup[Le](i), i = new x.Polygon({ shape: { points: t, stackedOnPoints: e }, silent: !0 }), this._lineGroup.add(i), this._polygon = i, i;\n      }, _getSymbolIgnoreFunc: function _getSymbolIgnoreFunc(t, e) {\n        var i = e.getAxesByScale(G)[0];return i && i.isLabelIgnored ? p.bind(i.isLabelIgnored, i) : void 0;\n      }, _updateAnimation: function _updateAnimation(t, e, i, n, r) {\n        var a = this._polyline,\n            o = this._polygon,\n            s = t.hostModel,\n            l = g(this._data, t, this._stackedOnPoints, e, this._coordSys, i),\n            u = l.current,\n            c = l.stackedOnCurrent,\n            f = l.next,\n            d = l.stackedOnNext;r && (u = h(l.current, i, r), c = h(l.stackedOnCurrent, i, r), f = h(l.next, i, r), d = h(l.stackedOnNext, i, r)), a.shape.__points = l.current, a.shape.points = u, y.updateProps(a, { shape: { points: f } }, s), o && (o[M]({ points: u, stackedOnPoints: c }), y.updateProps(o, { shape: { points: f, stackedOnPoints: d, __points: l.next } }, s));for (var p = [], v = l.status, m = 0; m < v[Ae]; m++) {\n          var x = v[m].cmd;if (\"=\" === x) {\n            var _ = t[A](v[m].idx1);_ && p.push({ el: _, ptIdx: m });\n          }\n        }a.animators && a.animators[Ae] && a.animators[0].during(function () {\n          for (var t = 0; t < p[Ae]; t++) {\n            var e = p[t].el;e.attr(K, a.shape.__points[p[t].ptIdx]);\n          }\n        });\n      }, remove: function remove() {\n        var t = this.group,\n            e = this._data;this._lineGroup[ei](), this._symbolDraw[Le](!0), e && e[T](function (i, n) {\n          i.__temp && (t[Le](i), e[C](n, null));\n        }), this._polyline = this._polygon = this._coordSys = this._points = this._stackedOnPoints = this._data = null;\n      } });\n  }), e(\"echarts/visual/symbol\", [ai], function () {\n    return function (t, e, i, n) {\n      n.eachRawSeriesByType(t, function (t) {\n        var r = t[ni](),\n            a = t.get(\"symbol\") || e,\n            o = t.get(\"symbolSize\");r.setVisual({ legendSymbol: i || a, symbol: a, symbolSize: o }), n.isSeriesFiltered(t) || ((typeof o === \"undefined\" ? \"undefined\" : _typeof(o)) === ce && r.each(function (e) {\n          var i = t[w](e),\n              n = t[me](e);r.setItemVisual(e, \"symbolSize\", o(i, n));\n        }), r.each(function (t) {\n          var e = r[L](t),\n              i = e[g](\"symbol\", !0),\n              n = e[g](\"symbolSize\", !0);null != i && r.setItemVisual(t, \"symbol\", i), null != n && r.setItemVisual(t, \"symbolSize\", n);\n        }));\n      });\n    };\n  }), e(\"echarts/layout/points\", [ai], function () {\n    return function (t, e) {\n      e.eachSeriesByType(t, function (t) {\n        var e = t[ni](),\n            i = t[ti];if (i) {\n          var n = i[B];\"singleAxis\" === i.type ? e.each(n[0], function (t, n) {\n            e.setItemLayout(n, isNaN(t) ? [0 / 0, 0 / 0] : i[N](t));\n          }) : e.each(n, function (t, n, r) {\n            e.setItemLayout(r, isNaN(t) || isNaN(n) ? [0 / 0, 0 / 0] : i[N]([t, n]));\n          }, !0);\n        }\n      });\n    };\n  }), e(\"echarts/processor/dataSample\", [], function () {\n    var t = { average: function average(t) {\n        for (var e = 0, i = 0, n = 0; n < t[Ae]; n++) {\n          isNaN(t[n]) || (e += t[n], i++);\n        }return 0 === i ? 0 / 0 : e / i;\n      }, sum: function sum(t) {\n        for (var e = 0, i = 0; i < t[Ae]; i++) {\n          e += t[i] || 0;\n        }return e;\n      }, max: function max(t) {\n        for (var e = -1 / 0, i = 0; i < t[Ae]; i++) {\n          t[i] > e && (e = t[i]);\n        }return e;\n      }, min: function min(t) {\n        for (var e = 1 / 0, i = 0; i < t[Ae]; i++) {\n          t[i] < e && (e = t[i]);\n        }return e;\n      }, nearest: function nearest(t) {\n        return t[0];\n      } },\n        e = function e(t) {\n      return Math.round(t[Ae] / 2);\n    };return function (i, n) {\n      n.eachSeriesByType(i, function (i) {\n        var n = i[ni](),\n            r = i.get(\"sampling\"),\n            a = i[ti];if (\"cartesian2d\" === a.type && r) {\n          var o = a[E](),\n              s = a.getOtherAxis(o),\n              l = o[j](),\n              u = l[1] - l[0],\n              c = Math.round(n.count() / u);if (c > 1) {\n            var h;(typeof r === \"undefined\" ? \"undefined\" : _typeof(r)) === je ? h = t[r] : (typeof r === \"undefined\" ? \"undefined\" : _typeof(r)) === ce && (h = r), h && (n = n.downSample(s.dim, 1 / c, h, e), i.setData(n));\n          }\n        }\n      }, this);\n    };\n  }), e(Qe, [], function () {\n    function t(t) {\n      var e = {},\n          i = {},\n          n = t.match(/Firefox\\/([\\d.]+)/),\n          r = t.match(/MSIE\\s([\\d.]+)/) || t.match(/Trident\\/.+?rv:(([\\d.]+))/),\n          a = t.match(/Edge\\/([\\d.]+)/);return n && (i.firefox = !0, i.version = n[1]), r && (i.ie = !0, i.version = r[1]), r && (i.ie = !0, i.version = r[1]), a && (i.edge = !0, i.version = a[1]), { browser: i, os: e, node: !1, canvasSupported: document[X](\"canvas\").getContext ? !0 : !1, touchEventsSupported: \"ontouchstart\" in window && !i.ie && !i.edge, pointerEventsSupported: \"onpointerdown\" in window && (i.edge || i.ie && i.version >= 10) };\n    }var e = {};return e = (typeof navigator === \"undefined\" ? \"undefined\" : _typeof(navigator)) === l ? { browser: {}, os: {}, node: !0, canvasSupported: !0 } : t(navigator.userAgent);\n  }), e(\"echarts/model/Global\", [ai, ri, \"../util/model\", \"./Model\", \"./Component\", \"./globalDefault\", \"./mixin/colorPalette\"], function (t) {\n    function e(t, e) {\n      for (var i in e) {\n        _.hasClass(i) || (\"object\" == _typeof(e[i]) ? t[i] = t[i] ? u.merge(t[i], e[i], !1) : u.clone(e[i]) : null == t[i] && (t[i] = e[i]));\n      }\n    }function i(t) {\n      t = t, this[d] = {}, this[d][w] = 1, this._componentsMap = {}, this._seriesIndices = null, e(t, this._theme[d]), u.merge(t, b, !1), this[p](t);\n    }function n(t, e) {\n      u[he](e) || (e = e ? [e] : []);var i = {};return f(e, function (e) {\n        i[e] = (t[e] || []).slice();\n      }), i;\n    }function r(t, e) {\n      var i = {};f(e, function (t) {\n        var e = t.exist;e && (i[e.id] = t);\n      }), f(e, function (e) {\n        var n = e[d];if (u.assert(!n || null == n.id || !i[n.id] || i[n.id] === e, \"id duplicates: \" + (n && n.id)), n && null != n.id && (i[n.id] = e), x(n)) {\n          var r = a(t, n, e.exist);e.keyInfo = { mainType: t, subType: r };\n        }\n      }), f(e, function (t) {\n        var e = t.exist,\n            n = t[d],\n            r = t.keyInfo;if (x(n)) {\n          if (r.name = null != n.name ? n.name + \"\" : e ? e.name : \"\\x00-\", e) r.id = e.id;else if (null != n.id) r.id = n.id + \"\";else {\n            var a = 0;do {\n              r.id = \"\\x00\" + r.name + \"\\x00\" + a++;\n            } while (i[r.id]);\n          }i[r.id] = t;\n        }\n      });\n    }function a(t, e, i) {\n      var n = e.type ? e.type : i ? i.subType : _.determineSubType(t, e);return n;\n    }function o(t) {\n      return m(t, function (t) {\n        return t[Z];\n      }) || [];\n    }function s(t, e) {\n      return e.hasOwnProperty(\"subType\") ? v(t, function (t) {\n        return t.subType === e.subType;\n      }) : t;\n    }function l(t) {}var u = t(ri),\n        c = t(\"../util/model\"),\n        h = t(\"./Model\"),\n        f = u.each,\n        v = u[le],\n        m = u.map,\n        g = u[he],\n        y = u[se],\n        x = u[Pe],\n        _ = t(\"./Component\"),\n        b = t(\"./globalDefault\"),\n        w = \"\\x00_ec_inner\",\n        M = h[ke]({ constructor: M, init: function init(t, e, i, n) {\n        i = i || {}, this[d] = null, this._theme = new h(i), this._optionManager = n;\n      }, setOption: function setOption(t, e) {\n        u.assert(!(w in t), \"please use chart.getOption()\"), this._optionManager.setOption(t, e), this.resetOption();\n      }, resetOption: function resetOption(t) {\n        var e = !1,\n            n = this._optionManager;if (!t || \"recreate\" === t) {\n          var r = n.mountOption(\"recreate\" === t);this[d] && \"recreate\" !== t ? (this.restoreData(), this[p](r)) : i.call(this, r), e = !0;\n        }if ((\"timeline\" === t || \"media\" === t) && this.restoreData(), !t || \"recreate\" === t || \"timeline\" === t) {\n          var a = n.getTimelineOption(this);a && (this[p](a), e = !0);\n        }if (!t || \"recreate\" === t || \"media\" === t) {\n          var o = n.getMediaOption(this, this._api);o[Ae] && f(o, function (t) {\n            this[p](t, e = !0);\n          }, this);\n        }return e;\n      }, mergeOption: function mergeOption(t) {\n        function e(e, s) {\n          var l = c.normalizeToArray(t[e]),\n              h = c.mappingToExists(a[e], l);r(e, h);var v = n(a, s);i[e] = [], a[e] = [], f(h, function (t, n) {\n            var r = t.exist,\n                o = t[d];if (u.assert(x(o) || r, \"Empty component definition\"), o) {\n              var s = _.getClass(e, t.keyInfo.subType, !0);if (r && r instanceof s) r[p](o, this), r.optionUpdated(o, !1);else {\n                var l = u[ke]({ dependentModels: v, componentIndex: n }, t.keyInfo);r = new s(o, this, this, l), r.init(o, this, this, l), r.optionUpdated(null, !0);\n              }\n            } else r[p]({}, this), r.optionUpdated({}, !1);a[e][n] = r, i[e][n] = r[d];\n          }, this), e === Se && (this._seriesIndices = o(a[Se]));\n        }var i = this[d],\n            a = this._componentsMap,\n            s = [];f(t, function (t, e) {\n          null != t && (_.hasClass(e) ? s.push(e) : i[e] = null == i[e] ? u.clone(t) : u.merge(i[e], t, !0));\n        }), _.topologicalTravel(s, _.getAllClassMainTypes(), e, this), this._seriesIndices = this._seriesIndices || [];\n      }, getOption: function getOption() {\n        var t = u.clone(this[d]);return f(t, function (e, i) {\n          if (_.hasClass(i)) {\n            for (var e = c.normalizeToArray(e), n = e[Ae] - 1; n >= 0; n--) {\n              c.isIdInner(e[n]) && e[Me](n, 1);\n            }t[i] = e;\n          }\n        }), delete t[w], t;\n      }, getTheme: function getTheme() {\n        return this._theme;\n      }, getComponent: function getComponent(t, e) {\n        var i = this._componentsMap[t];return i ? i[e || 0] : void 0;\n      }, queryComponents: function queryComponents(t) {\n        var e = t.mainType;if (!e) return [];var i = t.index,\n            n = t.id,\n            r = t.name,\n            a = this._componentsMap[e];if (!a || !a[Ae]) return [];var o;if (null != i) g(i) || (i = [i]), o = v(m(i, function (t) {\n          return a[t];\n        }), function (t) {\n          return !!t;\n        });else if (null != n) {\n          var l = g(n);o = v(a, function (t) {\n            return l && y(n, t.id) >= 0 || !l && t.id === n;\n          });\n        } else if (null != r) {\n          var u = g(r);o = v(a, function (t) {\n            return u && y(r, t.name) >= 0 || !u && t.name === r;\n          });\n        } else o = a;return s(o, t);\n      }, findComponents: function findComponents(t) {\n        function e(t) {\n          var e = r + \"Index\",\n              i = r + \"Id\",\n              n = r + \"Name\";return t && (t.hasOwnProperty(e) || t.hasOwnProperty(i) || t.hasOwnProperty(n)) ? { mainType: r, index: t[e], id: t[i], name: t[n] } : null;\n        }function i(e) {\n          return t[le] ? v(e, t[le]) : e;\n        }var n = t.query,\n            r = t.mainType,\n            a = e(n),\n            o = a ? this[F](a) : this._componentsMap[r];return i(s(o, t));\n      }, eachComponent: function eachComponent(t, e, i) {\n        var n = this._componentsMap;if ((typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === ce) i = e, e = t, f(n, function (t, n) {\n          f(t, function (t, r) {\n            e.call(i, n, t, r);\n          });\n        });else if (u.isString(t)) f(n[t], e, i);else if (x(t)) {\n          var r = this.findComponents(t);f(r, e, i);\n        }\n      }, getSeriesByName: function getSeriesByName(t) {\n        var e = this._componentsMap[Se];return v(e, function (e) {\n          return e.name === t;\n        });\n      }, getSeriesByIndex: function getSeriesByIndex(t) {\n        return this._componentsMap[Se][t];\n      }, getSeriesByType: function getSeriesByType(t) {\n        var e = this._componentsMap[Se];return v(e, function (e) {\n          return e.subType === t;\n        });\n      }, getSeries: function getSeries() {\n        return this._componentsMap[Se].slice();\n      }, eachSeries: function eachSeries(t, e) {\n        l(this), f(this._seriesIndices, function (i) {\n          var n = this._componentsMap[Se][i];t.call(e, n, i);\n        }, this);\n      }, eachRawSeries: function eachRawSeries(t, e) {\n        f(this._componentsMap[Se], t, e);\n      }, eachSeriesByType: function eachSeriesByType(t, e, i) {\n        l(this), f(this._seriesIndices, function (n) {\n          var r = this._componentsMap[Se][n];r.subType === t && e.call(i, r, n);\n        }, this);\n      }, eachRawSeriesByType: function eachRawSeriesByType(t, e, i) {\n        return f(this.getSeriesByType(t), e, i);\n      }, isSeriesFiltered: function isSeriesFiltered(t) {\n        return l(this), u[se](this._seriesIndices, t[Z]) < 0;\n      }, filterSeries: function filterSeries(t, e) {\n        l(this);var i = v(this._componentsMap[Se], t, e);this._seriesIndices = o(i);\n      }, restoreData: function restoreData() {\n        var t = this._componentsMap;this._seriesIndices = o(t[Se]);var e = [];f(t, function (t, i) {\n          e.push(i);\n        }), _.topologicalTravel(e, _.getAllClassMainTypes(), function (e) {\n          f(t[e], function (t) {\n            t.restoreData();\n          });\n        });\n      } });return u.mixin(M, t(\"./mixin/colorPalette\")), M;\n  }), e(\"echarts/ExtensionAPI\", [ai, ri], function (t) {\n    function e(t) {\n      i.each(n, function (e) {\n        this[e] = i.bind(t[e], t);\n      }, this);\n    }var i = t(ri),\n        n = [\"getDom\", \"getZr\", Ge, He, Ce, \"isDisposed\", \"on\", \"off\", \"getDataURL\", \"getConnectedDataURL\", Ze, \"getOption\"];return e;\n  }), e(\"echarts/CoordinateSystem\", [ai], function () {\n    function t() {\n      this._coordinateSystems = [];\n    }var e = {};return t[Ue] = { constructor: t, create: function create(t, i) {\n        var n = [];for (var r in e) {\n          var a = e[r][Oe](t, i);a && (n = n[U](a));\n        }this._coordinateSystems = n;\n      }, update: function update(t, e) {\n        for (var i = this._coordinateSystems, n = 0; n < i[Ae]; n++) {\n          i[n][Ie] && i[n][Ie](t, e);\n        }\n      } }, t.register = function (t, i) {\n      e[t] = i;\n    }, t.get = function (t) {\n      return e[t];\n    }, t;\n  }), e(\"echarts/model/OptionManager\", [ai, ri, \"../util/model\", \"./Component\"], function (t) {\n    function e(t) {\n      this._api = t, this._timelineOptions = [], this._mediaList = [], this._mediaDefault, this._currentMediaIndices = [], this._optionBackup, this._newBaseOption;\n    }function i(t, e, i) {\n      var n,\n          r,\n          a = [],\n          o = [],\n          l = t.timeline;if (t.baseOption && (r = t.baseOption), (l || t.options) && (r = r || {}, a = (t.options || []).slice()), t.media) {\n        r = r || {};var u = t.media;c(u, function (t) {\n          t && t[d] && (t.query ? o.push(t) : n || (n = t));\n        });\n      }return r || (r = t), r.timeline || (r.timeline = l), c([r][U](a)[U](s.map(o, function (t) {\n        return t[d];\n      })), function (t) {\n        c(e, function (e) {\n          e(t, i);\n        });\n      }), { baseOption: r, timelineOptions: a, mediaDefault: n, mediaList: o };\n    }function n(t, e, i) {\n      var n = { width: e, height: i, aspectratio: e / i },\n          a = !0;return s.each(t, function (t, e) {\n        var i = e.match(v);if (i && i[1] && i[2]) {\n          var o = i[1],\n              s = i[2][Xe]();r(n[s], t, o) || (a = !1);\n        }\n      }), a;\n    }function r(t, e, i) {\n      return \"min\" === i ? t >= e : \"max\" === i ? e >= t : t === e;\n    }function a(t, e) {\n      return t.join(\",\") === e.join(\",\");\n    }function o(t, e) {\n      e = e || {}, c(e, function (e, i) {\n        if (null != e) {\n          var n = t[i];if (u.hasClass(i)) {\n            e = l.normalizeToArray(e), n = l.normalizeToArray(n);var r = l.mappingToExists(n, e);t[i] = f(r, function (t) {\n              return t[d] && t.exist ? p(t.exist, t[d], !0) : t.exist || t[d];\n            });\n          } else t[i] = p(n, e, !0);\n        }\n      });\n    }var s = t(ri),\n        l = t(\"../util/model\"),\n        u = t(\"./Component\"),\n        c = s.each,\n        h = s.clone,\n        f = s.map,\n        p = s.merge,\n        v = /^(min|max)?(.+)$/;return e[Ue] = { constructor: e, setOption: function setOption(t, e) {\n        t = h(t, !0);var n = this._optionBackup,\n            r = i.call(this, t, e, !n);this._newBaseOption = r.baseOption, n ? (o(n.baseOption, r.baseOption), r.timelineOptions[Ae] && (n.timelineOptions = r.timelineOptions), r.mediaList[Ae] && (n.mediaList = r.mediaList), r.mediaDefault && (n.mediaDefault = r.mediaDefault)) : this._optionBackup = r;\n      }, mountOption: function mountOption(t) {\n        var e = this._optionBackup;return this._timelineOptions = f(e.timelineOptions, h), this._mediaList = f(e.mediaList, h), this._mediaDefault = h(e.mediaDefault), this._currentMediaIndices = [], h(t ? e.baseOption : this._newBaseOption);\n      }, getTimelineOption: function getTimelineOption(t) {\n        var e,\n            i = this._timelineOptions;if (i[Ae]) {\n          var n = t.getComponent(\"timeline\");n && (e = h(i[n.getCurrentIndex()], !0));\n        }return e;\n      }, getMediaOption: function getMediaOption() {\n        var t = this._api[Ge](),\n            e = this._api[He](),\n            i = this._mediaList,\n            r = this._mediaDefault,\n            o = [],\n            s = [];if (!i[Ae] && !r) return s;for (var l = 0, u = i[Ae]; u > l; l++) {\n          n(i[l].query, t, e) && o.push(l);\n        }return !o[Ae] && r && (o = [-1]), o[Ae] && !a(o, this._currentMediaIndices) && (s = f(o, function (t) {\n          return h(-1 === t ? r[d] : i[t][d]);\n        })), this._currentMediaIndices = o, s;\n      } }, e;\n  }), e(\"echarts/model/Component\", [ai, \"./Model\", ri, \"../util/component\", \"../util/clazz\", \"../util/layout\", \"./mixin/boxLayout\"], function (t) {\n    function e(t) {\n      var e = [];return n.each(l.getClassesByMainType(t), function (t) {\n        r.apply(e, t[Ue].dependencies || []);\n      }), n.map(e, function (t) {\n        return o.parseClassType(t).main;\n      });\n    }var i = t(\"./Model\"),\n        n = t(ri),\n        r = Array[Ue].push,\n        a = t(\"../util/component\"),\n        o = t(\"../util/clazz\"),\n        s = t(\"../util/layout\"),\n        l = i[ke]({ type: \"component\", id: \"\", name: \"\", mainType: \"\", subType: \"\", componentIndex: 0, defaultOption: null, ecModel: null, dependentModels: [], uid: null, layoutMode: null, $constructor: function $constructor(t, e, r, o) {\n        i.call(this, t, e, r, o), n[ke](this, o), this.uid = a.getUID(\"componentModel\");\n      }, init: function init(t, e, i) {\n        this.mergeDefaultAndTheme(t, i);\n      }, mergeDefaultAndTheme: function mergeDefaultAndTheme(t, e) {\n        var i = this.layoutMode,\n            r = i ? s.getLayoutParams(t) : {},\n            a = e.getTheme();n.merge(t, a.get(this.mainType)), n.merge(t, this.getDefaultOption()), i && s.mergeLayoutParam(t, r, i);\n      }, mergeOption: function mergeOption(t) {\n        n.merge(this[d], t, !0);var e = this.layoutMode;e && s.mergeLayoutParam(this[d], t, e);\n      }, optionUpdated: function optionUpdated() {}, getDefaultOption: function getDefaultOption() {\n        if (!this.hasOwnProperty(\"__defaultOption\")) {\n          for (var t = [], e = this.constructor; e;) {\n            var i = e[Ue].defaultOption;i && t.push(i), e = e.superClass;\n          }for (var r = {}, a = t[Ae] - 1; a >= 0; a--) {\n            r = n.merge(r, t[a], !0);\n          }this.__defaultOption = r;\n        }return this.__defaultOption;\n      } });return o.enableClassManagement(l, { registerWhenExtend: !0 }), a.enableSubTypeDefaulter(l), a.enableTopologicalTravel(l, e), n.mixin(l, t(\"./mixin/boxLayout\")), l;\n  }), e(\"echarts/model/Series\", [ai, ri, \"../util/format\", \"../util/model\", \"./Component\", \"./mixin/colorPalette\", Qe], function (t) {\n    var e = t(ri),\n        i = t(\"../util/format\"),\n        n = t(\"../util/model\"),\n        r = t(\"./Component\"),\n        a = t(\"./mixin/colorPalette\"),\n        o = t(Qe),\n        l = i.encodeHTML,\n        u = i.addCommas,\n        c = r[ke]({ type: \"series.__base__\", seriesIndex: 0, coordinateSystem: null, defaultOption: null, legendDataProvider: null, visualColorAccessPath: \"itemStyle.normal.color\", init: function init(t, e, i) {\n        this[ge] = this[Z], this.mergeDefaultAndTheme(t, i), this._dataBeforeProcessed = this.getInitialData(t, i), this._data = this._dataBeforeProcessed.cloneShallow();\n      }, mergeDefaultAndTheme: function mergeDefaultAndTheme(t, i) {\n        e.merge(t, i.getTheme().get(this.subType)), e.merge(t, this.getDefaultOption()), n.defaultEmphasis(t.label, n.LABEL_OPTIONS), this.fillDataTextStyle(t.data);\n      }, mergeOption: function mergeOption(t, i) {\n        t = e.merge(this[d], t, !0), this.fillDataTextStyle(t.data);var n = this.getInitialData(t, i);n && (this._data = n, this._dataBeforeProcessed = n.cloneShallow());\n      }, fillDataTextStyle: function fillDataTextStyle(t) {\n        if (t) for (var e = 0; e < t[Ae]; e++) {\n          t[e] && t[e].label && n.defaultEmphasis(t[e].label, n.LABEL_OPTIONS);\n        }\n      }, getInitialData: function getInitialData() {}, getData: function getData(t) {\n        return null == t ? this._data : this._data.getLinkedData(t);\n      }, setData: function setData(t) {\n        this._data = t;\n      }, getRawData: function getRawData() {\n        return this._dataBeforeProcessed;\n      }, coordDimToDataDim: function coordDimToDataDim(t) {\n        return [t];\n      }, dataDimToCoordDim: function dataDimToCoordDim(t) {\n        return t;\n      }, getBaseAxis: function getBaseAxis() {\n        var t = this[ti];return t && t[E] && t[E]();\n      }, formatTooltip: function formatTooltip(t, n) {\n        function r(t) {\n          return e.map(t, function (t, e) {\n            var r = a.getDimensionInfo(e),\n                o = r && r.type;return o === G ? t : \"time\" === o ? n ? \"\" : i.formatTime(\"yyyy/mm/dd hh:mm:ss\", t) : u(t);\n          })[le](function (t) {\n            return !!t;\n          }).join(\", \");\n        }var a = this._data,\n            o = this[w](t),\n            s = e[he](o) ? r(o) : u(o),\n            c = a[h](t),\n            f = a[S](t, \"color\"),\n            d = '<span style=\"display:inline-block;margin-right:5px;border-radius:10px;width:9px;height:9px;background-color:' + f + '\"></span>',\n            p = this.name;return \"\\x00-\" === p && (p = \"\"), n ? d + l(this.name) + \" : \" + s : (p && l(p) + \"<br />\") + d + (c ? l(c) + \" : \" + s : s);\n      }, ifEnableAnimation: function ifEnableAnimation() {\n        if (o.node) return !1;var t = this[g](qe);return t && this[ni]().count() > this[g](\"animationThreshold\") && (t = !1), t;\n      }, restoreData: function restoreData() {\n        this._data = this._dataBeforeProcessed.cloneShallow();\n      }, getColorFromPalette: function getColorFromPalette(t, e) {\n        var i = this[s],\n            n = a.getColorFromPalette.call(this, t, e);return n || (n = i.getColorFromPalette(t, e)), n;\n      }, getAxisTooltipDataIndex: null });return e.mixin(c, n.dataFormatMixin), e.mixin(c, a), c;\n  }), e(\"echarts/view/Component\", [ai, \"zrender/container/Group\", \"../util/component\", \"../util/clazz\"], function (t) {\n    var e = t(\"zrender/container/Group\"),\n        i = t(\"../util/component\"),\n        n = t(\"../util/clazz\"),\n        r = function r() {\n      this.group = new e(), this.uid = i.getUID(\"viewComponent\");\n    };r[Ue] = { constructor: r, init: function init() {}, render: function render() {}, dispose: function dispose() {} };var a = r[Ue];return a.updateView = a[De] = a.updateVisual = function () {}, n.enableClassExtend(r), n.enableClassManagement(r, { registerWhenExtend: !0 }), r;\n  }), e(\"echarts/view/Chart\", [ai, \"zrender/container/Group\", \"../util/component\", \"../util/clazz\"], function (t) {\n    function e() {\n      this.group = new r(), this.uid = a.getUID(\"viewChart\");\n    }function i(t, e) {\n      if (t && (t[Te](e), \"group\" === t.type)) for (var n = 0; n < t.childCount(); n++) {\n        i(t.childAt(n), e);\n      }\n    }function n(t, e, n) {\n      var r = e && e[ye],\n          a = e && e.name;if (null != r) for (var o = r instanceof Array ? r : [r], s = 0, l = o[Ae]; l > s; s++) {\n        i(t[A](o[s]), n);\n      } else if (a) for (var u = a instanceof Array ? a : [a], s = 0, l = u[Ae]; l > s; s++) {\n        var r = t.indexOfName(u[s]);i(t[A](r), n);\n      } else t[T](function (t) {\n        i(t, n);\n      });\n    }var r = t(\"zrender/container/Group\"),\n        a = t(\"../util/component\"),\n        o = t(\"../util/clazz\");e[Ue] = { type: \"chart\", init: function init() {}, render: function render() {}, highlight: function highlight(t, e, i, r) {\n        n(t[ni](), r, b);\n      }, downplay: function downplay(t, e, i, r) {\n        n(t[ni](), r, D);\n      }, remove: function remove() {\n        this.group[ei]();\n      }, dispose: function dispose() {} };var s = e[Ue];return s.updateView = s[De] = s.updateVisual = function (t, e, i, n) {\n      this.render(t, e, i, n);\n    }, o.enableClassExtend(e), o.enableClassManagement(e, { registerWhenExtend: !0 }), e;\n  }), e($e, [ai], function () {\n    function t(t) {\n      return t = Math.round(t), 0 > t ? 0 : t > 255 ? 255 : t;\n    }function e(t) {\n      return t = Math.round(t), 0 > t ? 0 : t > 360 ? 360 : t;\n    }function i(t) {\n      return 0 > t ? 0 : t > 1 ? 1 : t;\n    }function n(e) {\n      return t(e[Ae] && \"%\" === e.charAt(e[Ae] - 1) ? parseFloat(e) / 100 * 255 : parseInt(e, 10));\n    }function r(t) {\n      return i(t[Ae] && \"%\" === t.charAt(t[Ae] - 1) ? parseFloat(t) / 100 : parseFloat(t));\n    }function a(t, e, i) {\n      return 0 > i ? i += 1 : i > 1 && (i -= 1), 1 > 6 * i ? t + (e - t) * i * 6 : 1 > 2 * i ? e : 2 > 3 * i ? t + (e - t) * (2 / 3 - i) * 6 : t;\n    }function o(t, e, i) {\n      return t + (e - t) * i;\n    }function s(t) {\n      if (t) {\n        t += \"\";var e = t[fe](/ /g, \"\")[Xe]();if (e in g) return g[e].slice();if (\"#\" !== e.charAt(0)) {\n          var i = e[se](\"(\"),\n              a = e[se](\")\");if (-1 !== i && a + 1 === e[Ae]) {\n            var o = e.substr(0, i),\n                s = e.substr(i + 1, a - (i + 1)).split(\",\"),\n                u = 1;switch (o) {case \"rgba\":\n                if (4 !== s[Ae]) return;u = r(s.pop());case \"rgb\":\n                if (3 !== s[Ae]) return;return [n(s[0]), n(s[1]), n(s[2]), u];case \"hsla\":\n                if (4 !== s[Ae]) return;return s[3] = r(s[3]), l(s);case \"hsl\":\n                if (3 !== s[Ae]) return;return l(s);default:\n                return;}\n          }\n        } else {\n          if (4 === e[Ae]) {\n            var c = parseInt(e.substr(1), 16);if (!(c >= 0 && 4095 >= c)) return;return [(3840 & c) >> 4 | (3840 & c) >> 8, 240 & c | (240 & c) >> 4, 15 & c | (15 & c) << 4, 1];\n          }if (7 === e[Ae]) {\n            var c = parseInt(e.substr(1), 16);if (!(c >= 0 && 16777215 >= c)) return;return [(16711680 & c) >> 16, (65280 & c) >> 8, 255 & c, 1];\n          }\n        }\n      }\n    }function l(e) {\n      var i = (parseFloat(e[0]) % 360 + 360) % 360 / 360,\n          n = r(e[1]),\n          o = r(e[2]),\n          s = .5 >= o ? o * (n + 1) : o + n - o * n,\n          l = 2 * o - s,\n          u = [t(255 * a(l, s, i + 1 / 3)), t(255 * a(l, s, i)), t(255 * a(l, s, i - 1 / 3))];return 4 === e[Ae] && (u[3] = e[3]), u;\n    }function u(t) {\n      if (t) {\n        var e,\n            i,\n            n = t[0] / 255,\n            r = t[1] / 255,\n            a = t[2] / 255,\n            o = Math.min(n, r, a),\n            s = Math.max(n, r, a),\n            l = s - o,\n            u = (s + o) / 2;if (0 === l) e = 0, i = 0;else {\n          i = .5 > u ? l / (s + o) : l / (2 - s - o);var c = ((s - n) / 6 + l / 2) / l,\n              h = ((s - r) / 6 + l / 2) / l,\n              f = ((s - a) / 6 + l / 2) / l;n === s ? e = f - h : r === s ? e = 1 / 3 + c - f : a === s && (e = 2 / 3 + h - c), 0 > e && (e += 1), e > 1 && (e -= 1);\n        }var d = [360 * e, i, u];return null != t[3] && d.push(t[3]), d;\n      }\n    }function c(t, e) {\n      var i = s(t);if (i) {\n        for (var n = 0; 3 > n; n++) {\n          i[n] = 0 > e ? i[n] * (1 - e) | 0 : (255 - i[n]) * e + i[n] | 0;\n        }return m(i, 4 === i[Ae] ? \"rgba\" : \"rgb\");\n      }\n    }function h(t) {\n      var e = s(t);return e ? ((1 << 24) + (e[0] << 16) + (e[1] << 8) + +e[2]).toString(16).slice(1) : void 0;\n    }function f(e, i, n) {\n      if (i && i[Ae] && e >= 0 && 1 >= e) {\n        n = n || [0, 0, 0, 0];var r = e * (i[Ae] - 1),\n            a = Math.floor(r),\n            s = Math.ceil(r),\n            l = i[a],\n            u = i[s],\n            c = r - a;return n[0] = t(o(l[0], u[0], c)), n[1] = t(o(l[1], u[1], c)), n[2] = t(o(l[2], u[2], c)), n[3] = t(o(l[3], u[3], c)), n;\n      }\n    }function d(e, n, r) {\n      if (n && n[Ae] && e >= 0 && 1 >= e) {\n        var a = e * (n[Ae] - 1),\n            l = Math.floor(a),\n            u = Math.ceil(a),\n            c = s(n[l]),\n            h = s(n[u]),\n            f = a - l,\n            d = m([t(o(c[0], h[0], f)), t(o(c[1], h[1], f)), t(o(c[2], h[2], f)), i(o(c[3], h[3], f))], \"rgba\");return r ? { color: d, leftIndex: l, rightIndex: u, value: a } : d;\n      }\n    }function p(t, i, n, a) {\n      return t = s(t), t ? (t = u(t), null != i && (t[0] = e(i)), null != n && (t[1] = r(n)), null != a && (t[2] = r(a)), m(l(t), \"rgba\")) : void 0;\n    }function v(t, e) {\n      return t = s(t), t && null != e ? (t[3] = i(e), m(t, \"rgba\")) : void 0;\n    }function m(t, e) {\n      var i = t[0] + \",\" + t[1] + \",\" + t[2];return (\"rgba\" === e || \"hsva\" === e || \"hsla\" === e) && (i += \",\" + t[3]), e + \"(\" + i + \")\";\n    }var g = { transparent: [0, 0, 0, 0], aliceblue: [240, 248, 255, 1], antiquewhite: [250, 235, 215, 1], aqua: [0, 255, 255, 1], aquamarine: [127, 255, 212, 1], azure: [240, 255, 255, 1], beige: [245, 245, 220, 1], bisque: [255, 228, 196, 1], black: [0, 0, 0, 1], blanchedalmond: [255, 235, 205, 1], blue: [0, 0, 255, 1], blueviolet: [138, 43, 226, 1], brown: [165, 42, 42, 1], burlywood: [222, 184, 135, 1], cadetblue: [95, 158, 160, 1], chartreuse: [127, 255, 0, 1], chocolate: [210, 105, 30, 1], coral: [255, 127, 80, 1], cornflowerblue: [100, 149, 237, 1], cornsilk: [255, 248, 220, 1], crimson: [220, 20, 60, 1], cyan: [0, 255, 255, 1], darkblue: [0, 0, 139, 1], darkcyan: [0, 139, 139, 1], darkgoldenrod: [184, 134, 11, 1], darkgray: [169, 169, 169, 1], darkgreen: [0, 100, 0, 1], darkgrey: [169, 169, 169, 1], darkkhaki: [189, 183, 107, 1], darkmagenta: [139, 0, 139, 1], darkolivegreen: [85, 107, 47, 1], darkorange: [255, 140, 0, 1], darkorchid: [153, 50, 204, 1], darkred: [139, 0, 0, 1], darksalmon: [233, 150, 122, 1], darkseagreen: [143, 188, 143, 1], darkslateblue: [72, 61, 139, 1], darkslategray: [47, 79, 79, 1], darkslategrey: [47, 79, 79, 1], darkturquoise: [0, 206, 209, 1], darkviolet: [148, 0, 211, 1], deeppink: [255, 20, 147, 1], deepskyblue: [0, 191, 255, 1], dimgray: [105, 105, 105, 1], dimgrey: [105, 105, 105, 1], dodgerblue: [30, 144, 255, 1], firebrick: [178, 34, 34, 1], floralwhite: [255, 250, 240, 1], forestgreen: [34, 139, 34, 1], fuchsia: [255, 0, 255, 1], gainsboro: [220, 220, 220, 1], ghostwhite: [248, 248, 255, 1], gold: [255, 215, 0, 1], goldenrod: [218, 165, 32, 1], gray: [128, 128, 128, 1], green: [0, 128, 0, 1], greenyellow: [173, 255, 47, 1], grey: [128, 128, 128, 1], honeydew: [240, 255, 240, 1], hotpink: [255, 105, 180, 1], indianred: [205, 92, 92, 1], indigo: [75, 0, 130, 1], ivory: [255, 255, 240, 1], khaki: [240, 230, 140, 1], lavender: [230, 230, 250, 1], lavenderblush: [255, 240, 245, 1], lawngreen: [124, 252, 0, 1], lemonchiffon: [255, 250, 205, 1], lightblue: [173, 216, 230, 1], lightcoral: [240, 128, 128, 1], lightcyan: [224, 255, 255, 1], lightgoldenrodyellow: [250, 250, 210, 1], lightgray: [211, 211, 211, 1], lightgreen: [144, 238, 144, 1], lightgrey: [211, 211, 211, 1], lightpink: [255, 182, 193, 1], lightsalmon: [255, 160, 122, 1], lightseagreen: [32, 178, 170, 1], lightskyblue: [135, 206, 250, 1], lightslategray: [119, 136, 153, 1], lightslategrey: [119, 136, 153, 1], lightsteelblue: [176, 196, 222, 1], lightyellow: [255, 255, 224, 1], lime: [0, 255, 0, 1], limegreen: [50, 205, 50, 1], linen: [250, 240, 230, 1], magenta: [255, 0, 255, 1], maroon: [128, 0, 0, 1], mediumaquamarine: [102, 205, 170, 1], mediumblue: [0, 0, 205, 1], mediumorchid: [186, 85, 211, 1], mediumpurple: [147, 112, 219, 1], mediumseagreen: [60, 179, 113, 1], mediumslateblue: [123, 104, 238, 1], mediumspringgreen: [0, 250, 154, 1], mediumturquoise: [72, 209, 204, 1], mediumvioletred: [199, 21, 133, 1], midnightblue: [25, 25, 112, 1], mintcream: [245, 255, 250, 1], mistyrose: [255, 228, 225, 1], moccasin: [255, 228, 181, 1], navajowhite: [255, 222, 173, 1], navy: [0, 0, 128, 1], oldlace: [253, 245, 230, 1], olive: [128, 128, 0, 1], olivedrab: [107, 142, 35, 1], orange: [255, 165, 0, 1], orangered: [255, 69, 0, 1], orchid: [218, 112, 214, 1], palegoldenrod: [238, 232, 170, 1], palegreen: [152, 251, 152, 1], paleturquoise: [175, 238, 238, 1], palevioletred: [219, 112, 147, 1], papayawhip: [255, 239, 213, 1], peachpuff: [255, 218, 185, 1], peru: [205, 133, 63, 1], pink: [255, 192, 203, 1], plum: [221, 160, 221, 1], powderblue: [176, 224, 230, 1], purple: [128, 0, 128, 1], red: [255, 0, 0, 1], rosybrown: [188, 143, 143, 1], royalblue: [65, 105, 225, 1], saddlebrown: [139, 69, 19, 1], salmon: [250, 128, 114, 1], sandybrown: [244, 164, 96, 1], seagreen: [46, 139, 87, 1], seashell: [255, 245, 238, 1], sienna: [160, 82, 45, 1], silver: [192, 192, 192, 1], skyblue: [135, 206, 235, 1], slateblue: [106, 90, 205, 1], slategray: [112, 128, 144, 1], slategrey: [112, 128, 144, 1], snow: [255, 250, 250, 1], springgreen: [0, 255, 127, 1], steelblue: [70, 130, 180, 1], tan: [210, 180, 140, 1], teal: [0, 128, 128, 1], thistle: [216, 191, 216, 1], tomato: [255, 99, 71, 1], turquoise: [64, 224, 208, 1], violet: [238, 130, 238, 1], wheat: [245, 222, 179, 1], white: [255, 255, 255, 1], whitesmoke: [245, 245, 245, 1], yellow: [255, 255, 0, 1], yellowgreen: [154, 205, 50, 1] };return { parse: s, lift: c, toHex: h, fastMapToColor: f, mapToColor: d, modifyHSL: p, modifyAlpha: v, stringify: m };\n  }), e(\"zrender/zrender\", [ai, \"./core/guid\", \"./core/env\", \"./Handler\", \"./Storage\", \"./animation/Animation\", \"./dom/HandlerProxy\", \"./Painter\"], function (t) {\n    function e(t) {\n      delete c[t];\n    }var i = t(\"./core/guid\"),\n        n = t(\"./core/env\"),\n        r = t(\"./Handler\"),\n        a = t(\"./Storage\"),\n        o = t(\"./animation/Animation\"),\n        s = t(\"./dom/HandlerProxy\"),\n        l = !n[Fe],\n        u = { canvas: t(\"./Painter\") },\n        c = {},\n        h = {};h.version = \"3.1.3\", h.init = function (t, e) {\n      var n = new f(i(), t, e);return c[n.id] = n, n;\n    }, h.dispose = function (t) {\n      if (t) t.dispose();else {\n        for (var e in c) {\n          c[e].dispose();\n        }c = {};\n      }return h;\n    }, h.getInstance = function (t) {\n      return c[t];\n    }, h.registerPainter = function (t, e) {\n      u[t] = e;\n    };var f = function f(t, e, i) {\n      i = i || {}, this.dom = e, this.id = t;var c = this,\n          h = new a(),\n          f = i.renderer;if (l) {\n        if (!u.vml) throw new Error(\"You need to require 'zrender/vml/vml' to support IE8\");f = \"vml\";\n      } else f && u[f] || (f = \"canvas\");var d = new u[f](e, h, i);this[Ve] = h, this.painter = d;var p = n.node ? null : new s(d.getViewportRoot());this.handler = new r(h, d, p), this[qe] = new o({ stage: { update: function update() {\n            c._needsRefresh && c.refreshImmediately(), c._needsRefreshHover && c.refreshHoverImmediately();\n          } } }), this[qe].start(), this._needsRefresh;var v = h.delFromMap,\n          m = h.addToMap;h.delFromMap = function (t) {\n        var e = h.get(t);v.call(h, t), e && e.removeSelfFromZr(c);\n      }, h.addToMap = function (t) {\n        m.call(h, t), t.addSelfToZr(c);\n      };\n    };return f[Ue] = { constructor: f, getId: function getId() {\n        return this.id;\n      }, add: function add(t) {\n        this[Ve].addRoot(t), this._needsRefresh = !0;\n      }, remove: function remove(t) {\n        this[Ve].delRoot(t), this._needsRefresh = !0;\n      }, configLayer: function configLayer(t, e) {\n        this.painter.configLayer(t, e), this._needsRefresh = !0;\n      }, refreshImmediately: function refreshImmediately() {\n        this._needsRefresh = !1, this.painter.refresh(), this._needsRefresh = !1;\n      }, refresh: function refresh() {\n        this._needsRefresh = !0;\n      }, addHover: function addHover(t, e) {\n        this.painter.addHover && (this.painter.addHover(t, e), this.refreshHover());\n      }, removeHover: function removeHover(t) {\n        this.painter.removeHover && (this.painter.removeHover(t), this.refreshHover());\n      }, clearHover: function clearHover() {\n        this.painter.clearHover && (this.painter.clearHover(), this.refreshHover());\n      }, refreshHover: function refreshHover() {\n        this._needsRefreshHover = !0;\n      }, refreshHoverImmediately: function refreshHoverImmediately() {\n        this._needsRefreshHover = !1, this.painter.refreshHover && this.painter.refreshHover();\n      }, resize: function resize() {\n        this.painter[We](), this.handler[We]();\n      }, clearAnimation: function clearAnimation() {\n        this[qe].clear();\n      }, getWidth: function getWidth() {\n        return this.painter[Ge]();\n      }, getHeight: function getHeight() {\n        return this.painter[He]();\n      }, pathToImage: function pathToImage(t, e, n) {\n        var r = i();return this.painter.pathToImage(r, t, e, n);\n      }, setCursorStyle: function setCursorStyle(t) {\n        this.handler.setCursorStyle(t);\n      }, on: function on(t, e, i) {\n        this.handler.on(t, e, i);\n      }, off: function off(t, e) {\n        this.handler.off(t, e);\n      }, trigger: function trigger(t, e) {\n        this.handler[Te](t, e);\n      }, clear: function clear() {\n        this[Ve].delRoot(), this.painter.clear();\n      }, dispose: function dispose() {\n        this[qe].stop(), this.clear(), this[Ve].dispose(), this.painter.dispose(), this.handler.dispose(), this[qe] = this[Ve] = this.painter = this.handler = null, e(this.id);\n      } }, h;\n  }), e(\"zrender/mixin/Eventful\", [ai], function () {\n    var t = Array[Ue].slice,\n        e = function e() {\n      this._$handlers = {};\n    };return e[Ue] = { constructor: e, one: function one(t, e, i) {\n        var n = this._$handlers;if (!e || !t) return this;n[t] || (n[t] = []);for (var r = 0; r < n[t][Ae]; r++) {\n          if (n[t][r].h === e) return this;\n        }return n[t].push({ h: e, one: !0, ctx: i || this }), this;\n      }, on: function on(t, e, i) {\n        var n = this._$handlers;if (!e || !t) return this;n[t] || (n[t] = []);for (var r = 0; r < n[t][Ae]; r++) {\n          if (n[t][r].h === e) return this;\n        }return n[t].push({ h: e, one: !1, ctx: i || this }), this;\n      }, isSilent: function isSilent(t) {\n        var e = this._$handlers;return e[t] && e[t][Ae];\n      }, off: function off(t, e) {\n        var i = this._$handlers;if (!t) return this._$handlers = {}, this;if (e) {\n          if (i[t]) {\n            for (var n = [], r = 0, a = i[t][Ae]; a > r; r++) {\n              i[t][r].h != e && n.push(i[t][r]);\n            }i[t] = n;\n          }i[t] && 0 === i[t][Ae] && delete i[t];\n        } else delete i[t];return this;\n      }, trigger: function trigger(e) {\n        if (this._$handlers[e]) {\n          var i = arguments,\n              n = i[Ae];n > 3 && (i = t.call(i, 1));for (var r = this._$handlers[e], a = r[Ae], o = 0; a > o;) {\n            switch (n) {case 1:\n                r[o].h.call(r[o].ctx);break;case 2:\n                r[o].h.call(r[o].ctx, i[1]);break;case 3:\n                r[o].h.call(r[o].ctx, i[1], i[2]);break;default:\n                r[o].h.apply(r[o].ctx, i);}r[o].one ? (r[Me](o, 1), a--) : o++;\n          }\n        }return this;\n      }, triggerWithContext: function triggerWithContext(e) {\n        if (this._$handlers[e]) {\n          var i = arguments,\n              n = i[Ae];n > 4 && (i = t.call(i, 1, i[Ae] - 1));for (var r = i[i[Ae] - 1], a = this._$handlers[e], o = a[Ae], s = 0; o > s;) {\n            switch (n) {case 1:\n                a[s].h.call(r);break;case 2:\n                a[s].h.call(r, i[1]);break;case 3:\n                a[s].h.call(r, i[1], i[2]);break;default:\n                a[s].h.apply(r, i);}a[s].one ? (a[Me](s, 1), o--) : s++;\n          }\n        }return this;\n      } }, e;\n  }), e(\"zrender/core/timsort\", [], function () {\n    function t(t) {\n      for (var e = 0; t >= l;) {\n        e |= 1 & t, t >>= 1;\n      }return t + e;\n    }function e(t, e, n, r) {\n      var a = e + 1;if (a === n) return 1;if (r(t[a++], t[e]) < 0) {\n        for (; n > a && r(t[a], t[a - 1]) < 0;) {\n          a++;\n        }i(t, e, a);\n      } else for (; n > a && r(t[a], t[a - 1]) >= 0;) {\n        a++;\n      }return a - e;\n    }function i(t, e, i) {\n      for (i--; i > e;) {\n        var n = t[e];t[e++] = t[i], t[i--] = n;\n      }\n    }function n(t, e, i, n, r) {\n      for (n === e && n++; i > n; n++) {\n        for (var a, o = t[n], s = e, l = n; l > s;) {\n          a = s + l >>> 1, r(o, t[a]) < 0 ? l = a : s = a + 1;\n        }var u = n - s;switch (u) {case 3:\n            t[s + 3] = t[s + 2];case 2:\n            t[s + 2] = t[s + 1];case 1:\n            t[s + 1] = t[s];break;default:\n            for (; u > 0;) {\n              t[s + u] = t[s + u - 1], u--;\n            }}t[s] = o;\n      }\n    }function r(t, e, i, n, r, a) {\n      var o = 0,\n          s = 0,\n          l = 1;if (a(t, e[i + r]) > 0) {\n        for (s = n - r; s > l && a(t, e[i + r + l]) > 0;) {\n          o = l, l = (l << 1) + 1, 0 >= l && (l = s);\n        }l > s && (l = s), o += r, l += r;\n      } else {\n        for (s = r + 1; s > l && a(t, e[i + r - l]) <= 0;) {\n          o = l, l = (l << 1) + 1, 0 >= l && (l = s);\n        }l > s && (l = s);var u = o;o = r - l, l = r - u;\n      }for (o++; l > o;) {\n        var c = o + (l - o >>> 1);a(t, e[i + c]) > 0 ? o = c + 1 : l = c;\n      }return l;\n    }function a(t, e, i, n, r, a) {\n      var o = 0,\n          s = 0,\n          l = 1;if (a(t, e[i + r]) < 0) {\n        for (s = r + 1; s > l && a(t, e[i + r - l]) < 0;) {\n          o = l, l = (l << 1) + 1, 0 >= l && (l = s);\n        }l > s && (l = s);var u = o;o = r - l, l = r - u;\n      } else {\n        for (s = n - r; s > l && a(t, e[i + r + l]) >= 0;) {\n          o = l, l = (l << 1) + 1, 0 >= l && (l = s);\n        }l > s && (l = s), o += r, l += r;\n      }for (o++; l > o;) {\n        var c = o + (l - o >>> 1);a(t, e[i + c]) < 0 ? l = c : o = c + 1;\n      }return l;\n    }function o(t, e) {\n      function i(t, e) {\n        f[y] = t, d[y] = e, y += 1;\n      }function n() {\n        for (; y > 1;) {\n          var t = y - 2;if (t >= 1 && d[t - 1] <= d[t] + d[t + 1] || t >= 2 && d[t - 2] <= d[t] + d[t - 1]) d[t - 1] < d[t + 1] && t--;else if (d[t] > d[t + 1]) break;s(t);\n        }\n      }function o() {\n        for (; y > 1;) {\n          var t = y - 2;t > 0 && d[t - 1] < d[t + 1] && t--, s(t);\n        }\n      }function s(i) {\n        var n = f[i],\n            o = d[i],\n            s = f[i + 1],\n            u = d[i + 1];d[i] = o + u, i === y - 3 && (f[i + 1] = f[i + 2], d[i + 1] = d[i + 2]), y--;var c = a(t[s], t, n, o, 0, e);n += c, o -= c, 0 !== o && (u = r(t[n + o - 1], t, s, u, u - 1, e), 0 !== u && (u >= o ? l(n, o, s, u) : h(n, o, s, u)));\n      }function l(i, n, o, s) {\n        var l = 0;for (l = 0; n > l; l++) {\n          x[l] = t[i + l];\n        }var c = 0,\n            h = o,\n            f = i;if (t[f++] = t[h++], 0 !== --s) {\n          if (1 === n) {\n            for (l = 0; s > l; l++) {\n              t[f + l] = t[h + l];\n            }return void (t[f + s] = x[c]);\n          }for (var d, v, m, g = p;;) {\n            d = 0, v = 0, m = !1;do {\n              if (e(t[h], x[c]) < 0) {\n                if (t[f++] = t[h++], v++, d = 0, 0 === --s) {\n                  m = !0;break;\n                }\n              } else if (t[f++] = x[c++], d++, v = 0, 1 === --n) {\n                m = !0;break;\n              }\n            } while (g > (d | v));if (m) break;do {\n              if (d = a(t[h], x, c, n, 0, e), 0 !== d) {\n                for (l = 0; d > l; l++) {\n                  t[f + l] = x[c + l];\n                }if (f += d, c += d, n -= d, 1 >= n) {\n                  m = !0;break;\n                }\n              }if (t[f++] = t[h++], 0 === --s) {\n                m = !0;break;\n              }if (v = r(x[c], t, h, s, 0, e), 0 !== v) {\n                for (l = 0; v > l; l++) {\n                  t[f + l] = t[h + l];\n                }if (f += v, h += v, s -= v, 0 === s) {\n                  m = !0;break;\n                }\n              }if (t[f++] = x[c++], 1 === --n) {\n                m = !0;break;\n              }g--;\n            } while (d >= u || v >= u);if (m) break;0 > g && (g = 0), g += 2;\n          }if (p = g, 1 > p && (p = 1), 1 === n) {\n            for (l = 0; s > l; l++) {\n              t[f + l] = t[h + l];\n            }t[f + s] = x[c];\n          } else {\n            if (0 === n) throw new Error();for (l = 0; n > l; l++) {\n              t[f + l] = x[c + l];\n            }\n          }\n        } else for (l = 0; n > l; l++) {\n          t[f + l] = x[c + l];\n        }\n      }function h(i, n, o, s) {\n        var l = 0;for (l = 0; s > l; l++) {\n          x[l] = t[o + l];\n        }var c = i + n - 1,\n            h = s - 1,\n            f = o + s - 1,\n            d = 0,\n            v = 0;if (t[f--] = t[c--], 0 !== --n) {\n          if (1 === s) {\n            for (f -= n, c -= n, v = f + 1, d = c + 1, l = n - 1; l >= 0; l--) {\n              t[v + l] = t[d + l];\n            }return void (t[f] = x[h]);\n          }for (var m = p;;) {\n            var g = 0,\n                y = 0,\n                _ = !1;do {\n              if (e(x[h], t[c]) < 0) {\n                if (t[f--] = t[c--], g++, y = 0, 0 === --n) {\n                  _ = !0;break;\n                }\n              } else if (t[f--] = x[h--], y++, g = 0, 1 === --s) {\n                _ = !0;break;\n              }\n            } while (m > (g | y));if (_) break;do {\n              if (g = n - a(x[h], t, i, n, n - 1, e), 0 !== g) {\n                for (f -= g, c -= g, n -= g, v = f + 1, d = c + 1, l = g - 1; l >= 0; l--) {\n                  t[v + l] = t[d + l];\n                }if (0 === n) {\n                  _ = !0;break;\n                }\n              }if (t[f--] = x[h--], 1 === --s) {\n                _ = !0;break;\n              }if (y = s - r(t[c], x, 0, s, s - 1, e), 0 !== y) {\n                for (f -= y, h -= y, s -= y, v = f + 1, d = h + 1, l = 0; y > l; l++) {\n                  t[v + l] = x[d + l];\n                }if (1 >= s) {\n                  _ = !0;break;\n                }\n              }if (t[f--] = t[c--], 0 === --n) {\n                _ = !0;break;\n              }m--;\n            } while (g >= u || y >= u);if (_) break;0 > m && (m = 0), m += 2;\n          }if (p = m, 1 > p && (p = 1), 1 === s) {\n            for (f -= n, c -= n, v = f + 1, d = c + 1, l = n - 1; l >= 0; l--) {\n              t[v + l] = t[d + l];\n            }t[f] = x[h];\n          } else {\n            if (0 === s) throw new Error();for (d = f - (s - 1), l = 0; s > l; l++) {\n              t[d + l] = x[l];\n            }\n          }\n        } else for (d = f - (s - 1), l = 0; s > l; l++) {\n          t[d + l] = x[l];\n        }\n      }var f,\n          d,\n          p = u,\n          v = 0,\n          m = c,\n          g = 0,\n          y = 0;v = t[Ae], 2 * c > v && (m = v >>> 1);var x = [];g = 120 > v ? 5 : 1542 > v ? 10 : 119151 > v ? 19 : 40, f = [], d = [], this.mergeRuns = n, this.forceMergeRuns = o, this.pushRun = i;\n    }function s(i, r, a, s) {\n      a || (a = 0), s || (s = i[Ae]);var u = s - a;if (!(2 > u)) {\n        var c = 0;if (l > u) return c = e(i, a, s, r), void n(i, a, s, a + c, r);var h = new o(i, r),\n            f = t(u);do {\n          if (c = e(i, a, s, r), f > c) {\n            var d = u;d > f && (d = f), n(i, a, a + d, a + c, r), c = d;\n          }h.pushRun(a, c), h.mergeRuns(), u -= c, a += c;\n        } while (0 !== u);h.forceMergeRuns();\n      }\n    }var l = 32,\n        u = 7,\n        c = 256;return s;\n  }), e(\"echarts/visual/seriesColor\", [ai, \"zrender/graphic/Gradient\"], function (t) {\n    var e = t(\"zrender/graphic/Gradient\");return function (t) {\n      function i(i) {\n        var n = (i.visualColorAccessPath || \"itemStyle.normal.color\").split(\".\"),\n            r = i[ni](),\n            a = i.get(n) || i.getColorFromPalette(i.get(\"name\"));r.setVisual(\"color\", a), t.isSeriesFiltered(i) || ((typeof a === \"undefined\" ? \"undefined\" : _typeof(a)) !== ce || a instanceof e || r.each(function (t) {\n          r.setItemVisual(t, \"color\", a(i[me](t)));\n        }), r.each(function (t) {\n          var e = r[L](t),\n              i = e.get(n, !0);null != i && r.setItemVisual(t, \"color\", i);\n        }));\n      }t.eachRawSeries(i);\n    };\n  }), e(\"echarts/preprocessor/backwardCompat\", [ai, ri, \"./helper/compatStyle\"], function (t) {\n    function e(t, e) {\n      e = e.split(\",\");for (var i = t, n = 0; n < e[Ae] && (i = i && i[e[n]], null != i); n++) {}return i;\n    }function i(t, e, i, n) {\n      e = e.split(\",\");for (var r, a = t, o = 0; o < e[Ae] - 1; o++) {\n        r = e[o], null == a[r] && (a[r] = {}), a = a[r];\n      }(n || null == a[e[o]]) && (a[e[o]] = i);\n    }function n(t) {\n      u(o, function (e) {\n        e[0] in t && !(e[1] in t) && (t[e[1]] = t[e[0]]);\n      });\n    }var r = t(ri),\n        a = t(\"./helper/compatStyle\"),\n        o = [[\"x\", \"left\"], [\"y\", \"top\"], [\"x2\", \"right\"], [\"y2\", Ee]],\n        s = [\"grid\", \"geo\", \"parallel\", \"legend\", \"toolbox\", \"title\", \"visualMap\", \"dataZoom\", \"timeline\"],\n        l = [\"bar\", \"boxplot\", \"candlestick\", \"chord\", \"effectScatter\", \"funnel\", \"gauge\", \"lines\", \"graph\", \"heatmap\", \"line\", \"map\", \"parallel\", \"pie\", \"radar\", \"sankey\", \"scatter\", \"treemap\"],\n        u = r.each;return function (t) {\n      u(t[Se], function (t) {\n        if (r[Pe](t)) {\n          var o = t.type;if (a(t), (\"pie\" === o || \"gauge\" === o) && null != t.clockWise && (t.clockwise = t.clockWise), \"gauge\" === o) {\n            var s = e(t, \"pointer.color\");null != s && i(t, \"itemStyle.normal.color\", s);\n          }for (var u = 0; u < l[Ae]; u++) {\n            if (l[u] === t.type) {\n              n(t);break;\n            }\n          }\n        }\n      }), t.dataRange && (t.visualMap = t.dataRange), u(s, function (e) {\n        var i = t[e];i && (r[he](i) || (i = [i]), u(i, function (t) {\n          n(t);\n        }));\n      });\n    };\n  }), e(\"echarts/loading/default\", [ai, \"../util/graphic\", ri], function (t) {\n    var e = t(\"../util/graphic\"),\n        i = t(ri),\n        n = Math.PI;return function (t, r) {\n      r = r || {}, i[Je](r, { text: \"loading\", color: \"#c23531\", textColor: \"#000\", maskColor: \"rgba(255, 255, 255, 0.8)\", zlevel: 0 });var a = new e.Rect({ style: { fill: r.maskColor }, zlevel: r[de], z: 1e4 }),\n          o = new e.Arc({ shape: { startAngle: -n / 2, endAngle: -n / 2 + .1, r: 10 }, style: { stroke: r.color, lineCap: \"round\", lineWidth: 5 }, zlevel: r[de], z: 10001 }),\n          s = new e.Rect({ style: { fill: \"none\", text: r.text, textPosition: \"right\", textDistance: 10, textFill: r.textColor }, zlevel: r[de], z: 10001 });o.animateShape(!0).when(1e3, { endAngle: 3 * n / 2 }).start(\"circularInOut\"), o.animateShape(!0).when(1e3, { startAngle: 3 * n / 2 }).delay(300).start(\"circularInOut\");var l = new e.Group();return l.add(o), l.add(s), l.add(a), l[We] = function () {\n        var e = t[Ge]() / 2,\n            i = t[He]() / 2;o[M]({ cx: e, cy: i });var n = o.shape.r;s[M]({ x: e - n, y: i - n, width: 2 * n, height: 2 * n }), a[M]({ x: 0, y: 0, width: t[Ge](), height: t[He]() });\n      }, l[We](), l;\n    };\n  }), e(\"echarts/model/Model\", [ai, ri, \"../util/clazz\", \"./mixin/lineStyle\", \"./mixin/areaStyle\", \"./mixin/textStyle\", \"./mixin/itemStyle\"], function (t) {\n    function e(t, e, i) {\n      this.parentModel = e, this[s] = i, this[d] = t;\n    }var i = t(ri),\n        n = t(\"../util/clazz\");e[Ue] = { constructor: e, init: null, mergeOption: function mergeOption(t) {\n        i.merge(this[d], t, !0);\n      }, get: function get(t, e) {\n        if (!t) return this[d];(typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === je && (t = t.split(\".\"));for (var i = this[d], n = this.parentModel, r = 0; r < t[Ae] && (!t[r] || (i = i && \"object\" == (typeof i === \"undefined\" ? \"undefined\" : _typeof(i)) ? i[t[r]] : null, null != i)); r++) {}return null == i && n && !e && (i = n.get(t)), i;\n      }, getShallow: function getShallow(t, e) {\n        var i = this[d],\n            n = null == i ? i : i[t],\n            r = this.parentModel;return null == n && r && !e && (n = r[g](t)), n;\n      }, getModel: function getModel(t, i) {\n        var n = this.get(t, !0),\n            r = this.parentModel,\n            a = new e(n, i || r && r[Ze](t), this[s]);return a;\n      }, isEmpty: function isEmpty() {\n        return null == this[d];\n      }, restoreData: function restoreData() {}, clone: function clone() {\n        var t = this.constructor;return new t(i.clone(this[d]));\n      }, setReadOnly: function setReadOnly(t) {\n        n.setReadOnly(this, t);\n      } }, n.enableClassExtend(e);var r = i.mixin;return r(e, t(\"./mixin/lineStyle\")), r(e, t(\"./mixin/areaStyle\")), r(e, t(\"./mixin/textStyle\")), r(e, t(\"./mixin/itemStyle\")), e;\n  }), e(\"echarts/data/List\", [ai, \"../model/Model\", \"./DataDiffer\", ri, \"../util/model\"], function (t) {\n    function e(t) {\n      return p[he](t) || (t = [t]), t;\n    }function i(t, e) {\n      var i = t[B],\n          n = new x(p.map(i, t.getDimensionInfo, t), t.hostModel);y(n, t);for (var r = n._storage = {}, a = t._storage, o = 0; o < i[Ae]; o++) {\n        var s = i[o],\n            l = a[s];r[s] = p[se](e, s) >= 0 ? new l.constructor(a[s][Ae]) : a[s];\n      }return n;\n    }var n = l,\n        r = (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === l ? global : window,\n        a = _typeof(r.Float64Array) === n ? Array : r.Float64Array,\n        u = _typeof(r.Int32Array) === n ? Array : r.Int32Array,\n        c = { \"float\": a, \"int\": u, ordinal: Array, number: Array, time: Array },\n        f = t(\"../model/Model\"),\n        d = t(\"./DataDiffer\"),\n        p = t(ri),\n        v = t(\"../util/model\"),\n        m = p[Pe],\n        g = [\"stackedOn\", o, \"_nameList\", \"_idList\", \"_rawData\"],\n        y = function y(t, e) {\n      p.each(g[U](e.__wrappedMethods || []), function (i) {\n        e.hasOwnProperty(i) && (t[i] = e[i]);\n      }), t.__wrappedMethods = e.__wrappedMethods;\n    },\n        x = function x(t, e) {\n      t = t || [\"x\", \"y\"];for (var i = {}, n = [], r = 0; r < t[Ae]; r++) {\n        var a,\n            o = {};_typeof(t[r]) === je ? (a = t[r], o = { name: a, stackable: !1, type: \"number\" }) : (o = t[r], a = o.name, o.type = o.type || ue), n.push(a), i[a] = o;\n      }this[B] = n, this._dimensionInfos = i, this.hostModel = e, this.dataType, this.indices = [], this._storage = {}, this._nameList = [], this._idList = [], this._optionModels = [], this.stackedOn = null, this._visual = {}, this._layout = {}, this._itemVisuals = [], this._itemLayouts = [], this._graphicEls = [], this._rawData, this._extent;\n    },\n        _ = x[Ue];_.type = \"list\", _[o] = !0, _.getDimension = function (t) {\n      return isNaN(t) || (t = this[B][t] || t), t;\n    }, _.getDimensionInfo = function (t) {\n      return p.clone(this._dimensionInfos[this.getDimension(t)]);\n    }, _.initData = function (t, e, i) {\n      t = t || [], this._rawData = t;var n = this._storage = {},\n          r = this.indices = [],\n          a = this[B],\n          s = t[Ae],\n          l = this._dimensionInfos,\n          u = [],\n          h = {};e = e || [];for (var f = 0; f < a[Ae]; f++) {\n        var d = l[a[f]],\n            p = c[d.type];n[a[f]] = new p(s);\n      }var m = this;i || (m[o] = !1), i = i || function (t, e, i, n) {\n        var r = v.getDataItemValue(t);return v.isDataItemOption(t) && (m[o] = !0), v.converDataValue(r instanceof Array ? r[n] : r, l[e]);\n      };for (var g = 0; g < t[Ae]; g++) {\n        for (var y = t[g], x = 0; x < a[Ae]; x++) {\n          var _ = a[x],\n              b = n[_];b[g] = i(y, _, g, x);\n        }r.push(g);\n      }for (var f = 0; f < t[Ae]; f++) {\n        e[f] || t[f] && null != t[f].name && (e[f] = t[f].name);var w = e[f] || \"\",\n            M = t[f] && t[f].id;!M && w && (h[w] = h[w] || 0, M = w, h[w] > 0 && (M += \"__ec__\" + h[w]), h[w]++), M && (u[f] = M);\n      }this._nameList = e, this._idList = u;\n    }, _.count = function () {\n      return this.indices[Ae];\n    }, _.get = function (t, e, i) {\n      var n = this._storage,\n          r = this.indices[e];if (null == r) return 0 / 0;var a = n[t] && n[t][r];if (i) {\n        var o = this._dimensionInfos[t];if (o && o.stackable) for (var s = this.stackedOn; s;) {\n          var l = s.get(t, e);(a >= 0 && l > 0 || 0 >= a && 0 > l) && (a += l), s = s.stackedOn;\n        }\n      }return a;\n    }, _.getValues = function (t, e, i) {\n      var n = [];p[he](t) || (i = e, e = t, t = this[B]);for (var r = 0, a = t[Ae]; a > r; r++) {\n        n.push(this.get(t[r], e, i));\n      }return n;\n    }, _.hasValue = function (t) {\n      for (var e = this[B], i = this._dimensionInfos, n = 0, r = e[Ae]; r > n; n++) {\n        if (i[e[n]].type !== G && isNaN(this.get(e[n], t))) return !1;\n      }return !0;\n    }, _.getDataExtent = function (t, e) {\n      t = this.getDimension(t);var i = this._storage[t],\n          n = this.getDimensionInfo(t);e = n && n.stackable && e;var r,\n          a = (this._extent || (this._extent = {}))[t + !!e];if (a) return a;if (i) {\n        for (var o = 1 / 0, s = -1 / 0, l = 0, u = this.count(); u > l; l++) {\n          r = this.get(t, l, e), o > r && (o = r), r > s && (s = r);\n        }return this._extent[t + !!e] = [o, s];\n      }return [1 / 0, -1 / 0];\n    }, _.getSum = function (t, e) {\n      var i = this._storage[t],\n          n = 0;if (i) for (var r = 0, a = this.count(); a > r; r++) {\n        var o = this.get(t, r, e);isNaN(o) || (n += o);\n      }return n;\n    }, _[se] = function (t, e) {\n      var i = this._storage,\n          n = i[t],\n          r = this.indices;if (n) for (var a = 0, o = r[Ae]; o > a; a++) {\n        var s = r[a];if (n[s] === e) return a;\n      }return -1;\n    }, _.indexOfName = function (t) {\n      for (var e = this.indices, i = this._nameList, n = 0, r = e[Ae]; r > n; n++) {\n        var a = e[n];if (i[a] === t) return n;\n      }return -1;\n    }, _.indexOfRawIndex = function (t) {\n      for (var e = this.indices, i = 0, n = e[Ae] - 1; n >= i;) {\n        var r = (i + n) / 2 | 0;if (e[r] < t) i = r + 1;else {\n          if (!(e[r] > t)) return r;n = r - 1;\n        }\n      }return -1;\n    }, _.indexOfNearest = function (t, e, i, n) {\n      var r = this._storage,\n          a = r[t];null == n && (n = 1 / 0);var o = -1;if (a) for (var s = Number.MAX_VALUE, l = 0, u = this.count(); u > l; l++) {\n        var c = e - this.get(t, l, i),\n            h = Math.abs(c);n >= c && (s > h || h === s && c > 0) && (s = h, o = l);\n      }return o;\n    }, _.getRawIndex = function (t) {\n      var e = this.indices[t];return null == e ? -1 : e;\n    }, _.getRawDataItem = function (t) {\n      return this._rawData[this.getRawIndex(t)];\n    }, _[h] = function (t) {\n      return this._nameList[this.indices[t]] || \"\";\n    }, _.getId = function (t) {\n      return this._idList[this.indices[t]] || this.getRawIndex(t) + \"\";\n    }, _.each = function (t, i, n, r) {\n      (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === ce && (r = n, n = i, i = t, t = []), t = p.map(e(t), this.getDimension, this);var a = [],\n          o = t[Ae],\n          s = this.indices;r = r || this;for (var l = 0; l < s[Ae]; l++) {\n        switch (o) {case 0:\n            i.call(r, l);break;case 1:\n            i.call(r, this.get(t[0], l, n), l);break;case 2:\n            i.call(r, this.get(t[0], l, n), this.get(t[1], l, n), l);break;default:\n            for (var u = 0; o > u; u++) {\n              a[u] = this.get(t[u], l, n);\n            }a[u] = l, i.apply(r, a);}\n      }\n    }, _.filterSelf = function (t, i, n, r) {\n      (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === ce && (r = n, n = i, i = t, t = []), t = p.map(e(t), this.getDimension, this);var a = [],\n          o = [],\n          s = t[Ae],\n          l = this.indices;r = r || this;for (var u = 0; u < l[Ae]; u++) {\n        var c;if (1 === s) c = i.call(r, this.get(t[0], u, n), u);else {\n          for (var h = 0; s > h; h++) {\n            o[h] = this.get(t[h], u, n);\n          }o[h] = u, c = i.apply(r, o);\n        }c && a.push(l[u]);\n      }return this.indices = a, this._extent = {}, this;\n    }, _.mapArray = function (t, e, i, n) {\n      (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === ce && (n = i, i = e, e = t, t = []);var r = [];return this.each(t, function () {\n        r.push(e && e.apply(this, arguments));\n      }, i, n), r;\n    }, _.map = function (t, n, r, a) {\n      t = p.map(e(t), this.getDimension, this);var o = i(this, t),\n          s = o.indices = this.indices,\n          l = o._storage,\n          u = [];return this.each(t, function () {\n        var e = arguments[arguments[Ae] - 1],\n            i = n && n.apply(this, arguments);if (null != i) {\n          (typeof i === \"undefined\" ? \"undefined\" : _typeof(i)) === ue && (u[0] = i, i = u);for (var r = 0; r < i[Ae]; r++) {\n            var a = t[r],\n                o = l[a],\n                c = s[e];o && (o[c] = i[r]);\n          }\n        }\n      }, r, a), o;\n    }, _.downSample = function (t, e, n, r) {\n      for (var a = i(this, [t]), o = this._storage, s = a._storage, l = this.indices, u = a.indices = [], c = [], h = [], f = Math.floor(1 / e), d = s[t], p = this.count(), v = 0; v < o[t][Ae]; v++) {\n        s[t][v] = o[t][v];\n      }for (var v = 0; p > v; v += f) {\n        f > p - v && (f = p - v, c[Ae] = f);for (var m = 0; f > m; m++) {\n          var g = l[v + m];c[m] = d[g], h[m] = g;\n        }var y = n(c),\n            g = h[r(c, y) || 0];d[g] = y, u.push(g);\n      }return a;\n    }, _[L] = function (t) {\n      var e = this.hostModel;return t = this.indices[t], new f(this._rawData[t], e, e && e[s]);\n    }, _.diff = function (t) {\n      var e = this._idList,\n          i = t && t._idList;return new d(t ? t.indices : [], this.indices, function (t) {\n        return i[t] || t + \"\";\n      }, function (t) {\n        return e[t] || t + \"\";\n      });\n    }, _.getVisual = function (t) {\n      var e = this._visual;return e && e[t];\n    }, _.setVisual = function (t, e) {\n      if (m(t)) for (var i in t) {\n        t.hasOwnProperty(i) && this.setVisual(i, t[i]);\n      } else this._visual = this._visual || {}, this._visual[t] = e;\n    }, _.setLayout = function (t, e) {\n      if (m(t)) for (var i in t) {\n        t.hasOwnProperty(i) && this.setLayout(i, t[i]);\n      } else this._layout[t] = e;\n    }, _.getLayout = function (t) {\n      return this._layout[t];\n    }, _[P] = function (t) {\n      return this._itemLayouts[t];\n    }, _.setItemLayout = function (t, e, i) {\n      this._itemLayouts[t] = i ? p[ke](this._itemLayouts[t] || {}, e) : e;\n    }, _.clearItemLayouts = function () {\n      this._itemLayouts[Ae] = 0;\n    }, _[S] = function (t, e, i) {\n      var n = this._itemVisuals[t],\n          r = n && n[e];return null != r || i ? r : this.getVisual(e);\n    }, _.setItemVisual = function (t, e, i) {\n      var n = this._itemVisuals[t] || {};if (this._itemVisuals[t] = n, m(e)) for (var r in e) {\n        e.hasOwnProperty(r) && (n[r] = e[r]);\n      } else n[e] = i;\n    }, _.clearAllVisual = function () {\n      this._visual = {}, this._itemVisuals = [];\n    };var b = function b(t) {\n      t[ge] = this[ge], t[ye] = this[ye], t.dataType = this.dataType;\n    };return _[C] = function (t, e) {\n      var i = this.hostModel;e && (e[ye] = t, e.dataType = this.dataType, e[ge] = i && i[ge], \"group\" === e.type && e[ve](b, e)), this._graphicEls[t] = e;\n    }, _[A] = function (t) {\n      return this._graphicEls[t];\n    }, _[T] = function (t, e) {\n      p.each(this._graphicEls, function (i, n) {\n        i && t && t.call(e, i, n);\n      });\n    }, _.cloneShallow = function () {\n      var t = p.map(this[B], this.getDimensionInfo, this),\n          e = new x(t, this.hostModel);return e._storage = this._storage, y(e, this), e.indices = this.indices.slice(), this._extent && (e._extent = p[ke]({}, this._extent)), e;\n    }, _.wrapMethod = function (t, e) {\n      var i = this[t];(typeof i === \"undefined\" ? \"undefined\" : _typeof(i)) === ce && (this.__wrappedMethods = this.__wrappedMethods || [], this.__wrappedMethods.push(t), this[t] = function () {\n        var t = i.apply(this, arguments);return e.apply(this, [t][U](p.slice(arguments)));\n      });\n    }, _.TRANSFERABLE_METHODS = [\"cloneShallow\", \"downSample\", \"map\"], _.CHANGABLE_METHODS = [\"filterSelf\"], x;\n  }), e(\"echarts/util/format\", [ai, ri, \"./number\", \"zrender/contain/text\"], function (t) {\n    var e = t(ri),\n        i = t(\"./number\"),\n        n = t(\"zrender/contain/text\"),\n        r = {};r.addCommas = function (t) {\n      return isNaN(t) ? \"-\" : (t = (t + \"\").split(\".\"), t[0][fe](/(\\d{1,3})(?=(?:\\d{3})+(?!\\d))/g, \"$1,\") + (t[Ae] > 1 ? \".\" + t[1] : \"\"));\n    }, r.toCamelCase = function (t) {\n      return t[Xe]()[fe](/-(.)/g, function (t, e) {\n        return e.toUpperCase();\n      });\n    }, r.normalizeCssArray = function (t) {\n      var e = t[Ae];return (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === ue ? [t, t, t, t] : 2 === e ? [t[0], t[1], t[0], t[1]] : 3 === e ? [t[0], t[1], t[2], t[1]] : t;\n    }, r.encodeHTML = function (t) {\n      return String(t)[fe](/&/g, \"&amp;\")[fe](/</g, \"&lt;\")[fe](/>/g, \"&gt;\")[fe](/\"/g, \"&quot;\")[fe](/'/g, \"&#39;\");\n    };var a = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"],\n        o = function o(t, e) {\n      return \"{\" + t + (null == e ? \"\" : e) + \"}\";\n    };r.formatTpl = function (t, i) {\n      e[he](i) || (i = [i]);var n = i[Ae];if (!n) return \"\";for (var r = i[0].$vars || [], s = 0; s < r[Ae]; s++) {\n        var l = a[s];t = t[fe](o(l), o(l, 0));\n      }for (var u = 0; n > u; u++) {\n        for (var c = 0; c < r[Ae]; c++) {\n          t = t[fe](o(a[c], u), i[u][r[c]]);\n        }\n      }return t;\n    };var s = function s(t) {\n      return 10 > t ? \"0\" + t : t;\n    };return r.formatTime = function (t, e) {\n      (\"week\" === t || \"month\" === t || \"quarter\" === t || \"half-year\" === t || \"year\" === t) && (t = \"MM-dd\\nyyyy\");var n = i.parseDate(e),\n          r = n.getFullYear(),\n          a = n.getMonth() + 1,\n          o = n.getDate(),\n          l = n.getHours(),\n          u = n.getMinutes(),\n          c = n.getSeconds();return t = t[fe](\"MM\", s(a))[Xe]()[fe](\"yyyy\", r)[fe](\"yy\", r % 100)[fe](\"dd\", s(o))[fe](\"d\", o)[fe](\"hh\", s(l))[fe](\"h\", l)[fe](\"mm\", s(u))[fe](\"m\", u)[fe](\"ss\", s(c))[fe](\"s\", c);\n    }, r.capitalFirst = function (t) {\n      return t ? t.charAt(0).toUpperCase() + t.substr(1) : t;\n    }, r.truncateText = n.truncateText, r;\n  }), e(\"echarts/util/number\", [ai], function () {\n    function t(t) {\n      return t[fe](/^\\s+/, \"\")[fe](/\\s+$/, \"\");\n    }var e = {},\n        i = 1e-4;return e.linearMap = function (t, e, i, n) {\n      var r = e[1] - e[0],\n          a = i[1] - i[0];if (0 === r) return 0 === a ? i[0] : (i[0] + i[1]) / 2;if (n) {\n        if (r > 0) {\n          if (t <= e[0]) return i[0];if (t >= e[1]) return i[1];\n        } else {\n          if (t >= e[0]) return i[0];if (t <= e[1]) return i[1];\n        }\n      } else {\n        if (t === e[0]) return i[0];if (t === e[1]) return i[1];\n      }return (t - e[0]) / r * a + i[0];\n    }, e[R] = function (e, i) {\n      switch (e) {case J:case te:\n          e = \"50%\";break;case \"left\":case \"top\":\n          e = \"0%\";break;case \"right\":case Ee:\n          e = \"100%\";}return (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) === je ? t(e).match(/%$/) ? parseFloat(e) / 100 * i : parseFloat(e) : null == e ? 0 / 0 : +e;\n    }, e.round = function (t, e) {\n      return null == e && (e = 10), +(+t)[f](e);\n    }, e.asc = function (t) {\n      return t.sort(function (t, e) {\n        return t - e;\n      }), t;\n    }, e.getPrecision = function (t) {\n      if (t = +t, isNaN(t)) return 0;for (var e = 1, i = 0; Math.round(t * e) / e !== t;) {\n        e *= 10, i++;\n      }return i;\n    }, e.getPrecisionSafe = function (t) {\n      var e = t.toString(),\n          i = e[se](\".\");return 0 > i ? 0 : e[Ae] - 1 - i;\n    }, e.getPixelPrecision = function (t, e) {\n      var i = Math.log,\n          n = Math.LN10,\n          r = Math.floor(i(t[1] - t[0]) / n),\n          a = Math.round(i(Math.abs(e[1] - e[0])) / n);return Math.max(-r + a, 0);\n    }, e.MAX_SAFE_INTEGER = 9007199254740991, e.remRadian = function (t) {\n      var e = 2 * Math.PI;return (t % e + e) % e;\n    }, e.isRadianAroundZero = function (t) {\n      return t > -i && i > t;\n    }, e.parseDate = function (t) {\n      if (t instanceof Date) return t;if ((typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === je) {\n        var e = new Date(t);return isNaN(+e) && (e = new Date(new Date(t[fe](/-/g, \"/\")) - new Date(\"1970/01/01\"))), e;\n      }return new Date(Math.round(t));\n    }, e.quantity = function (t) {\n      return Math.pow(10, Math.floor(Math.log(t) / Math.LN10));\n    }, e.nice = function (t, i) {\n      var n,\n          r = e.quantity(t),\n          a = t / r;return n = i ? 1.5 > a ? 1 : 2.5 > a ? 2 : 4 > a ? 3 : 7 > a ? 5 : 10 : 1 > a ? 1 : 2 > a ? 2 : 3 > a ? 3 : 5 > a ? 5 : 10, n * r;\n    }, e;\n  }), e(\"zrender/core/matrix\", [], function () {\n    var t = (typeof Float32Array === \"undefined\" ? \"undefined\" : _typeof(Float32Array)) === l ? Array : Float32Array,\n        e = { create: function create() {\n        var i = new t(6);return e.identity(i), i;\n      }, identity: function identity(t) {\n        return t[0] = 1, t[1] = 0, t[2] = 0, t[3] = 1, t[4] = 0, t[5] = 0, t;\n      }, copy: function copy(t, e) {\n        return t[0] = e[0], t[1] = e[1], t[2] = e[2], t[3] = e[3], t[4] = e[4], t[5] = e[5], t;\n      }, mul: function mul(t, e, i) {\n        var n = e[0] * i[0] + e[2] * i[1],\n            r = e[1] * i[0] + e[3] * i[1],\n            a = e[0] * i[2] + e[2] * i[3],\n            o = e[1] * i[2] + e[3] * i[3],\n            s = e[0] * i[4] + e[2] * i[5] + e[4],\n            l = e[1] * i[4] + e[3] * i[5] + e[5];return t[0] = n, t[1] = r, t[2] = a, t[3] = o, t[4] = s, t[5] = l, t;\n      }, translate: function translate(t, e, i) {\n        return t[0] = e[0], t[1] = e[1], t[2] = e[2], t[3] = e[3], t[4] = e[4] + i[0], t[5] = e[5] + i[1], t;\n      }, rotate: function rotate(t, e, i) {\n        var n = e[0],\n            r = e[2],\n            a = e[4],\n            o = e[1],\n            s = e[3],\n            l = e[5],\n            u = Math.sin(i),\n            c = Math.cos(i);return t[0] = n * c + o * u, t[1] = -n * u + o * c, t[2] = r * c + s * u, t[3] = -r * u + c * s, t[4] = c * a + u * l, t[5] = c * l - u * a, t;\n      }, scale: function scale(t, e, i) {\n        var n = i[0],\n            r = i[1];return t[0] = e[0] * n, t[1] = e[1] * r, t[2] = e[2] * n, t[3] = e[3] * r, t[4] = e[4] * n, t[5] = e[5] * r, t;\n      }, invert: function invert(t, e) {\n        var i = e[0],\n            n = e[2],\n            r = e[4],\n            a = e[1],\n            o = e[3],\n            s = e[5],\n            l = i * o - a * n;return l ? (l = 1 / l, t[0] = o * l, t[1] = -a * l, t[2] = -n * l, t[3] = i * l, t[4] = (n * s - o * r) * l, t[5] = (a * r - i * s) * l, t) : null;\n      } };return e;\n  }), e(Ye, [], function () {\n    var t = (typeof Float32Array === \"undefined\" ? \"undefined\" : _typeof(Float32Array)) === l ? Array : Float32Array,\n        e = { create: function create(e, i) {\n        var n = new t(2);return null == e && (e = 0), null == i && (i = 0), n[0] = e, n[1] = i, n;\n      }, copy: function copy(t, e) {\n        return t[0] = e[0], t[1] = e[1], t;\n      }, clone: function clone(e) {\n        var i = new t(2);return i[0] = e[0], i[1] = e[1], i;\n      }, set: function set(t, e, i) {\n        return t[0] = e, t[1] = i, t;\n      }, add: function add(t, e, i) {\n        return t[0] = e[0] + i[0], t[1] = e[1] + i[1], t;\n      }, scaleAndAdd: function scaleAndAdd(t, e, i, n) {\n        return t[0] = e[0] + i[0] * n, t[1] = e[1] + i[1] * n, t;\n      }, sub: function sub(t, e, i) {\n        return t[0] = e[0] - i[0], t[1] = e[1] - i[1], t;\n      }, len: function len(t) {\n        return Math.sqrt(this.lenSquare(t));\n      }, lenSquare: function lenSquare(t) {\n        return t[0] * t[0] + t[1] * t[1];\n      }, mul: function mul(t, e, i) {\n        return t[0] = e[0] * i[0], t[1] = e[1] * i[1], t;\n      }, div: function div(t, e, i) {\n        return t[0] = e[0] / i[0], t[1] = e[1] / i[1], t;\n      }, dot: function dot(t, e) {\n        return t[0] * e[0] + t[1] * e[1];\n      }, scale: function scale(t, e, i) {\n        return t[0] = e[0] * i, t[1] = e[1] * i, t;\n      }, normalize: function normalize(t, i) {\n        var n = e.len(i);return 0 === n ? (t[0] = 0, t[1] = 0) : (t[0] = i[0] / n, t[1] = i[1] / n), t;\n      }, distance: function distance(t, e) {\n        return Math.sqrt((t[0] - e[0]) * (t[0] - e[0]) + (t[1] - e[1]) * (t[1] - e[1]));\n      }, distanceSquare: function distanceSquare(t, e) {\n        return (t[0] - e[0]) * (t[0] - e[0]) + (t[1] - e[1]) * (t[1] - e[1]);\n      }, negate: function negate(t, e) {\n        return t[0] = -e[0], t[1] = -e[1], t;\n      }, lerp: function lerp(t, e, i, n) {\n        return t[0] = e[0] + n * (i[0] - e[0]), t[1] = e[1] + n * (i[1] - e[1]), t;\n      }, applyTransform: function applyTransform(t, e, i) {\n        var n = e[0],\n            r = e[1];return t[0] = i[0] * n + i[2] * r + i[4], t[1] = i[1] * n + i[3] * r + i[5], t;\n      }, min: function min(t, e, i) {\n        return t[0] = Math.min(e[0], i[0]), t[1] = Math.min(e[1], i[1]), t;\n      }, max: function max(t, e, i) {\n        return t[0] = Math.max(e[0], i[0]), t[1] = Math.max(e[1], i[1]), t;\n      } };return e[Ae] = e.len, e.lengthSquare = e.lenSquare, e.dist = e.distance, e.distSquare = e.distanceSquare, e;\n  }), e(\"echarts/util/layout\", [ai, ri, \"zrender/core/BoundingRect\", \"./number\", \"./format\"], function (t) {\n    function e(t, e, i, n, r) {\n      var a = 0,\n          o = 0;null == n && (n = 1 / 0), null == r && (r = 1 / 0);var s = 0;e.eachChild(function (l, u) {\n        var c,\n            h,\n            f = l[K],\n            d = l[ee](),\n            p = e.childAt(u + 1),\n            v = p && p[ee]();if (\"horizontal\" === t) {\n          var m = d.width + (v ? -v.x + d.x : 0);c = a + m, c > n || l.newline ? (a = 0, c = m, o += s + i, s = d[Re]) : s = Math.max(s, d[Re]);\n        } else {\n          var g = d[Re] + (v ? -v.y + d.y : 0);h = o + g, h > r || l.newline ? (a += s + i, o = 0, h = g, s = d.width) : s = Math.max(s, d.width);\n        }l.newline || (f[0] = a, f[1] = o, \"horizontal\" === t ? a = c + i : o = h + i);\n      });\n    }var i = t(ri),\n        n = t(\"zrender/core/BoundingRect\"),\n        r = t(\"./number\"),\n        a = t(\"./format\"),\n        o = r[R],\n        s = i.each,\n        l = {},\n        u = [\"left\", \"right\", \"top\", Ee, \"width\", Re];return l.box = e, l.vbox = i.curry(e, \"vertical\"), l.hbox = i.curry(e, \"horizontal\"), l.getAvailableSize = function (t, e, i) {\n      var n = e.width,\n          r = e[Re],\n          s = o(t.x, n),\n          l = o(t.y, r),\n          u = o(t.x2, n),\n          c = o(t.y2, r);return (isNaN(s) || isNaN(parseFloat(t.x))) && (s = 0), (isNaN(u) || isNaN(parseFloat(t.x2))) && (u = n), (isNaN(l) || isNaN(parseFloat(t.y))) && (l = 0), (isNaN(c) || isNaN(parseFloat(t.y2))) && (c = r), i = a.normalizeCssArray(i || 0), { width: Math.max(u - s - i[1] - i[3], 0), height: Math.max(c - l - i[0] - i[2], 0) };\n    }, l.getLayoutRect = function (t, e, i) {\n      i = a.normalizeCssArray(i || 0);var r = e.width,\n          s = e[Re],\n          l = o(t.left, r),\n          u = o(t.top, s),\n          c = o(t.right, r),\n          h = o(t[Ee], s),\n          f = o(t.width, r),\n          d = o(t[Re], s),\n          p = i[2] + i[0],\n          v = i[1] + i[3],\n          m = t.aspect;switch (isNaN(f) && (f = r - c - v - l), isNaN(d) && (d = s - h - p - u), isNaN(f) && isNaN(d) && (m > r / s ? f = .8 * r : d = .8 * s), null != m && (isNaN(f) && (f = m * d), isNaN(d) && (d = f / m)), isNaN(l) && (l = r - c - f - v), isNaN(u) && (u = s - h - d - p), t.left || t.right) {case J:\n          l = r / 2 - f / 2 - i[3];break;case \"right\":\n          l = r - f - v;}switch (t.top || t[Ee]) {case te:case J:\n          u = s / 2 - d / 2 - i[0];break;case Ee:\n          u = s - d - p;}l = l || 0, u = u || 0, isNaN(f) && (f = r - l - (c || 0)), isNaN(d) && (d = s - u - (h || 0));var g = new n(l + i[3], u + i[0], f, d);return g.margin = i, g;\n    }, l.positionGroup = function (t, e, n, r) {\n      var a = t[ee]();e = i[ke](i.clone(e), { width: a.width, height: a[Re] }), e = l.getLayoutRect(e, n, r), t.attr(K, [e.x - a.x, e.y - a.y]);\n    }, l.mergeLayoutParam = function (t, e, n) {\n      function r(i) {\n        var r = {},\n            l = 0,\n            u = {},\n            c = 0,\n            h = n.ignoreSize ? 1 : 2;if (s(i, function (e) {\n          u[e] = t[e];\n        }), s(i, function (t) {\n          a(e, t) && (r[t] = u[t] = e[t]), o(r, t) && l++, o(u, t) && c++;\n        }), c !== h && l) {\n          if (l >= h) return r;for (var f = 0; f < i[Ae]; f++) {\n            var d = i[f];if (!a(r, d) && a(t, d)) {\n              r[d] = t[d];break;\n            }\n          }return r;\n        }return u;\n      }function a(t, e) {\n        return t.hasOwnProperty(e);\n      }function o(t, e) {\n        return null != t[e] && \"auto\" !== t[e];\n      }function l(t, e, i) {\n        s(t, function (t) {\n          e[t] = i[t];\n        });\n      }!i[Pe](n) && (n = {});var u = [\"width\", \"left\", \"right\"],\n          c = [Re, \"top\", Ee],\n          h = r(u),\n          f = r(c);l(u, t, h), l(c, t, f);\n    }, l.getLayoutParams = function (t) {\n      return l.copyLayoutParams({}, t);\n    }, l.copyLayoutParams = function (t, e) {\n      return e && t && s(u, function (i) {\n        e.hasOwnProperty(i) && (t[i] = e[i]);\n      }), t;\n    }, l;\n  }), e(\"echarts/component/legend/LegendModel\", [ai, ri, \"../../model/Model\", z], function (t) {\n    var e = t(ri),\n        i = t(\"../../model/Model\"),\n        n = t(z).extendComponentModel({ type: \"legend\", dependencies: [Se], layoutMode: { type: \"box\", ignoreSize: !0 }, init: function init(t, e, i) {\n        this.mergeDefaultAndTheme(t, i), t.selected = t.selected || {};\n      }, mergeOption: function mergeOption(t) {\n        n.superCall(this, p, t);\n      }, optionUpdated: function optionUpdated() {\n        this._updateData(this[s]);var t = this._data;if (t[0] && \"single\" === this.get(\"selectedMode\")) {\n          for (var e = !1, i = 0; i < t[Ae]; i++) {\n            var n = t[i].get(\"name\");if (this.isSelected(n)) {\n              this.select(n), e = !0;break;\n            }\n          }!e && this.select(t[0].get(\"name\"));\n        }\n      }, _updateData: function _updateData(t) {\n        var n = e.map(this.get(\"data\") || [], function (t) {\n          return ((typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === je || (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === ue) && (t = { name: t }), new i(t, this, this[s]);\n        }, this);this._data = n;var r = e.map(t.getSeries(), function (t) {\n          return t.name;\n        });t[ze](function (t) {\n          if (t.legendDataProvider) {\n            var e = t.legendDataProvider();r = r[U](e.mapArray(e[h]));\n          }\n        }), this._availableNames = r;\n      }, getData: function getData() {\n        return this._data;\n      }, select: function select(t) {\n        var i = this[d].selected,\n            n = this.get(\"selectedMode\");if (\"single\" === n) {\n          var r = this._data;e.each(r, function (t) {\n            i[t.get(\"name\")] = !1;\n          });\n        }i[t] = !0;\n      }, unSelect: function unSelect(t) {\n        \"single\" !== this.get(\"selectedMode\") && (this[d].selected[t] = !1);\n      }, toggleSelected: function toggleSelected(t) {\n        var e = this[d].selected;t in e || (e[t] = !0), this[e[t] ? \"unSelect\" : \"select\"](t);\n      }, isSelected: function isSelected(t) {\n        var i = this[d].selected;return !(t in i && !i[t]) && e[se](this._availableNames, t) >= 0;\n      }, defaultOption: { zlevel: 0, z: 4, show: !0, orient: \"horizontal\", left: \"center\", top: \"top\", align: \"auto\", backgroundColor: \"rgba(0,0,0,0)\", borderColor: \"#ccc\", borderWidth: 0, padding: 5, itemGap: 10, itemWidth: 25, itemHeight: 14, inactiveColor: \"#ccc\", textStyle: { color: \"#333\" }, selectedMode: !0, tooltip: { show: !1 } } });return n;\n  }), e(\"echarts/component/legend/legendAction\", [ai, z, ri], function (t) {\n    function e(t, e, i) {\n      var r,\n          a = {},\n          o = \"toggleSelected\" === t;return i[Be](\"legend\", function (i) {\n        o && null != r ? i[r ? \"select\" : \"unSelect\"](e.name) : (i[t](e.name), r = i.isSelected(e.name));var s = i[ni]();n.each(s, function (t) {\n          var e = t.get(\"name\");if (\"\\n\" !== e && \"\" !== e) {\n            var n = i.isSelected(e);a[e] = e in a ? a[e] && n : n;\n          }\n        });\n      }), { name: e.name, selected: a };\n    }var i = t(z),\n        n = t(ri);i.registerAction(\"legendToggleSelect\", \"legendselectchanged\", n.curry(e, \"toggleSelected\")), i.registerAction(\"legendSelect\", \"legendselected\", n.curry(e, \"select\")), i.registerAction(\"legendUnSelect\", \"legendunselected\", n.curry(e, \"unSelect\"));\n  }), e(\"echarts/component/legend/legendFilter\", [], function () {\n    return function (t) {\n      var e = t.findComponents({ mainType: \"legend\" });e && e[Ae] && t.filterSeries(function (t) {\n        for (var i = 0; i < e[Ae]; i++) {\n          if (!e[i].isSelected(t.name)) return !1;\n        }return !0;\n      });\n    };\n  }), e(\"echarts/component/legend/LegendView\", [ai, ri, \"../../util/symbol\", I, \"../helper/listComponent\", z], function (t) {\n    function e(t, e) {\n      e[Ce]({ type: \"legendToggleSelect\", name: t });\n    }function i(t, e, i) {\n      var n = i.getZr()[Ve].getDisplayList()[0];n && n.useHoverLayer || t.get(\"legendHoverLink\") && i[Ce]({ type: \"highlight\", seriesName: t.name, name: e });\n    }function n(t, e, i) {\n      var n = i.getZr()[Ve].getDisplayList()[0];n && n.useHoverLayer || t.get(\"legendHoverLink\") && i[Ce]({ type: \"downplay\", seriesName: t.name, name: e });\n    }var r = t(ri),\n        a = t(\"../../util/symbol\"),\n        o = t(I),\n        s = t(\"../helper/listComponent\"),\n        l = r.curry;return t(z)[ii]({ type: \"legend\", init: function init() {\n        this._symbolTypeStore = {};\n      }, render: function render(t, a, u) {\n        var c = this.group;if (c[ei](), t.get(\"show\")) {\n          var h = t.get(\"selectedMode\"),\n              f = t.get(\"align\");\"auto\" === f && (f = \"right\" === t.get(\"left\") && \"vertical\" === t.get(\"orient\") ? \"right\" : \"left\");var d = {};r.each(t[ni](), function (r) {\n            var s = r.get(\"name\");if (\"\" === s || \"\\n\" === s) return void c.add(new o.Group({ newline: !0 }));var p = a.getSeriesByName(s)[0];if (!d[s]) if (p) {\n              var v = p[ni](),\n                  m = v.getVisual(\"color\");(typeof m === \"undefined\" ? \"undefined\" : _typeof(m)) === ce && (m = m(p[me](0)));var g = v.getVisual(\"legendSymbol\") || \"roundRect\",\n                  y = v.getVisual(\"symbol\"),\n                  x = this._createItem(s, r, t, g, y, f, m, h);x.on(\"click\", l(e, s, u)).on(be, l(i, p, \"\", u)).on(_e, l(n, p, \"\", u)), d[s] = !0;\n            } else a.eachRawSeries(function (a) {\n              if (!d[s] && a.legendDataProvider) {\n                var o = a.legendDataProvider(),\n                    c = o.indexOfName(s);if (0 > c) return;var p = o[S](c, \"color\"),\n                    v = \"roundRect\",\n                    m = this._createItem(s, r, t, v, null, f, p, h);m.on(\"click\", l(e, s, u)).on(be, l(i, a, s, u)).on(_e, l(n, a, s, u)), d[s] = !0;\n              }\n            }, this);\n          }, this), s.layout(c, t, u), s.addBackground(c, t);\n        }\n      }, _createItem: function _createItem(t, e, i, n, s, l, u, c) {\n        var h = i.get(\"itemWidth\"),\n            f = i.get(\"itemHeight\"),\n            p = i.get(\"inactiveColor\"),\n            v = i.isSelected(t),\n            m = new o.Group(),\n            g = e[Ze](ae),\n            y = e.get(\"icon\"),\n            x = e[Ze](\"tooltip\");if (n = y || n, m.add(a.createSymbol(n, 0, 0, h, f, v ? u : p)), !y && s && (s !== n || \"none\" == s)) {\n          var _ = .8 * f;\"none\" === s && (s = \"circle\"), m.add(a.createSymbol(s, (h - _) / 2, (f - _) / 2, _, _, v ? u : p));\n        }var b = \"left\" === l ? h + 5 : -5,\n            w = l,\n            M = i.get(\"formatter\"),\n            S = t;(typeof M === \"undefined\" ? \"undefined\" : _typeof(M)) === je && M ? S = M[fe](\"{name}\", t) : (typeof M === \"undefined\" ? \"undefined\" : _typeof(M)) === ce && (S = M(t));var T = new o.Text({ style: { text: S, x: b, y: f / 2, fill: v ? g[ie]() : p, textFont: g[ne](), textAlign: w, textVerticalAlign: \"middle\" } });m.add(T);var A = new o.Rect({ shape: m[ee](), invisible: !0, tooltip: x.get(\"show\") ? r[ke]({ content: t, formatter: function formatter() {\n              return t;\n            }, formatterParams: { componentType: \"legend\", legendIndex: i[Z], name: t, $vars: [\"name\"] } }, x[d]) : null });return m.add(A), m.eachChild(function (t) {\n          t[we] = !0;\n        }), A[we] = !c, this.group.add(m), o.setHoverStyle(m), m;\n      } });\n  }), e(\"echarts/component/tooltip/TooltipModel\", [ai, z], function (t) {\n    t(z).extendComponentModel({ type: \"tooltip\", defaultOption: { zlevel: 0, z: 8, show: !0, showContent: !0, trigger: \"item\", triggerOn: \"mousemove\", alwaysShowContent: !1, showDelay: 0, hideDelay: 100, transitionDuration: .4, enterable: !1, backgroundColor: \"rgba(50,50,50,0.7)\", borderColor: \"#333\", borderRadius: 4, borderWidth: 0, padding: 5, extraCssText: \"\", axisPointer: { type: \"line\", axis: \"auto\", animation: !0, animationDurationUpdate: 200, animationEasingUpdate: \"exponentialOut\", lineStyle: { color: \"#555\", width: 1, type: \"solid\" }, crossStyle: { color: \"#555\", width: 1, type: \"dashed\", textStyle: {} }, shadowStyle: { color: \"rgba(150,150,150,0.3)\" } }, textStyle: { color: \"#fff\", fontSize: 14 } } });\n  }), e(\"echarts/component/marker/MarkPointModel\", [ai, \"./MarkerModel\"], function (t) {\n    return t(\"./MarkerModel\")[ke]({ type: \"markPoint\", defaultOption: { zlevel: 0, z: 5, symbol: \"pin\", symbolSize: 50, tooltip: { trigger: \"item\" }, label: { normal: { show: !0, position: \"inside\" }, emphasis: { show: !0 } }, itemStyle: { normal: { borderWidth: 2 } } } });\n  }), e(\"echarts/component/marker/MarkPointView\", [ai, \"../../chart/helper/SymbolDraw\", ri, u, \"../../data/List\", \"./markerHelper\", \"./MarkerView\"], function (t) {\n    function e(t, e, i) {\n      var n = e[ti];t.each(function (r) {\n        var o,\n            s = t[L](r),\n            l = a[R](s.get(\"x\"), i[Ge]()),\n            u = a[R](s.get(\"y\"), i[He]());if (isNaN(l) || isNaN(u)) {\n          if (e.getMarkerPosition) o = e.getMarkerPosition(t.getValues(t[B], r));else if (n) {\n            var c = t.get(n[B][0], r),\n                h = t.get(n[B][1], r);o = n[N]([c, h]);\n          }\n        } else o = [l, u];isNaN(l) || (o[0] = l), isNaN(u) || (o[1] = u), t.setItemLayout(r, o);\n      });\n    }function i(t, e, i) {\n      var n;n = t ? r.map(t && t[B], function (t) {\n        var i = e[ni]().getDimensionInfo(e.coordDimToDataDim(t)[0]) || {};return i.name = t, i;\n      }) : [{ name: \"value\", type: \"float\" }];var a = new o(n, i),\n          l = r.map(i.get(\"data\"), r.curry(s.dataTransform, e));return t && (l = r[le](l, r.curry(s.dataFilter, t))), a.initData(l, null, t ? s.dimValueGetter : function (t) {\n        return t.value;\n      }), a;\n    }var n = t(\"../../chart/helper/SymbolDraw\"),\n        r = t(ri),\n        a = t(u),\n        o = t(\"../../data/List\"),\n        s = t(\"./markerHelper\");t(\"./MarkerView\")[ke]({ type: \"markPoint\", updateLayout: function updateLayout(t, i, n) {\n        i[ze](function (t) {\n          var i = t.markPointModel;i && (e(i[ni](), t, n), this.markerGroupMap[t.name][De](i));\n        }, this);\n      }, renderSeries: function renderSeries(t, r, a, o) {\n        var s = t[ti],\n            l = t.name,\n            u = t[ni](),\n            h = this.markerGroupMap,\n            f = h[l];f || (f = h[l] = new n());var d = i(s, t, r);r.setData(d), e(r[ni](), t, o), d.each(function (t) {\n          var e = d[L](t),\n              i = e[g](\"symbolSize\");(typeof i === \"undefined\" ? \"undefined\" : _typeof(i)) === ce && (i = i(r[w](t), r[me](t))), d.setItemVisual(t, { symbolSize: i, color: e.get(\"itemStyle.normal.color\") || u.getVisual(\"color\"), symbol: e[g](\"symbol\") });\n        }), f[c](d), this.group.add(f.group), d[T](function (t) {\n          t[ve](function (t) {\n            t.dataModel = r;\n          });\n        }), f.__keep = !0, f.group[we] = r.get(we) || t.get(we);\n      } });\n  }), e(\"echarts/component/marker/MarkAreaModel\", [ai, \"./MarkerModel\"], function (t) {\n    return t(\"./MarkerModel\")[ke]({ type: \"markArea\", defaultOption: { zlevel: 0, z: 1, tooltip: { trigger: \"item\" }, animation: !1, label: { normal: { show: !0, position: \"top\" }, emphasis: { show: !0, position: \"top\" } }, itemStyle: { normal: { borderWidth: 0 } } } });\n  }), e(\"echarts/component/marker/MarkLineModel\", [ai, \"./MarkerModel\"], function (t) {\n    return t(\"./MarkerModel\")[ke]({ type: \"markLine\", defaultOption: { zlevel: 0, z: 5, symbol: [\"circle\", \"arrow\"], symbolSize: [8, 16], precision: 2, tooltip: { trigger: \"item\" }, label: { normal: { show: !0, position: \"end\" }, emphasis: { show: !0 } }, lineStyle: { normal: { type: \"dashed\" }, emphasis: { width: 3 } }, animationEasing: \"linear\" } });\n  }), e(\"echarts/component/marker/MarkAreaView\", [ai, ri, \"../../data/List\", u, I, $e, \"./markerHelper\", \"./MarkerView\"], function (t) {\n    function e(t) {\n      return !isNaN(t) && !isFinite(t);\n    }function i(t, i, n) {\n      var r = 1 - t;return e(i[r]) && e(n[r]);\n    }function n(t, e) {\n      var n = e.coord[0],\n          r = e.coord[1];return \"cartesian2d\" === t.type && n && r && (i(1, n, r, t) || i(0, n, r, t)) ? !0 : p.dataFilter(t, { coord: n, x: e.x0, y: e.y0 }) || p.dataFilter(t, { coord: r, x: e.x1, y: e.y1 });\n    }function r(t, i, n, r, a) {\n      var o,\n          s = r[ti],\n          l = t[L](i),\n          u = c[R](l.get(n[0]), a[Ge]()),\n          h = c[R](l.get(n[1]), a[He]());if (isNaN(u) || isNaN(h)) {\n        if (r.getMarkerPosition) o = r.getMarkerPosition(t.getValues(n, i));else {\n          var f = t.get(n[0], i),\n              d = t.get(n[1], i);o = s[N]([f, d], !0);\n        }if (\"cartesian2d\" === s.type) {\n          var p = s[q](\"x\"),\n              v = s[q](\"y\"),\n              f = t.get(n[0], i),\n              d = t.get(n[1], i);e(f) ? o[0] = p[H](p[j]()[\"x0\" === n[0] ? 0 : 1]) : e(d) && (o[1] = v[H](v[j]()[\"y0\" === n[1] ? 0 : 1]));\n        }isNaN(u) || (o[0] = u), isNaN(h) || (o[1] = h);\n      } else o = [u, h];return o;\n    }function a(t, e, i) {\n      var r,\n          a,\n          u = [\"x0\", \"y0\", \"x1\", \"y1\"];t ? (r = s.map(t && t[B], function (t) {\n        var i = e[ni]().getDimensionInfo(e.coordDimToDataDim(t)[0]) || {};return i.name = t, i;\n      }), a = new l(s.map(u, function (t, e) {\n        return { name: t, type: r[e % 2].type };\n      }), i)) : (r = [{ name: \"value\", type: \"float\" }], a = new l(r, i));var c = s.map(i.get(\"data\"), s.curry(v, e, t, i));t && (c = s[le](c, s.curry(n, t)));var h = t ? function (t, e, i, n) {\n        return t.coord[Math.floor(n / 2)][n % 2];\n      } : function (t) {\n        return t.value;\n      };return a.initData(c, null, h), a[o] = !0, a;\n    }var s = t(ri),\n        l = t(\"../../data/List\"),\n        c = t(u),\n        f = t(I),\n        d = t($e),\n        p = t(\"./markerHelper\"),\n        v = function v(t, e, i, n) {\n      var r = p.dataTransform(t, n[0]),\n          a = p.dataTransform(t, n[1]),\n          o = s[V],\n          l = r.coord,\n          u = a.coord;l[0] = o(l[0], -1 / 0), l[1] = o(l[1], -1 / 0), u[0] = o(u[0], 1 / 0), u[1] = o(u[1], 1 / 0);var c = s.mergeAll([{}, r, a]);return c.coord = [r.coord, a.coord], c.x0 = r.x, c.y0 = r.y, c.x1 = a.x, c.y1 = a.y, c;\n    },\n        m = [[\"x0\", \"y0\"], [\"x1\", \"y0\"], [\"x1\", \"y1\"], [\"x0\", \"y1\"]];t(\"./MarkerView\")[ke]({ type: \"markArea\", updateLayout: function updateLayout(t, e, i) {\n        e[ze](function (t) {\n          var e = t.markAreaModel;if (e) {\n            var n = e[ni]();n.each(function (e) {\n              var a = s.map(m, function (a) {\n                return r(n, e, a, t, i);\n              });n.setItemLayout(e, a);var o = n[A](e);o[M](\"points\", a);\n            });\n          }\n        }, this);\n      }, renderSeries: function renderSeries(t, e, i, n) {\n        var o = t[ti],\n            l = t.name,\n            u = t[ni](),\n            c = this.markerGroupMap,\n            p = c[l];p || (p = c[l] = { group: new f.Group() }), this.group.add(p.group), p.__keep = !0;var v = a(o, t, e);e.setData(v), v.each(function (e) {\n          v.setItemLayout(e, s.map(m, function (i) {\n            return r(v, e, i, t, n);\n          })), v.setItemVisual(e, { color: u.getVisual(\"color\") });\n        }), v.diff(p.__data).add(function (t) {\n          var e = new f.Polygon({ shape: { points: v[P](t) } });v[C](t, e), p.group.add(e);\n        })[Ie](function (t, i) {\n          var n = p.__data[A](i);f.updateProps(n, { shape: { points: v[P](t) } }, e, t), p.group.add(n), v[C](t, n);\n        })[Le](function (t) {\n          var e = p.__data[A](t);p.group[Le](e);\n        })[k](), v[T](function (t, i) {\n          var n = v[L](i),\n              r = n[Ze](\"label.normal\"),\n              a = n[Ze](\"label.emphasis\"),\n              o = v[S](i, \"color\");t.useStyle(s[Je](n[Ze](\"itemStyle.normal\")[Ke](), { fill: d.modifyAlpha(o, .4), stroke: o })), t.hoverStyle = n[Ze](\"itemStyle.normal\")[Ke]();var l = v[h](i) || \"\",\n              u = o || t.style.fill;f.setText(t.style, r, u), t.style.text = s[V](e.getFormattedLabel(i, D), l), f.setText(t.hoverStyle, a, u), t.hoverStyle.text = s[V](e.getFormattedLabel(i, b), l), f.setHoverStyle(t, {}), t.dataModel = e;\n        }), p.__data = v, p.group[we] = e.get(we) || t.get(we);\n      } });\n  }), e(\"echarts/component/tooltip/TooltipView\", [ai, \"./TooltipContent\", I, ri, \"../../util/format\", u, Qe, \"../../model/Model\", z], function (t) {\n    function e(t, e) {\n      if (!t || !e) return !1;var i = b.round;return i(t[0]) === i(e[0]) && i(t[1]) === i(e[1]);\n    }function i(t, e, i, n) {\n      return { x1: t, y1: e, x2: i, y2: n };\n    }function n(t, e, i, n) {\n      return { x: t, y: e, width: i, height: n };\n    }function o(t, e, i, n, r, a) {\n      return { cx: t, cy: e, r0: i, r: n, startAngle: r, endAngle: a, clockwise: !0 };\n    }function l(t, e, i, n, r) {\n      var a = i.clientWidth,\n          o = i.clientHeight,\n          s = 20;return t + a + s > n ? t -= a + s : t += s, e + o + s > r ? e -= o + s : e += s, [t, e];\n    }function c(t, e, i) {\n      var n = i.clientWidth,\n          r = i.clientHeight,\n          a = 5,\n          o = 0,\n          s = 0,\n          l = e.width,\n          u = e[Re];switch (t) {case \"inside\":\n          o = e.x + l / 2 - n / 2, s = e.y + u / 2 - r / 2;break;case \"top\":\n          o = e.x + l / 2 - n / 2, s = e.y - r - a;break;case Ee:\n          o = e.x + l / 2 - n / 2, s = e.y + u + a;break;case \"left\":\n          o = e.x - n - a, s = e.y + u / 2 - r / 2;break;case \"right\":\n          o = e.x + l + a, s = e.y + u / 2 - r / 2;}return [o, s];\n    }function d(t, e, i, n, o, s, u) {\n      var h = u[Ge](),\n          f = u[He](),\n          d = s && s[ee]().clone();if (s && d[_](s[a]), (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === ce && (t = t([e, i], o, n.el, d)), g[he](t)) e = w(t[0], h), i = w(t[1], f);else if ((typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === je && s) {\n        var p = c(t, d, n.el);e = p[0], i = p[1];\n      } else {\n        var p = l(e, i, n.el, h, f);e = p[0], i = p[1];\n      }n[r](e, i);\n    }function p(t) {\n      var e = t[ti],\n          i = t.get(\"tooltip.trigger\", !0);return !(!e || \"cartesian2d\" !== e.type && \"polar\" !== e.type && \"singleAxis\" !== e.type || \"item\" === i);\n    }var v = t(\"./TooltipContent\"),\n        m = t(I),\n        g = t(ri),\n        x = t(\"../../util/format\"),\n        b = t(u),\n        w = b[R],\n        M = t(Qe),\n        S = t(\"../../model/Model\");t(z)[ii]({ type: \"tooltip\", _axisPointers: {}, init: function init(t, e) {\n        if (!M.node) {\n          var i = new v(e.getDom(), e);this._tooltipContent = i, e.on(\"showTip\", this._manuallyShowTip, this), e.on(\"hideTip\", this._manuallyHideTip, this);\n        }\n      }, render: function render(t, e, i) {\n        if (!M.node) {\n          this.group[ei](), this._axisPointers = {}, this._tooltipModel = t, this._ecModel = e, this._api = i, this._lastHover = {};var n = this._tooltipContent;n[Ie](), n.enterable = t.get(\"enterable\"), this._alwaysShowContent = t.get(\"alwaysShowContent\"), this._seriesGroupByAxis = this._prepareAxisTriggerData(t, e);var r = this._crossText;if (r && this.group.add(r), null != this._lastX && null != this._lastY) {\n            var a = this;clearTimeout(this._refreshUpdateTimeout), this._refreshUpdateTimeout = setTimeout(function () {\n              a._manuallyShowTip({ x: a._lastX, y: a._lastY });\n            });\n          }var o = this._api.getZr();o.off(\"click\", this._tryShow), o.off(\"mousemove\", this._mousemove), o.off(_e, this._hide), o.off(\"globalout\", this._hide), \"click\" === t.get(\"triggerOn\") ? o.on(\"click\", this._tryShow, this) : (o.on(\"mousemove\", this._mousemove, this), o.on(_e, this._hide, this), o.on(\"globalout\", this._hide, this));\n        }\n      }, _mousemove: function _mousemove(t) {\n        var e = this._tooltipModel.get(\"showDelay\"),\n            i = this;clearTimeout(this._showTimeout), e > 0 ? this._showTimeout = setTimeout(function () {\n          i._tryShow(t);\n        }, e) : this._tryShow(t);\n      }, _manuallyShowTip: function _manuallyShowTip(t) {\n        if (t.from !== this.uid) {\n          var e = this._ecModel,\n              i = t[ge],\n              n = t[ye],\n              r = e.getSeriesByIndex(i),\n              o = this._api;if (null == t.x || null == t.y) {\n            if (r || e[ze](function (t) {\n              p(t) && !r && (r = t);\n            }), r) {\n              var s = r[ni]();null == n && (n = s.indexOfName(t.name));var l,\n                  u,\n                  c = s[A](n),\n                  h = r[ti];if (h && h[N]) {\n                var f = h[N](s.getValues(g.map(h[B], function (t) {\n                  return r.coordDimToDataDim(t)[0];\n                }), n, !0));l = f && f[0], u = f && f[1];\n              } else if (c) {\n                var d = c[ee]().clone();d[_](c[a]), l = d.x + d.width / 2, u = d.y + d[Re] / 2;\n              }null != l && null != u && this._tryShow({ offsetX: l, offsetY: u, target: c, event: {} });\n            }\n          } else {\n            var c = o.getZr().handler.findHover(t.x, t.y);this._tryShow({ offsetX: t.x, offsetY: t.y, target: c, event: {} });\n          }\n        }\n      }, _manuallyHideTip: function _manuallyHideTip(t) {\n        t.from !== this.uid && this._hide();\n      }, _prepareAxisTriggerData: function _prepareAxisTriggerData(t, e) {\n        var i = {};return e[ze](function (t) {\n          if (p(t)) {\n            var e,\n                n,\n                r = t[ti];\"cartesian2d\" === r.type ? (e = r[E](), n = e.dim + e.index) : \"singleAxis\" === r.type ? (e = r[q](), n = e.dim + e.type) : (e = r[E](), n = e.dim + r.name), i[n] = i[n] || { coordSys: [], series: [] }, i[n].coordSys.push(r), i[n][Se].push(t);\n          }\n        }, this), i;\n      }, _tryShow: function _tryShow(t) {\n        var e = t[xe],\n            i = this._tooltipModel,\n            n = i.get(Te),\n            r = this._ecModel,\n            a = this._api;if (i) if (this._lastX = t.offsetX, this._lastY = t.offsetY, e && null != e[ye]) {\n          var o = e.dataModel || r.getSeriesByIndex(e[ge]),\n              s = e[ye],\n              l = o[ni]()[L](s);\"axis\" === (l.get(\"tooltip.trigger\") || n) ? this._showAxisTooltip(i, r, t) : (this._ticket = \"\", this._hideAxisPointer(), this._resetLastHover(), this._showItemTooltipContent(o, s, e.dataType, t)), a[Ce]({ type: \"showTip\", from: this.uid, dataIndex: e[ye], seriesIndex: e[ge] });\n        } else if (e && e.tooltip) {\n          var u = e.tooltip;if ((typeof u === \"undefined\" ? \"undefined\" : _typeof(u)) === je) {\n            var c = u;u = { content: c, formatter: c };\n          }var h = new S(u, i),\n              f = h.get(\"content\"),\n              d = Math.random();this._showTooltipContent(h, f, h.get(\"formatterParams\") || {}, d, t.offsetX, t.offsetY, e, a);\n        } else \"item\" === n ? this._hide() : this._showAxisTooltip(i, r, t), \"cross\" === i.get(\"axisPointer.type\") && a[Ce]({ type: \"showTip\", from: this.uid, x: t.offsetX, y: t.offsetY });\n      }, _showAxisTooltip: function _showAxisTooltip(t, i, n) {\n        var r = t[Ze](\"axisPointer\"),\n            a = r.get(\"type\");if (\"cross\" === a) {\n          var o = n[xe];if (o && null != o[ye]) {\n            var s = i.getSeriesByIndex(o[ge]),\n                l = o[ye];this._showItemTooltipContent(s, l, o.dataType, n);\n          }\n        }this._showAxisPointer();var u = !0;g.each(this._seriesGroupByAxis, function (t) {\n          var i = t.coordSys,\n              o = i[0],\n              s = [n.offsetX, n.offsetY];if (!o.containPoint(s)) return void this._hideAxisPointer(o.name);u = !1;var l = o[B],\n              c = o.pointToData(s, !0);s = o[N](c);var h = o[E](),\n              f = r.get(\"axis\");\"auto\" === f && (f = h.dim);var d = !1,\n              p = this._lastHover;if (\"cross\" === a) e(p.data, c) && (d = !0), p.data = c;else {\n            var v = g[se](l, f);p.data === c[v] && (d = !0), p.data = c[v];\n          }\"cartesian2d\" !== o.type || d ? \"polar\" !== o.type || d ? \"singleAxis\" !== o.type || d || this._showSinglePointer(r, o, f, s) : this._showPolarPointer(r, o, f, s) : this._showCartesianPointer(r, o, f, s), \"cross\" !== a && this._dispatchAndShowSeriesTooltipContent(o, t[Se], s, c, d);\n        }, this), this._tooltipModel.get(\"show\") || this._hideAxisPointer(), u && this._hide();\n      }, _showCartesianPointer: function _showCartesianPointer(t, e, r, a) {\n        function o(n, r, a) {\n          var o = \"x\" === n ? i(r[0], a[0], r[0], a[1]) : i(a[0], r[1], a[1], r[1]),\n              s = l._getPointerElement(e, t, n, o);m.subPixelOptimizeLine({ shape: o, style: s.style }), h ? m.updateProps(s, { shape: o }, t) : s.attr({ shape: o });\n        }function s(i, r, a) {\n          var o = e[q](i),\n              s = o.getBandWidth(),\n              u = a[1] - a[0],\n              c = \"x\" === i ? n(r[0] - s / 2, a[0], s, u) : n(a[0], r[1] - s / 2, u, s),\n              f = l._getPointerElement(e, t, i, c);h ? m.updateProps(f, { shape: c }, t) : f.attr({ shape: c });\n        }var l = this,\n            u = t.get(\"type\"),\n            c = e[E](),\n            h = \"cross\" !== u && c.type === W && c.getBandWidth() > 20;if (\"cross\" === u) o(\"x\", a, e[q](\"y\").getGlobalExtent()), o(\"y\", a, e[q](\"x\").getGlobalExtent()), this._updateCrossText(e, a, t);else {\n          var f = e[q](\"x\" === r ? \"y\" : \"x\"),\n              d = f.getGlobalExtent();\"cartesian2d\" === e.type && (\"line\" === u ? o : s)(r, a, d);\n        }\n      }, _showSinglePointer: function _showSinglePointer(t, e, n, r) {\n        function a(n, r, a) {\n          var s = e[q](),\n              u = s.orient,\n              c = \"horizontal\" === u ? i(r[0], a[0], r[0], a[1]) : i(a[0], r[1], a[1], r[1]),\n              h = o._getPointerElement(e, t, n, c);l ? m.updateProps(h, { shape: c }, t) : h.attr({ shape: c });\n        }var o = this,\n            s = t.get(\"type\"),\n            l = \"cross\" !== s && e[E]().type === W,\n            u = e.getRect(),\n            c = [u.y, u.y + u[Re]];a(n, r, c);\n      }, _showPolarPointer: function _showPolarPointer(t, e, n, r) {\n        function a(n, r, a) {\n          var o,\n              s = e.pointToCoord(r);if (\"angle\" === n) {\n            var u = e.coordToPoint([a[0], s[1]]),\n                c = e.coordToPoint([a[1], s[1]]);o = i(u[0], u[1], c[0], c[1]);\n          } else o = { cx: e.cx, cy: e.cy, r: s[0] };var h = l._getPointerElement(e, t, n, o);f ? m.updateProps(h, { shape: o }, t) : h.attr({ shape: o });\n        }function s(i, n, r) {\n          var a,\n              s = e[q](i),\n              u = s.getBandWidth(),\n              c = e.pointToCoord(n),\n              h = Math.PI / 180;a = \"angle\" === i ? o(e.cx, e.cy, r[0], r[1], (-c[1] - u / 2) * h, (-c[1] + u / 2) * h) : o(e.cx, e.cy, c[0] - u / 2, c[0] + u / 2, 0, 2 * Math.PI);var d = l._getPointerElement(e, t, i, a);f ? m.updateProps(d, { shape: a }, t) : d.attr({ shape: a });\n        }var l = this,\n            u = t.get(\"type\"),\n            c = e.getAngleAxis(),\n            h = e.getRadiusAxis(),\n            f = \"cross\" !== u && e[E]().type === W;if (\"cross\" === u) a(\"angle\", r, h[j]()), a(\"radius\", r, c[j]()), this._updateCrossText(e, r, t);else {\n          var d = e[q](\"radius\" === n ? \"angle\" : \"radius\"),\n              p = d[j]();(\"line\" === u ? a : s)(n, r, p);\n        }\n      }, _updateCrossText: function _updateCrossText(t, e, i) {\n        var n = i[Ze](\"crossStyle\"),\n            r = n[Ze](ae),\n            a = this._tooltipModel,\n            o = this._crossText;o || (o = this._crossText = new m.Text({ style: { textAlign: \"left\", textVerticalAlign: \"bottom\" } }), this.group.add(o));var s = t.pointToData(e),\n            l = t[B];s = g.map(s, function (e, i) {\n          var n = t[q](l[i]);return e = n.type === W || \"time\" === n.type ? n.scale.getLabel(e) : x.addCommas(e[f](n.getPixelPrecision()));\n        }), o[pe]({ fill: r[ie]() || n.get(\"color\"), textFont: r[ne](), text: s.join(\", \"), x: e[0] + 5, y: e[1] - 5 }), o.z = a.get(\"z\"), o[de] = a.get(de);\n      }, _getPointerElement: function _getPointerElement(t, e, i, n) {\n        var r = this._tooltipModel,\n            a = r.get(\"z\"),\n            o = r.get(de),\n            s = this._axisPointers,\n            l = t.name;if (s[l] = s[l] || {}, s[l][i]) return s[l][i];var u = e.get(\"type\"),\n            c = e[Ze](u + \"Style\"),\n            h = \"shadow\" === u,\n            f = c[h ? \"getAreaStyle\" : \"getLineStyle\"](),\n            d = \"polar\" === t.type ? h ? \"Sector\" : \"radius\" === i ? \"Circle\" : \"Line\" : h ? \"Rect\" : \"Line\";h ? f[y] = null : f.fill = null;var p = s[l][i] = new m[d]({ style: f, z: a, zlevel: o, silent: !0, shape: n });return this.group.add(p), p;\n      }, _dispatchAndShowSeriesTooltipContent: function _dispatchAndShowSeriesTooltipContent(t, e, i, n, r) {\n        var a = this._tooltipModel,\n            o = t[E](),\n            s = \"x\" === o.dim || \"radius\" === o.dim ? 0 : 1,\n            l = g.map(e, function (t) {\n          return { seriesIndex: t[ge], dataIndex: t.getAxisTooltipDataIndex ? t.getAxisTooltipDataIndex(t.coordDimToDataDim(o.dim), n, o) : t[ni]().indexOfNearest(t.coordDimToDataDim(o.dim)[0], n[s], !1, o.type === W ? .5 : null) };\n        }),\n            u = this._lastHover,\n            c = this._api;if (u.payloadBatch && !r && c[Ce]({ type: \"downplay\", batch: u.payloadBatch }), r || (c[Ce]({ type: \"highlight\", batch: l }), u.payloadBatch = l), c[Ce]({ type: \"showTip\", dataIndex: l[0][ye], seriesIndex: l[0][ge], from: this.uid }), o && a.get(\"showContent\") && a.get(\"show\")) {\n          var f = g.map(e, function (t, e) {\n            return t[me](l[e][ye]);\n          });if (r) d(a.get(K), i[0], i[1], this._tooltipContent, f, null, c);else {\n            var p = l[0][ye],\n                v = \"time\" === o.type ? o.scale.getLabel(n[s]) : e[0][ni]()[h](p),\n                m = (v ? v + \"<br />\" : \"\") + g.map(e, function (t, e) {\n              return t.formatTooltip(l[e][ye], !0);\n            }).join(\"<br />\"),\n                y = \"axis_\" + t.name + \"_\" + p;this._showTooltipContent(a, m, f, y, i[0], i[1], null, c);\n          }\n        }\n      }, _showItemTooltipContent: function _showItemTooltipContent(t, e, i, n) {\n        var r = this._api,\n            a = t[ni](i),\n            o = a[L](e),\n            l = o.get(\"tooltip\", !0);if ((typeof l === \"undefined\" ? \"undefined\" : _typeof(l)) === je) {\n          var u = l;l = { formatter: u };\n        }var c = this._tooltipModel,\n            h = t[Ze](\"tooltip\", c),\n            f = new S(l, h, h[s]),\n            d = t[me](e, i),\n            p = t.formatTooltip(e, !1, i),\n            v = \"item_\" + t.name + \"_\" + e;this._showTooltipContent(f, p, d, v, n.offsetX, n.offsetY, n[xe], r);\n      }, _showTooltipContent: function _showTooltipContent(t, e, i, n, r, a, o, s) {\n        if (this._ticket = \"\", t.get(\"showContent\") && t.get(\"show\")) {\n          var l = this._tooltipContent,\n              u = t.get(\"formatter\"),\n              c = t.get(K),\n              h = e;if (u) if ((typeof u === \"undefined\" ? \"undefined\" : _typeof(u)) === je) h = x.formatTpl(u, i);else if ((typeof u === \"undefined\" ? \"undefined\" : _typeof(u)) === ce) {\n            var f = this,\n                p = n,\n                v = function v(t, e) {\n              t === f._ticket && (l.setContent(e), d(c, r, a, l, i, o, s));\n            };f._ticket = p, h = u(i, p, v);\n          }l.show(t), l.setContent(h), d(c, r, a, l, i, o, s);\n        }\n      }, _showAxisPointer: function _showAxisPointer(t) {\n        if (t) {\n          var e = this._axisPointers[t];e && g.each(e, function (t) {\n            t.show();\n          });\n        } else this.group.eachChild(function (t) {\n          t.show();\n        }), this.group.show();\n      }, _resetLastHover: function _resetLastHover() {\n        var t = this._lastHover;t.payloadBatch && this._api[Ce]({ type: \"downplay\", batch: t.payloadBatch }), this._lastHover = {};\n      }, _hideAxisPointer: function _hideAxisPointer(t) {\n        if (t) {\n          var e = this._axisPointers[t];e && g.each(e, function (t) {\n            t.hide();\n          });\n        } else this.group.children()[Ae] && this.group.hide();\n      }, _hide: function _hide() {\n        clearTimeout(this._showTimeout), this._hideAxisPointer(), this._resetLastHover(), this._alwaysShowContent || this._tooltipContent.hideLater(this._tooltipModel.get(\"hideDelay\")), this._api[Ce]({ type: \"hideTip\", from: this.uid }), this._lastX = this._lastY = null;\n      }, dispose: function dispose(t, e) {\n        if (!M.node) {\n          var i = e.getZr();\n          this._tooltipContent.hide(), i.off(\"click\", this._tryShow), i.off(\"mousemove\", this._mousemove), i.off(_e, this._hide), i.off(\"globalout\", this._hide), e.off(\"showTip\", this._manuallyShowTip), e.off(\"hideTip\", this._manuallyHideTip);\n        }\n      } });\n  }), e(\"echarts/component/marker/MarkLineView\", [ai, ri, \"../../data/List\", u, \"./markerHelper\", \"../../chart/helper/LineDraw\", \"./MarkerView\"], function (t) {\n    function e(t) {\n      return !isNaN(t) && !isFinite(t);\n    }function i(t, i, n, r) {\n      var a = 1 - t,\n          o = r[B][t];return e(i[a]) && e(n[a]) && i[t] === n[t] && r[q](o).containData(i[t]);\n    }function n(t, e) {\n      if (\"cartesian2d\" === t.type) {\n        var n = e[0].coord,\n            r = e[1].coord;if (n && r && (i(1, n, r, t) || i(0, n, r, t))) return !0;\n      }return d.dataFilter(t, e[0]) && d.dataFilter(t, e[1]);\n    }function r(t, i, n, r, a) {\n      var o,\n          s = r[ti],\n          l = t[L](i),\n          u = h[R](l.get(\"x\"), a[Ge]()),\n          c = h[R](l.get(\"y\"), a[He]());if (isNaN(u) || isNaN(c)) {\n        if (r.getMarkerPosition) o = r.getMarkerPosition(t.getValues(t[B], i));else {\n          var f = s[B],\n              d = t.get(f[0], i),\n              p = t.get(f[1], i);o = s[N]([d, p]);\n        }if (\"cartesian2d\" === s.type) {\n          var v = s[q](\"x\"),\n              m = s[q](\"y\"),\n              f = s[B];e(t.get(f[0], i)) ? o[0] = v[H](v[j]()[n ? 0 : 1]) : e(t.get(f[1], i)) && (o[1] = m[H](m[j]()[n ? 0 : 1]));\n        }isNaN(u) || (o[0] = u), isNaN(c) || (o[1] = c);\n      } else o = [u, c];t.setItemLayout(i, o);\n    }function a(t, e, i) {\n      var r;r = t ? s.map(t && t[B], function (t) {\n        var i = e[ni]().getDimensionInfo(e.coordDimToDataDim(t)[0]) || {};return i.name = t, i;\n      }) : [{ name: \"value\", type: \"float\" }];var a = new l(r, i),\n          u = new l(r, i),\n          c = new l([], i),\n          h = s.map(i.get(\"data\"), s.curry(v, e, t, i));t && (h = s[le](h, s.curry(n, t)));var f = t ? d.dimValueGetter : function (t) {\n        return t.value;\n      };return a.initData(s.map(h, function (t) {\n        return t[0];\n      }), null, f), u.initData(s.map(h, function (t) {\n        return t[1];\n      }), null, f), c.initData(s.map(h, function (t) {\n        return t[2];\n      })), c[o] = !0, { from: a, to: u, line: c };\n    }var s = t(ri),\n        l = t(\"../../data/List\"),\n        h = t(u),\n        d = t(\"./markerHelper\"),\n        p = t(\"../../chart/helper/LineDraw\"),\n        v = function v(t, e, i, n) {\n      var r = t[ni](),\n          a = n.type;if (!s[he](n) && (\"min\" === a || \"max\" === a || \"average\" === a || null != n.xAxis || null != n.yAxis)) {\n        var o, l, u;if (null != n.yAxis || null != n.xAxis) l = null != n.yAxis ? \"y\" : \"x\", o = e[q](l), u = s[V](n.yAxis, n.xAxis);else {\n          var c = d.getAxisInfo(n, r, e, t);l = c.valueDataDim, o = c.valueAxis, u = d.numCalculate(r, l, a);\n        }var h = \"x\" === l ? 0 : 1,\n            p = 1 - h,\n            v = s.clone(n),\n            m = {};v.type = null, v.coord = [], m.coord = [], v.coord[p] = -1 / 0, m.coord[p] = 1 / 0;var g = i.get(\"precision\");g >= 0 && (u = +u[f](g)), v.coord[h] = m.coord[h] = u, n = [v, m, { type: a, valueIndex: n.valueIndex, value: u }];\n      }return n = [d.dataTransform(t, n[0]), d.dataTransform(t, n[1]), s[ke]({}, n[2])], n[2].type = n[2].type || \"\", s.merge(n[2], n[0]), s.merge(n[2], n[1]), n;\n    };t(\"./MarkerView\")[ke]({ type: \"markLine\", updateLayout: function updateLayout(t, e, i) {\n        e[ze](function (t) {\n          var e = t.markLineModel;if (e) {\n            var n = e[ni](),\n                a = e.__from,\n                o = e.__to;a.each(function (e) {\n              r(a, e, !0, t, i), r(o, e, !1, t, i);\n            }), n.each(function (t) {\n              n.setItemLayout(t, [a[P](t), o[P](t)]);\n            }), this.markerGroupMap[t.name][De]();\n          }\n        }, this);\n      }, renderSeries: function renderSeries(t, e, i, n) {\n        function o(e, i, a) {\n          var o = e[L](i);r(e, i, a, t, n), e.setItemVisual(i, { symbolSize: o.get(\"symbolSize\") || _[a ? 0 : 1], symbol: o.get(\"symbol\", !0) || x[a ? 0 : 1], color: o.get(\"itemStyle.normal.color\") || h.getVisual(\"color\") });\n        }var l = t[ti],\n            u = t.name,\n            h = t[ni](),\n            f = this.markerGroupMap,\n            d = f[u];d || (d = f[u] = new p()), this.group.add(d.group);var v = a(l, t, e),\n            m = v.from,\n            g = v.to,\n            y = v.line;e.__from = m, e.__to = g, e.setData(y);var x = e.get(\"symbol\"),\n            _ = e.get(\"symbolSize\");s[he](x) || (x = [x, x]), (typeof _ === \"undefined\" ? \"undefined\" : _typeof(_)) === ue && (_ = [_, _]), v.from.each(function (t) {\n          o(m, t, !0), o(g, t, !1);\n        }), y.each(function (t) {\n          var e = y[L](t).get(\"lineStyle.normal.color\");y.setItemVisual(t, { color: e || m[S](t, \"color\") }), y.setItemLayout(t, [m[P](t), g[P](t)]), y.setItemVisual(t, { fromSymbolSize: m[S](t, \"symbolSize\"), fromSymbol: m[S](t, \"symbol\"), toSymbolSize: g[S](t, \"symbolSize\"), toSymbol: g[S](t, \"symbol\") });\n        }), d[c](y), v.line[T](function (t) {\n          t[ve](function (t) {\n            t.dataModel = e;\n          });\n        }), d.__keep = !0, d.group[we] = e.get(we) || t.get(we);\n      } });\n  }), e(\"echarts/component/toolbox/ToolboxView\", [ai, \"./featureManager\", ri, I, \"../../model/Model\", \"../../data/DataDiffer\", \"../helper/listComponent\", \"zrender/contain/text\", z], function (t) {\n    function e(t) {\n      return 0 === t[se](\"my\");\n    }var i = t(\"./featureManager\"),\n        n = t(ri),\n        r = t(I),\n        a = t(\"../../model/Model\"),\n        o = t(\"../../data/DataDiffer\"),\n        l = t(\"../helper/listComponent\"),\n        u = t(\"zrender/contain/text\");return t(z)[ii]({ type: \"toolbox\", render: function render(t, c, h, f) {\n        function p(n, r) {\n          var o,\n              l = w[n],\n              u = w[r],\n              p = x[l],\n              m = new a(p, t, t[s]);if (l && !u) {\n            if (e(l)) o = { model: m, onclick: m[d].onclick, featureName: l };else {\n              var g = i.get(l);if (!g) return;o = new g(m, c, h);\n            }_[l] = o;\n          } else {\n            if (o = _[u], !o) return;o.model = m, o[s] = c, o.api = h;\n          }return !l && u ? void (o.dispose && o.dispose(c, h)) : !m.get(\"show\") || o.unusable ? void (o[Le] && o[Le](c, h)) : (v(m, o, l), m.setIconStatus = function (t, e) {\n            var i = this[d],\n                n = this.iconPaths;i.iconStatus = i.iconStatus || {}, i.iconStatus[t] = e, n[t] && n[t][Te](e);\n          }, void (o.render && o.render(m, c, h, f)));\n        }function v(e, i, a) {\n          var o = e[Ze](\"iconStyle\"),\n              s = i.getIcons ? i.getIcons() : e.get(\"icon\"),\n              l = e.get(\"title\") || {};if ((typeof s === \"undefined\" ? \"undefined\" : _typeof(s)) === je) {\n            var u = s,\n                f = l;s = {}, l = {}, s[a] = u, l[a] = f;\n          }var d = e.iconPaths = {};n.each(s, function (a, s) {\n            var u = o[Ze](D)[Ke](),\n                f = o[Ze](b)[Ke](),\n                p = { x: -g / 2, y: -g / 2, width: g, height: g },\n                v = 0 === a[se](\"image://\") ? (p.image = a.slice(8), new r.Image({ style: p })) : r.makePath(a[fe](\"path://\", \"\"), { style: u, hoverStyle: f, rectHover: !0 }, p, J);r.setHoverStyle(v), t.get(\"showTitle\") && (v.__title = l[s], v.on(be, function () {\n              v[pe]({ text: l[s], textPosition: f.textPosition || Ee, textFill: f.fill || f[y] || \"#000\", textAlign: f[re] || J });\n            }).on(_e, function () {\n              v[pe]({ textFill: null });\n            })), v[Te](e.get(\"iconStatus.\" + s) || D), m.add(v), v.on(\"click\", n.bind(i.onclick, i, c, h, s)), d[s] = v;\n          });\n        }var m = this.group;if (m[ei](), t.get(\"show\")) {\n          var g = +t.get(\"itemSize\"),\n              x = t.get(\"feature\") || {},\n              _ = this._features || (this._features = {}),\n              w = [];n.each(x, function (t, e) {\n            w.push(e);\n          }), new o(this._featureNames || [], w).add(p)[Ie](p)[Le](n.curry(p, null))[k](), this._featureNames = w, l.layout(m, t, h), l.addBackground(m, t), m.eachChild(function (t) {\n            var e = t.__title,\n                i = t.hoverStyle;if (i && e) {\n              var n = u[ee](e, i.font),\n                  r = t[K][0] + m[K][0],\n                  a = t[K][1] + m[K][1] + g,\n                  o = !1;a + n[Re] > h[He]() && (i.textPosition = \"top\", o = !0);var s = o ? -5 - n[Re] : g + 8;r + n.width / 2 > h[Ge]() ? (i.textPosition = [\"100%\", s], i[re] = \"right\") : r - n.width / 2 < 0 && (i.textPosition = [0, s], i[re] = \"left\");\n            }\n          });\n        }\n      }, updateView: function updateView(t, e, i, r) {\n        n.each(this._features, function (t) {\n          t.updateView && t.updateView(t.model, e, i, r);\n        });\n      }, updateLayout: function updateLayout(t, e, i, r) {\n        n.each(this._features, function (t) {\n          t[De] && t[De](t.model, e, i, r);\n        });\n      }, remove: function remove(t, e) {\n        n.each(this._features, function (i) {\n          i[Le] && i[Le](t, e);\n        }), this.group[ei]();\n      }, dispose: function dispose(t, e) {\n        n.each(this._features, function (i) {\n          i.dispose && i.dispose(t, e);\n        });\n      } });\n  }), e(\"echarts/component/toolbox/ToolboxModel\", [ai, \"./featureManager\", ri, z], function (t) {\n    var e = t(\"./featureManager\"),\n        i = t(ri),\n        n = t(z).extendComponentModel({ type: \"toolbox\", layoutMode: { type: \"box\", ignoreSize: !0 }, mergeDefaultAndTheme: function mergeDefaultAndTheme() {\n        n.superApply(this, \"mergeDefaultAndTheme\", arguments), i.each(this[d].feature, function (t, n) {\n          var r = e.get(n);r && i.merge(t, r.defaultOption);\n        });\n      }, defaultOption: { show: !0, z: 6, zlevel: 0, orient: \"horizontal\", left: \"right\", top: \"top\", backgroundColor: \"transparent\", borderColor: \"#ccc\", borderWidth: 0, padding: 5, itemSize: 15, itemGap: 8, showTitle: !0, iconStyle: { normal: { borderColor: \"#666\", color: \"none\" }, emphasis: { borderColor: \"#3E98C5\" } } } });return n;\n  }), e(\"echarts/component/toolbox/feature/SaveAsImage\", [ai, Qe, \"../featureManager\"], function (t) {\n    function e(t) {\n      this.model = t;\n    }var i = t(Qe);e.defaultOption = { show: !0, icon: \"M4.7,22.9L29.3,45.5L54.7,23.4M4.6,43.6L4.6,58L53.8,58L53.8,43.6M29.2,45.1L29.2,0\", title: \"保存为图片\", type: \"png\", name: \"\", excludeComponents: [\"toolbox\"], pixelRatio: 1, lang: [\"右键另存为图片\"] }, e[Ue].unusable = !i[Fe];var n = e[Ue];return n.onclick = function (t, e) {\n      var i = this.model,\n          n = i.get(\"name\") || t.get(\"title.0.text\") || \"echarts\",\n          r = document[X](\"a\"),\n          a = i.get(\"type\", !0) || \"png\";r.download = n + \".\" + a, r[xe] = \"_blank\";var o = e.getConnectedDataURL({ type: a, backgroundColor: i.get(\"backgroundColor\", !0) || t.get(\"backgroundColor\") || \"#fff\", excludeComponents: i.get(\"excludeComponents\"), pixelRatio: i.get(\"pixelRatio\") });if (r.href = o, (typeof MouseEvent === \"undefined\" ? \"undefined\" : _typeof(MouseEvent)) === ce) {\n        var s = new MouseEvent(\"click\", { view: window, bubbles: !0, cancelable: !1 });r.dispatchEvent(s);\n      } else {\n        var l = i.get(\"lang\"),\n            u = '<body style=\"margin:0;\"><img src=\"' + o + '\" style=\"max-width:100%;\" title=\"' + (l && l[0] || \"\") + '\" /></body>',\n            c = window.open();c.document.write(u);\n      }\n    }, t(\"../featureManager\").register(\"saveAsImage\", e), e;\n  }), e(\"echarts/component/toolbox/feature/MagicType\", [ai, ri, \"../../../echarts\", \"../featureManager\"], function (t) {\n    function e(t) {\n      this.model = t;\n    }var i = t(ri);e.defaultOption = { show: !0, type: [], icon: { line: \"M4.1,28.9h7.1l9.3-22l7.4,38l9.7-19.7l3,12.8h14.9M4.1,58h51.4\", bar: \"M6.7,22.9h10V48h-10V22.9zM24.9,13h10v35h-10V13zM43.2,2h10v46h-10V2zM3.1,58h53.7\", stack: \"M8.2,38.4l-8.4,4.1l30.6,15.3L60,42.5l-8.1-4.1l-21.5,11L8.2,38.4z M51.9,30l-8.1,4.2l-13.4,6.9l-13.9-6.9L8.2,30l-8.4,4.2l8.4,4.2l22.2,11l21.5-11l8.1-4.2L51.9,30z M51.9,21.7l-8.1,4.2L35.7,30l-5.3,2.8L24.9,30l-8.4-4.1l-8.3-4.2l-8.4,4.2L8.2,30l8.3,4.2l13.9,6.9l13.4-6.9l8.1-4.2l8.1-4.1L51.9,21.7zM30.4,2.2L-0.2,17.5l8.4,4.1l8.3,4.2l8.4,4.2l5.5,2.7l5.3-2.7l8.1-4.2l8.1-4.2l8.1-4.1L30.4,2.2z\", tiled: \"M2.3,2.2h22.8V25H2.3V2.2z M35,2.2h22.8V25H35V2.2zM2.3,35h22.8v22.8H2.3V35z M35,35h22.8v22.8H35V35z\" }, title: { line: \"切换为折线图\", bar: \"切换为柱状图\", stack: \"切换为堆叠\", tiled: \"切换为平铺\" }, option: {}, seriesIndex: {} };var n = e[Ue];n.getIcons = function () {\n      var t = this.model,\n          e = t.get(\"icon\"),\n          n = {};return i.each(t.get(\"type\"), function (t) {\n        e[t] && (n[t] = e[t]);\n      }), n;\n    };var r = { line: function line(t, e, n, r) {\n        return \"bar\" === t ? i.merge({ id: e, type: \"line\", data: n.get(\"data\"), stack: n.get(\"stack\"), markPoint: n.get(\"markPoint\"), markLine: n.get(\"markLine\") }, r.get(\"option.line\") || {}, !0) : void 0;\n      }, bar: function bar(t, e, n, r) {\n        return \"line\" === t ? i.merge({ id: e, type: \"bar\", data: n.get(\"data\"), stack: n.get(\"stack\"), markPoint: n.get(\"markPoint\"), markLine: n.get(\"markLine\") }, r.get(\"option.bar\") || {}, !0) : void 0;\n      }, stack: function stack(t, e, n, r) {\n        return \"line\" === t || \"bar\" === t ? i.merge({ id: e, stack: \"__ec_magicType_stack__\" }, r.get(\"option.stack\") || {}, !0) : void 0;\n      }, tiled: function tiled(t, e, n, r) {\n        return \"line\" === t || \"bar\" === t ? i.merge({ id: e, stack: \"\" }, r.get(\"option.tiled\") || {}, !0) : void 0;\n      } },\n        a = [[\"line\", \"bar\"], [\"stack\", \"tiled\"]];n.onclick = function (t, e, n) {\n      var o = this.model,\n          s = o.get(\"seriesIndex.\" + n);if (r[n]) {\n        var l = { series: [] },\n            u = function u(e) {\n          var a = e.subType,\n              s = e.id,\n              u = r[n](a, s, e, o);u && (i[Je](u, e[d]), l[Se].push(u));var c = e[ti];if (c && \"cartesian2d\" === c.type && (\"line\" === n || \"bar\" === n)) {\n            var h = c.getAxesByScale(G)[0];if (h) {\n              var f = h.dim,\n                  p = f + \"Axis\",\n                  v = t[F]({ mainType: p, index: e.get(name + \"Index\"), id: e.get(name + \"Id\") })[0],\n                  m = v[Z];l[p] = l[p] || [];for (var g = 0; m >= g; g++) {\n                l[p][m] = l[p][m] || {};\n              }l[p][m].boundaryGap = \"bar\" === n ? !0 : !1;\n            }\n          }\n        };i.each(a, function (t) {\n          i[se](t, n) >= 0 && i.each(t, function (t) {\n            o.setIconStatus(t, D);\n          });\n        }), o.setIconStatus(n, b), t[Be]({ mainType: \"series\", query: null == s ? null : { seriesIndex: s } }, u), e[Ce]({ type: \"changeMagicType\", currentType: n, newOption: l });\n      }\n    };var o = t(\"../../../echarts\");return o.registerAction({ type: \"changeMagicType\", event: \"magicTypeChanged\", update: \"prepareAndUpdate\" }, function (t, e) {\n      e[p](t.newOption);\n    }), t(\"../featureManager\").register(\"magicType\", e), e;\n  }), e(\"echarts/component/toolbox/feature/DataView\", [ai, ri, \"zrender/core/event\", \"../featureManager\", \"../../../echarts\"], function (t) {\n    function e(t) {\n      var e = {},\n          i = [],\n          n = [];return t.eachRawSeries(function (t) {\n        var r = t[ti];if (!r || \"cartesian2d\" !== r.type && \"polar\" !== r.type) i.push(t);else {\n          var a = r[E]();if (a.type === W) {\n            var o = a.dim + \"_\" + a.index;e[o] || (e[o] = { categoryAxis: a, valueAxis: r.getOtherAxis(a), series: [] }, n.push({ axisDim: a.dim, axisIndex: a.index })), e[o][Se].push(t);\n          } else i.push(t);\n        }\n      }), { seriesGroupByCategoryAxis: e, other: i, meta: n };\n    }function i(t) {\n      var e = [];return d.each(t, function (t) {\n        var i = t.categoryAxis,\n            n = t.valueAxis,\n            r = n.dim,\n            a = [\" \"][U](d.map(t[Se], function (t) {\n          return t.name;\n        })),\n            o = [i.model.getCategories()];d.each(t[Se], function (t) {\n          o.push(t.getRawData().mapArray(r, function (t) {\n            return t;\n          }));\n        });for (var s = [a.join(g)], l = 0; l < o[0][Ae]; l++) {\n          for (var u = [], c = 0; c < o[Ae]; c++) {\n            u.push(o[c][l]);\n          }s.push(u.join(g));\n        }e.push(s.join(\"\\n\"));\n      }), e.join(\"\\n\\n\" + m + \"\\n\\n\");\n    }function n(t) {\n      return d.map(t, function (t) {\n        var e = t.getRawData(),\n            i = [t.name],\n            n = [];return e.each(e[B], function () {\n          for (var t = arguments[Ae], r = arguments[t - 1], a = e[h](r), o = 0; t - 1 > o; o++) {\n            n[o] = arguments[o];\n          }i.push((a ? a + g : \"\") + n.join(g));\n        }), i.join(\"\\n\");\n      }).join(\"\\n\\n\" + m + \"\\n\\n\");\n    }function r(t) {\n      var r = e(t);return { value: d[le]([i(r.seriesGroupByCategoryAxis), n(r.other)], function (t) {\n          return t[fe](/[\\n\\t\\s]/g, \"\");\n        }).join(\"\\n\\n\" + m + \"\\n\\n\"), meta: r.meta };\n    }function a(t) {\n      return t[fe](/^\\s\\s*/, \"\")[fe](/\\s\\s*$/, \"\");\n    }function o(t) {\n      var e = t.slice(0, t[se](\"\\n\"));return e[se](g) >= 0 ? !0 : void 0;\n    }function s(t) {\n      for (var e = t.split(/\\n+/g), i = a(e.shift()).split(y), n = [], r = d.map(i, function (t) {\n        return { name: t, data: [] };\n      }), o = 0; o < e[Ae]; o++) {\n        var s = a(e[o]).split(y);n.push(s.shift());for (var l = 0; l < s[Ae]; l++) {\n          r[l] && (r[l].data[o] = s[l]);\n        }\n      }return { series: r, categories: n };\n    }function l(t) {\n      for (var e = t.split(/\\n+/g), i = a(e.shift()), n = [], r = 0; r < e[Ae]; r++) {\n        var o,\n            s = a(e[r]).split(y),\n            l = \"\",\n            u = !1;isNaN(s[0]) ? (u = !0, l = s[0], s = s.slice(1), n[r] = { name: l, value: [] }, o = n[r].value) : o = n[r] = [];for (var c = 0; c < s[Ae]; c++) {\n          o.push(+s[c]);\n        }1 === o[Ae] && (u ? n[r].value = o[0] : n[r] = o[0]);\n      }return { name: i, data: n };\n    }function u(t, e) {\n      var i = t.split(new RegExp(\"\\n*\" + m + \"\\n*\", \"g\")),\n          n = { series: [] };return d.each(i, function (t, i) {\n        if (o(t)) {\n          var r = s(t),\n              a = e[i],\n              u = a.axisDim + \"Axis\";a && (n[u] = n[u] || [], n[u][a.axisIndex] = { data: r.categories }, n[Se] = n[Se][U](r[Se]));\n        } else {\n          var r = l(t);n[Se].push(r);\n        }\n      }), n;\n    }function c(t) {\n      this._dom = null, this.model = t;\n    }function f(t, e) {\n      return d.map(t, function (t, i) {\n        var n = e && e[i];return d[Pe](n) && !d[he](n) ? (d[Pe](t) && !d[he](t) && (t = t.value), d[Je]({ value: t }, n)) : t;\n      });\n    }var d = t(ri),\n        v = t(\"zrender/core/event\"),\n        m = new Array(60).join(\"-\"),\n        g = \"\t\",\n        y = new RegExp(\"[\" + g + \"]+\", \"g\");return c.defaultOption = { show: !0, readOnly: !1, optionToContent: null, contentToOption: null, icon: \"M17.5,17.3H33 M17.5,17.3H33 M45.4,29.5h-28 M11.5,2v56H51V14.8L38.4,2H11.5z M38.4,2.2v12.7H51 M45.4,41.7h-28\", title: \"数据视图\", lang: [\"数据视图\", \"关闭\", \"刷新\"], backgroundColor: \"#fff\", textColor: \"#000\", textareaColor: \"#fff\", textareaBorderColor: \"#333\", buttonColor: \"#c23531\", buttonTextColor: \"#fff\" }, c[Ue].onclick = function (t, e) {\n      function i() {\n        n.removeChild(o), S._dom = null;\n      }var n = e.getDom(),\n          a = this.model;this._dom && n.removeChild(this._dom);var o = document[X](\"div\");o.style.cssText = \"position:absolute;left:5px;top:5px;bottom:5px;right:5px;\", o.style.backgroundColor = a.get(\"backgroundColor\") || \"#fff\";var s = document[X](\"h4\"),\n          l = a.get(\"lang\") || [];s.innerHTML = l[0] || a.get(\"title\"), s.style.cssText = \"margin: 10px 20px;\", s.style.color = a.get(\"textColor\");var c = document[X](\"div\"),\n          h = document[X](\"textarea\");c.style.cssText = \"display:block;width:100%;overflow:hidden;\";var f = a.get(\"optionToContent\"),\n          p = a.get(\"contentToOption\"),\n          m = r(t);if ((typeof f === \"undefined\" ? \"undefined\" : _typeof(f)) === ce) {\n        var y = f(e.getOption());(typeof y === \"undefined\" ? \"undefined\" : _typeof(y)) === je ? c.innerHTML = y : d.isDom(y) && c.appendChild(y);\n      } else c.appendChild(h), h.readOnly = a.get(\"readOnly\"), h.style.cssText = \"width:100%;height:100%;font-family:monospace;font-size:14px;line-height:1.6rem;\", h.style.color = a.get(\"textColor\"), h.style.borderColor = a.get(\"textareaBorderColor\"), h.style.backgroundColor = a.get(\"textareaColor\"), h.value = m.value;var x = m.meta,\n          _ = document[X](\"div\");_.style.cssText = \"position:absolute;bottom:0;left:0;right:0;\";var b = \"float:right;margin-right:20px;border:none;cursor:pointer;padding:2px 5px;font-size:12px;border-radius:3px\",\n          w = document[X](\"div\"),\n          M = document[X](\"div\");b += \";background-color:\" + a.get(\"buttonColor\"), b += \";color:\" + a.get(\"buttonTextColor\");var S = this;v.addEventListener(w, \"click\", i), v.addEventListener(M, \"click\", function () {\n        var t;try {\n          t = (typeof p === \"undefined\" ? \"undefined\" : _typeof(p)) === ce ? p(c, e.getOption()) : u(h.value, x);\n        } catch (n) {\n          throw i(), new Error(\"Data view format error \" + n);\n        }t && e[Ce]({ type: \"changeDataView\", newOption: t }), i();\n      }), w.innerHTML = l[1], M.innerHTML = l[2], M.style.cssText = b, w.style.cssText = b, !a.get(\"readOnly\") && _.appendChild(M), _.appendChild(w), v.addEventListener(h, \"keydown\", function (t) {\n        if (9 === (t.keyCode || t.which)) {\n          var e = this.value,\n              i = this.selectionStart,\n              n = this.selectionEnd;this.value = e.substring(0, i) + g + e.substring(n), this.selectionStart = this.selectionEnd = i + 1, v.stop(t);\n        }\n      }), o.appendChild(s), o.appendChild(c), o.appendChild(_), c.style[Re] = n.clientHeight - 80 + \"px\", n.appendChild(o), this._dom = o;\n    }, c[Ue][Le] = function (t, e) {\n      this._dom && e.getDom().removeChild(this._dom);\n    }, c[Ue].dispose = function (t, e) {\n      this[Le](t, e);\n    }, t(\"../featureManager\").register(\"dataView\", c), t(\"../../../echarts\").registerAction({ type: \"changeDataView\", event: \"dataViewChanged\", update: \"prepareAndUpdate\" }, function (t, e) {\n      var i = [];d.each(t.newOption[Se], function (t) {\n        var n = e.getSeriesByName(t.name)[0];if (n) {\n          var r = n.get(\"data\");i.push({ name: t.name, data: f(t.data, r) });\n        } else i.push(d[ke]({ type: \"scatter\" }, t));\n      }), e[p](d[Je]({ series: i }, t.newOption));\n    }), c;\n  }), e(\"echarts/component/toolbox/feature/DataZoom\", [ai, ri, \"../../helper/BrushController\", \"../../helper/brushHelper\", \"../../dataZoom/history\", \"../../dataZoomSelect\", \"../featureManager\", \"../../../echarts\"], function (t) {\n    function e(t, e, i) {\n      (this._brushController = new o(i.getZr())).on(\"brush\", a.bind(this._onBrush, this)).mount(), this._isZoomActive;\n    }function i(t) {\n      var e = {};return a.each([\"xAxisIndex\", \"yAxisIndex\"], function (i) {\n        e[i] = t[i], null == e[i] && (e[i] = \"all\"), (e[i] === !1 || \"none\" === e[i]) && (e[i] = []);\n      }), e;\n    }function n(t, e) {\n      t.setIconStatus(\"back\", u.count(e) > 1 ? b : D);\n    }function r(t, e, n, r) {\n      var a = n._isZoomActive;r && \"takeGlobalCursor\" === r.type && (a = \"dataZoomSelect\" === r.key ? r.dataZoomSelectActive : !1), n._isZoomActive = a, t.setIconStatus(\"zoom\", a ? b : D);var o = l.makeCoordInfoList(i(t[d]), e),\n          s = o.xAxisHas && !o.yAxisHas ? \"lineX\" : !o.xAxisHas && o.yAxisHas ? \"lineY\" : \"rect\";n._brushController.setPanels(l.makePanelOpts(o)).enableBrush(a ? { brushType: s, brushStyle: { lineWidth: 0, fill: \"rgba(0,0,0,0.2)\" } } : !1);\n    }var a = t(ri),\n        o = t(\"../../helper/BrushController\"),\n        l = t(\"../../helper/brushHelper\"),\n        u = t(\"../../dataZoom/history\"),\n        c = a.each;t(\"../../dataZoomSelect\");var h = \"\\x00_ec_\\x00toolbox-dataZoom_\";e.defaultOption = { show: !0, icon: { zoom: \"M0,13.5h26.9 M13.5,26.9V0 M32.1,13.5H58V58H13.5 V32.1\", back: \"M22,1.4L9.9,13.5l12.3,12.3 M10.3,13.5H54.9v44.6 H10.3v-26\" }, title: { zoom: \"区域缩放\", back: \"区域缩放还原\" } };var f = e[Ue];f.render = function (t, e, i, a) {\n      this.model = t, this[s] = e, this.api = i, r(t, e, this, a), n(t, e);\n    }, f.onclick = function (t, e, i) {\n      p[i].call(this);\n    }, f[Le] = function () {\n      this._brushController.unmount();\n    }, f.dispose = function () {\n      this._brushController.dispose();\n    };var p = { zoom: function zoom() {\n        var t = !this._isZoomActive;this.api[Ce]({ type: \"takeGlobalCursor\", key: \"dataZoomSelect\", dataZoomSelectActive: t });\n      }, back: function back() {\n        this._dispatchZoomAction(u.pop(this[s]));\n      } };return f._onBrush = function (t, e) {\n      function n(t, e, i) {\n        var n = r(t, i[t], o);n && (a[n.id] = { dataZoomId: n.id, startValue: e[0], endValue: e[1] });\n      }function r(t, e, i) {\n        var n;return i[Be]({ mainType: \"dataZoom\", subType: \"select\" }, function (r) {\n          var a = r.get(t + \"Index\");null != a && i.getComponent(t, a) === e && (n = r);\n        }), n;\n      }if (e.isEnd && t[Ae]) {\n        var a = {},\n            o = this[s];this._brushController.updateCovers([]);var c = l.makeCoordInfoList(i(this.model[d]), o),\n            h = [];l.parseOutputRanges(t, c, o, h);var f = t[0],\n            p = h[0],\n            v = f.coordRange,\n            m = f.brushType;if (p && v) if (\"rect\" === m) n(\"xAxis\", v[0], p), n(\"yAxis\", v[1], p);else {\n          var g = { lineX: \"xAxis\", lineY: \"yAxis\" };n(g[m], v, p);\n        }u.push(o, a), this._dispatchZoomAction(a);\n      }\n    }, f._dispatchZoomAction = function (t) {\n      var e = [];c(t, function (t) {\n        e.push(a.clone(t));\n      }), e[Ae] && this.api[Ce]({ type: \"dataZoom\", from: this.uid, batch: e });\n    }, t(\"../featureManager\").register(\"dataZoom\", e), t(\"../../../echarts\").registerPreprocessor(function (t) {\n      function e(t, e) {\n        if (e) {\n          var r = t + \"Index\",\n              o = e[r];null == o || \"all\" == o || a[he](o) || (o = o === !1 || \"none\" === o ? [] : [o]), i(t, function (e, i) {\n            if (null == o || \"all\" == o || -1 !== a[se](o, i)) {\n              var s = { type: \"select\", $fromToolbox: !0, id: h + t + i };s[r] = i, n.push(s);\n            }\n          });\n        }\n      }function i(e, i) {\n        var n = t[e];a[he](n) || (n = n ? [n] : []), c(n, i);\n      }if (t) {\n        var n = t.dataZoom || (t.dataZoom = []);a[he](n) || (t.dataZoom = n = [n]);var r = t.toolbox;if (r && (a[he](r) && (r = r[0]), r && r.feature)) {\n          var o = r.feature.dataZoom;e(\"xAxis\", o), e(\"yAxis\", o);\n        }\n      }\n    }), e;\n  }), e(\"echarts/component/toolbox/feature/Restore\", [ai, \"../../dataZoom/history\", \"../featureManager\", \"../../../echarts\"], function (t) {\n    function e(t) {\n      this.model = t;\n    }var i = t(\"../../dataZoom/history\");e.defaultOption = { show: !0, icon: \"M3.8,33.4 M47,18.9h9.8V8.7 M56.3,20.1 C52.1,9,40.5,0.6,26.8,2.1C12.6,3.7,1.6,16.2,2.1,30.6 M13,41.1H3.1v10.2 M3.7,39.9c4.2,11.1,15.8,19.5,29.5,18 c14.2-1.6,25.2-14.1,24.7-28.5\", title: \"还原\" };var n = e[Ue];return n.onclick = function (t, e) {\n      i.clear(t), e[Ce]({ type: \"restore\", from: this.uid });\n    }, t(\"../featureManager\").register(\"restore\", e), t(\"../../../echarts\").registerAction({ type: \"restore\", event: \"restore\", update: \"prepareAndUpdate\" }, function (t, e) {\n      e.resetOption(\"recreate\");\n    }), e;\n  }), e(\"zrender/vml/graphic\", [ai, \"../core/env\", \"../core/vector\", \"../core/BoundingRect\", \"../core/PathProxy\", \"../tool/color\", \"../contain/text\", \"../graphic/mixin/RectText\", \"../graphic/Displayable\", \"../graphic/Image\", \"../graphic/Text\", \"../graphic/Path\", \"../graphic/Gradient\", \"./core\"], function (t) {\n    if (!t(\"../core/env\")[Fe]) {\n      var e = t(\"../core/vector\"),\n          i = t(\"../core/BoundingRect\"),\n          r = t(\"../core/PathProxy\").CMD,\n          o = t(\"../tool/color\"),\n          s = t(\"../contain/text\"),\n          l = t(\"../graphic/mixin/RectText\"),\n          u = t(\"../graphic/Displayable\"),\n          c = t(\"../graphic/Image\"),\n          h = t(\"../graphic/Text\"),\n          d = t(\"../graphic/Path\"),\n          p = t(\"../graphic/Gradient\"),\n          v = t(\"./core\"),\n          m = Math.round,\n          g = Math.sqrt,\n          b = Math.abs,\n          w = Math.cos,\n          M = Math.sin,\n          S = Math.max,\n          T = e[_],\n          A = \",\",\n          C = \"progid:DXImageTransform.Microsoft\",\n          k = 21600,\n          L = k / 2,\n          P = 1e5,\n          z = 1e3,\n          I = function I(t) {\n        t.style.cssText = \"position:absolute;left:0;top:0;width:1px;height:1px;\", t.coordsize = k + \",\" + k, t.coordorigin = \"0,0\";\n      },\n          O = function O(t) {\n        return String(t)[fe](/&/g, \"&amp;\")[fe](/\"/g, \"&quot;\");\n      },\n          R = function R(t, e, i) {\n        return \"rgb(\" + [t, e, i].join(\",\") + \")\";\n      },\n          E = function E(t, e) {\n        e && t && e.parentNode !== t && t.appendChild(e);\n      },\n          N = function N(t, e) {\n        e && t && e.parentNode === t && t.removeChild(e);\n      },\n          B = function B(t, e, i) {\n        return (parseFloat(t) || 0) * P + (parseFloat(e) || 0) * z + i;\n      },\n          V = function V(t, e) {\n        return (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === je ? t.lastIndexOf(\"%\") >= 0 ? parseFloat(t) / 100 * e : parseFloat(t) : t;\n      },\n          F = function F(t, e, i) {\n        var n = o.parse(e);i = +i, isNaN(i) && (i = 1), n && (t.color = R(n[0], n[1], n[2]), t[Q] = i * n[3]);\n      },\n          H = function H(t) {\n        var e = o.parse(t);return [R(e[0], e[1], e[2]), e[3]];\n      },\n          G = function G(t, e, i) {\n        var n = e.fill;if (null != n) if (n instanceof p) {\n          var r,\n              o = 0,\n              s = [0, 0],\n              l = 0,\n              u = 1,\n              c = i[ee](),\n              h = c.width,\n              f = c[Re];if (\"linear\" === n.type) {\n            r = \"gradient\";var d = i[a],\n                v = [n.x * h, n.y * f],\n                m = [n.x2 * h, n.y2 * f];d && (T(v, v, d), T(m, m, d));var g = m[0] - v[0],\n                y = m[1] - v[1];o = 180 * Math.atan2(g, y) / Math.PI, 0 > o && (o += 360), 1e-6 > o && (o = 0);\n          } else {\n            r = \"gradientradial\";var v = [n.x * h, n.y * f],\n                d = i[a],\n                x = i.scale,\n                _ = h,\n                b = f;s = [(v[0] - c.x) / _, (v[1] - c.y) / b], d && T(v, v, d), _ /= x[0] * k, b /= x[1] * k;var w = S(_, b);l = 0 / w, u = 2 * n.r / w - l;\n          }var M = n.colorStops.slice();M.sort(function (t, e) {\n            return t.offset - e.offset;\n          });for (var A = M[Ae], C = [], L = [], P = 0; A > P; P++) {\n            var D = M[P],\n                z = H(D.color);L.push(D.offset * u + l + \" \" + z[0]), (0 === P || P === A - 1) && C.push(z);\n          }if (A >= 2) {\n            var I = C[0][0],\n                O = C[1][0],\n                R = C[0][1] * e[Q],\n                E = C[1][1] * e[Q];t.type = r, t.method = \"none\", t.focus = \"100%\", t.angle = o, t.color = I, t.color2 = O, t.colors = L.join(\",\"), t[Q] = E, t.opacity2 = R;\n          }\"radial\" === r && (t.focusposition = s.join(\",\"));\n        } else F(t, n, e[Q]);\n      },\n          Z = function Z(t, e) {\n        null != e.lineDash && (t.dashstyle = e.lineDash.join(\" \")), null == e[y] || e[y] instanceof p || F(t, e[y], e[Q]);\n      },\n          q = function q(t, e, i, n) {\n        var r = \"fill\" == e,\n            a = t.getElementsByTagName(e)[0];null != i[e] && \"none\" !== i[e] && (r || !r && i[x]) ? (t[r ? \"filled\" : \"stroked\"] = \"true\", i[e] instanceof p && N(t, a), a || (a = v.createNode(e)), r ? G(a, i, n) : Z(a, i), E(t, a)) : (t[r ? \"filled\" : \"stroked\"] = \"false\", N(t, a));\n      },\n          W = [[], [], []],\n          j = function j(t, e) {\n        var i,\n            n,\n            a,\n            o,\n            s,\n            l,\n            u = r.M,\n            c = r.C,\n            h = r.L,\n            f = r.A,\n            d = r.Q,\n            p = [];for (o = 0; o < t[Ae];) {\n          switch (a = t[o++], n = \"\", i = 0, a) {case u:\n              n = \" m \", i = 1, s = t[o++], l = t[o++], W[0][0] = s, W[0][1] = l;break;case h:\n              n = \" l \", i = 1, s = t[o++], l = t[o++], W[0][0] = s, W[0][1] = l;break;case d:case c:\n              n = \" c \", i = 3;var v,\n                  y,\n                  x = t[o++],\n                  _ = t[o++],\n                  b = t[o++],\n                  S = t[o++];a === d ? (v = b, y = S, b = (b + 2 * x) / 3, S = (S + 2 * _) / 3, x = (s + 2 * x) / 3, _ = (l + 2 * _) / 3) : (v = t[o++], y = t[o++]), W[0][0] = x, W[0][1] = _, W[1][0] = b, W[1][1] = S, W[2][0] = v, W[2][1] = y, s = v, l = y;break;case f:\n              var C = 0,\n                  P = 0,\n                  D = 1,\n                  z = 1,\n                  I = 0;e && (C = e[4], P = e[5], D = g(e[0] * e[0] + e[1] * e[1]), z = g(e[2] * e[2] + e[3] * e[3]), I = Math.atan2(-e[1] / z, e[0] / D));var O = t[o++],\n                  R = t[o++],\n                  E = t[o++],\n                  N = t[o++],\n                  B = t[o++] + I,\n                  V = t[o++] + B + I;o++;var F = t[o++],\n                  H = O + w(B) * E,\n                  G = R + M(B) * N,\n                  x = O + w(V) * E,\n                  _ = R + M(V) * N,\n                  Z = F ? \" wa \" : \" at \";Math.abs(H - x) < 1e-10 && (Math.abs(V - B) > .01 ? F && (H += 270 / k) : Math.abs(G - R) < 1e-10 ? F && O > H || !F && H > O ? _ -= 270 / k : _ += 270 / k : F && R > G || !F && G > R ? x += 270 / k : x -= 270 / k), p.push(Z, m(((O - E) * D + C) * k - L), A, m(((R - N) * z + P) * k - L), A, m(((O + E) * D + C) * k - L), A, m(((R + N) * z + P) * k - L), A, m((H * D + C) * k - L), A, m((G * z + P) * k - L), A, m((x * D + C) * k - L), A, m((_ * z + P) * k - L)), s = x, l = _;break;case r.R:\n              var q = W[0],\n                  j = W[1];q[0] = t[o++], q[1] = t[o++], j[0] = q[0] + t[o++], j[1] = q[1] + t[o++], e && (T(q, q, e), T(j, j, e)), q[0] = m(q[0] * k - L), j[0] = m(j[0] * k - L), q[1] = m(q[1] * k - L), j[1] = m(j[1] * k - L), p.push(\" m \", q[0], A, q[1], \" l \", j[0], A, q[1], \" l \", j[0], A, j[1], \" l \", q[0], A, j[1]);break;case r.Z:\n              p.push(\" x \");}if (i > 0) {\n            p.push(n);for (var U = 0; i > U; U++) {\n              var X = W[U];e && T(X, X, e), p.push(m(X[0] * k - L), A, m(X[1] * k - L), i - 1 > U ? A : \"\");\n            }\n          }\n        }return p.join(\"\");\n      };d[Ue].brushVML = function (t) {\n        var e = this.style,\n            i = this._vmlEl;i || (i = v.createNode(\"shape\"), I(i), this._vmlEl = i), q(i, \"fill\", e, this), q(i, y, e, this);var r = this[a],\n            o = null != r,\n            s = i.getElementsByTagName(y)[0];if (s) {\n          var l = e[x];if (o && !e.strokeNoScale) {\n            var u = r[0] * r[3] - r[1] * r[2];l *= g(b(u));\n          }s.weight = l + \"px\";\n        }var c = this.path;this.__dirtyPath && (c.beginPath(), this[n](c, this.shape), c.toStatic(), this.__dirtyPath = !1), i.path = j(c.data, this[a]), i.style.zIndex = B(this[de], this.z, this.z2), E(t, i), e.text ? this.drawRectText(t, this[ee]()) : this.removeRectText(t);\n      }, d[Ue].onRemove = function (t) {\n        N(t, this._vmlEl), this.removeRectText(t);\n      }, d[Ue].onAdd = function (t) {\n        E(t, this._vmlEl), this.appendRectText(t);\n      };var U = function U(t) {\n        return \"object\" == (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) && t.tagName && \"IMG\" === t.tagName.toUpperCase();\n      };c[Ue].brushVML = function (t) {\n        var e,\n            i,\n            n = this.style,\n            r = n.image;if (U(r)) {\n          var o = r.src;if (o === this._imageSrc) e = this._imageWidth, i = this._imageHeight;else {\n            var s = r.runtimeStyle,\n                l = s.width,\n                u = s[Re];s.width = \"auto\", s[Re] = \"auto\", e = r.width, i = r[Re], s.width = l, s[Re] = u, this._imageSrc = o, this._imageWidth = e, this._imageHeight = i;\n          }r = o;\n        } else r === this._imageSrc && (e = this._imageWidth, i = this._imageHeight);if (r) {\n          var c = n.x || 0,\n              h = n.y || 0,\n              f = n.width,\n              d = n[Re],\n              p = n.sWidth,\n              y = n.sHeight,\n              x = n.sx || 0,\n              _ = n.sy || 0,\n              b = p && y,\n              w = this._vmlEl;w || (w = v.doc[X](\"div\"), I(w), this._vmlEl = w);var M,\n              k = w.style,\n              L = !1,\n              P = 1,\n              D = 1;if (this[a] && (M = this[a], P = g(M[0] * M[0] + M[1] * M[1]), D = g(M[2] * M[2] + M[3] * M[3]), L = M[1] || M[2]), L) {\n            var z = [c, h],\n                O = [c + f, h],\n                R = [c, h + d],\n                N = [c + f, h + d];T(z, z, M), T(O, O, M), T(R, R, M), T(N, N, M);var V = S(z[0], O[0], R[0], N[0]),\n                F = S(z[1], O[1], R[1], N[1]),\n                H = [];H.push(\"M11=\", M[0] / P, A, \"M12=\", M[2] / D, A, \"M21=\", M[1] / P, A, \"M22=\", M[3] / D, A, \"Dx=\", m(c * P + M[4]), A, \"Dy=\", m(h * D + M[5])), k.padding = \"0 \" + m(V) + \"px \" + m(F) + \"px 0\", k[le] = C + \".Matrix(\" + H.join(\"\") + \", SizingMethod=clip)\";\n          } else M && (c = c * P + M[4], h = h * D + M[5]), k[le] = \"\", k.left = m(c) + \"px\", k.top = m(h) + \"px\";var G = this._imageEl,\n              Z = this._cropEl;G || (G = v.doc[X](\"div\"), this._imageEl = G);var q = G.style;if (b) {\n            if (e && i) q.width = m(P * e * f / p) + \"px\", q[Re] = m(D * i * d / y) + \"px\";else {\n              var W = new Image(),\n                  j = this;W.onload = function () {\n                W.onload = null, e = W.width, i = W[Re], q.width = m(P * e * f / p) + \"px\", q[Re] = m(D * i * d / y) + \"px\", j._imageWidth = e, j._imageHeight = i, j._imageSrc = r;\n              }, W.src = r;\n            }Z || (Z = v.doc[X](\"div\"), Z.style.overflow = \"hidden\", this._cropEl = Z);var Y = Z.style;Y.width = m((f + x * f / p) * P), Y[Re] = m((d + _ * d / y) * D), Y[le] = C + \".Matrix(Dx=\" + -x * f / p * P + \",Dy=\" + -_ * d / y * D + \")\", Z.parentNode || w.appendChild(Z), G.parentNode != Z && Z.appendChild(G);\n          } else q.width = m(P * f) + \"px\", q[Re] = m(D * d) + \"px\", w.appendChild(G), Z && Z.parentNode && (w.removeChild(Z), this._cropEl = null);var $ = \"\",\n              K = n[Q];1 > K && ($ += \".Alpha(opacity=\" + m(100 * K) + \") \"), $ += C + \".AlphaImageLoader(src=\" + r + \", SizingMethod=scale)\", q[le] = $, w.style.zIndex = B(this[de], this.z, this.z2), E(t, w), n.text && this.drawRectText(t, this[ee]());\n        }\n      }, c[Ue].onRemove = function (t) {\n        N(t, this._vmlEl), this._vmlEl = null, this._cropEl = null, this._imageEl = null, this.removeRectText(t);\n      }, c[Ue].onAdd = function (t) {\n        E(t, this._vmlEl), this.appendRectText(t);\n      };var Y,\n          $ = D,\n          K = {},\n          ie = 0,\n          ne = 100,\n          ae = document[X](\"div\"),\n          oe = function oe(t) {\n        var e = K[t];if (!e) {\n          ie > ne && (ie = 0, K = {});var i,\n              n = ae.style;try {\n            n.font = t, i = n.fontFamily.split(\",\")[0];\n          } catch (r) {}e = { style: n.fontStyle || $, variant: n.fontVariant || $, weight: n.fontWeight || $, size: 0 | parseFloat(n.fontSize || 12), family: i || \"Microsoft YaHei\" }, K[t] = e, ie++;\n        }return e;\n      };s.measureText = function (t, e) {\n        var i = v.doc;Y || (Y = i[X](\"div\"), Y.style.cssText = \"position:absolute;top:-20000px;left:0;padding:0;margin:0;border:none;white-space:pre;\", v.doc.body.appendChild(Y));try {\n          Y.style.font = e;\n        } catch (n) {}return Y.innerHTML = \"\", Y.appendChild(i.createTextNode(t)), { width: Y.offsetWidth };\n      };for (var se = new i(), ue = function ue(t, e, i, n) {\n        var r = this.style,\n            o = r.text;if (o) {\n          var l,\n              u,\n              c = r[re],\n              h = oe(r.textFont),\n              d = h.style + \" \" + h.variant + \" \" + h.weight + \" \" + h.size + 'px \"' + h.family + '\"',\n              p = r.textBaseline,\n              g = r.textVerticalAlign;i = i || s[ee](o, d, c, p);var x = this[a];if (x && !n && (se.copy(e), se[_](x), e = se), n) l = e.x, u = e.y;else {\n            var b = r.textPosition,\n                w = r.textDistance;if (b instanceof Array) l = e.x + V(b[0], e.width), u = e.y + V(b[1], e[Re]), c = c || \"left\", p = p || \"top\";else {\n              var M = s.adjustTextPositionOnRect(b, e, i, w);l = M.x, u = M.y, c = c || M[re], p = p || M.textBaseline;\n            }\n          }if (g) {\n            switch (g) {case te:\n                u -= i[Re] / 2;break;case Ee:\n                u -= i[Re];}p = \"top\";\n          }var S = h.size;switch (p) {case \"hanging\":case \"top\":\n              u += S / 1.75;break;case te:\n              break;default:\n              u -= S / 2.25;}switch (c) {case \"left\":\n              break;case J:\n              l -= i.width / 2;break;case \"right\":\n              l -= i.width;}var C,\n              k,\n              L,\n              P = v.createNode,\n              D = this._textVmlEl;D ? (L = D.firstChild, C = L.nextSibling, k = C.nextSibling) : (D = P(\"line\"), C = P(\"path\"), k = P(\"textpath\"), L = P(\"skew\"), k.style[\"v-text-align\"] = \"left\", I(D), C.textpathok = !0, k.on = !0, D.from = \"0 0\", D.to = \"1000 0.05\", E(D, L), E(D, C), E(D, k), this._textVmlEl = D);var z = [l, u],\n              R = D.style;x && n ? (T(z, z, x), L.on = !0, L.matrix = x[0][f](3) + A + x[2][f](3) + A + x[1][f](3) + A + x[3][f](3) + \",0,0\", L.offset = (m(z[0]) || 0) + \",\" + (m(z[1]) || 0), L.origin = \"0 0\", R.left = \"0px\", R.top = \"0px\") : (L.on = !1, R.left = m(l) + \"px\", R.top = m(u) + \"px\"), k[je] = O(o);try {\n            k.style.font = d;\n          } catch (N) {}q(D, \"fill\", { fill: n ? r.fill : r.textFill, opacity: r[Q] }, this), q(D, y, { stroke: n ? r[y] : r.textStroke, opacity: r[Q], lineDash: r.lineDash }, this), D.style.zIndex = B(this[de], this.z, this.z2), E(t, D);\n        }\n      }, ce = function ce(t) {\n        N(t, this._textVmlEl), this._textVmlEl = null;\n      }, he = function he(t) {\n        E(t, this._textVmlEl);\n      }, pe = [l, u, c, d, h], ve = 0; ve < pe[Ae]; ve++) {\n        var me = pe[ve][Ue];me.drawRectText = ue, me.removeRectText = ce, me.appendRectText = he;\n      }h[Ue].brushVML = function (t) {\n        var e = this.style;e.text ? this.drawRectText(t, { x: e.x || 0, y: e.y || 0, width: 0, height: 0 }, this[ee](), !0) : this.removeRectText(t);\n      }, h[Ue].onRemove = function (t) {\n        this.removeRectText(t);\n      }, h[Ue].onAdd = function (t) {\n        this.appendRectText(t);\n      };\n    }\n  }), e(\"zrender/vml/Painter\", [ai, \"../core/log\", \"./core\"], function (t) {\n    function e(t) {\n      return parseInt(t, 10);\n    }function n(t, e) {\n      o.initVML(), this.root = t, this[Ve] = e;var i = document[X](\"div\"),\n          n = document[X](\"div\");i.style.cssText = \"display:inline-block;overflow:hidden;position:relative;width:300px;height:150px;\", n.style.cssText = \"position:absolute;left:0;top:0;\", t.appendChild(i), this._vmlRoot = n, this._vmlViewport = i, this[We]();var r = e.delFromMap,\n          a = e.addToMap;e.delFromMap = function (t) {\n        var i = e.get(t);r.call(e, t), i && i.onRemove && i.onRemove(n);\n      }, e.addToMap = function (t) {\n        t.onAdd && t.onAdd(n), a.call(e, t);\n      }, this._firstPaint = !0;\n    }function r(t) {\n      return function () {\n        a('In IE8.0 VML mode painter not support method \"' + t + '\"');\n      };\n    }var a = t(\"../core/log\"),\n        o = t(\"./core\");n[Ue] = { constructor: n, getViewportRoot: function getViewportRoot() {\n        return this._vmlViewport;\n      }, refresh: function refresh() {\n        var t = this[Ve].getDisplayList(!0, !0);this._paintList(t);\n      }, _paintList: function _paintList(t) {\n        for (var e = this._vmlRoot, n = 0; n < t[Ae]; n++) {\n          var r = t[n];r.invisible || r[Ne] ? (r.__alreadyNotVisible || r.onRemove(e), r.__alreadyNotVisible = !0) : (r.__alreadyNotVisible && r.onAdd(e), r.__alreadyNotVisible = !1, r[i] && (r.beforeBrush && r.beforeBrush(), (r.brushVML || r.brush).call(r, e), r.afterBrush && r.afterBrush())), r[i] = !1;\n        }this._firstPaint && (this._vmlViewport.appendChild(e), this._firstPaint = !1);\n      }, resize: function resize() {\n        var t = this._getWidth(),\n            e = this._getHeight();if (this._width != t && this._height != e) {\n          this._width = t, this._height = e;var i = this._vmlViewport.style;i.width = t + \"px\", i[Re] = e + \"px\";\n        }\n      }, dispose: function dispose() {\n        this.root.innerHTML = \"\", this._vmlRoot = this._vmlViewport = this[Ve] = null;\n      }, getWidth: function getWidth() {\n        return this._width;\n      }, getHeight: function getHeight() {\n        return this._height;\n      }, clear: function clear() {\n        this.root.removeChild(this.vmlViewport);\n      }, _getWidth: function _getWidth() {\n        var t = this.root,\n            i = t.currentStyle;return (t.clientWidth || e(i.width)) - e(i.paddingLeft) - e(i.paddingRight) | 0;\n      }, _getHeight: function _getHeight() {\n        var t = this.root,\n            i = t.currentStyle;return (t.clientHeight || e(i[Re])) - e(i.paddingTop) - e(i.paddingBottom) | 0;\n      } };for (var s = [\"getLayer\", \"insertLayer\", \"eachLayer\", \"eachBuildinLayer\", \"eachOtherLayer\", \"getLayers\", \"modLayer\", \"delLayer\", \"clearLayer\", \"toDataURL\", \"pathToImage\"], l = 0; l < s[Ae]; l++) {\n      var u = s[l];n[Ue][u] = r(u);\n    }return n;\n  }), e(\"echarts/scale/Interval\", [ai, \"../util/number\", \"../util/format\", \"./Scale\"], function (t) {\n    var e = t(\"../util/number\"),\n        i = t(\"../util/format\"),\n        n = t(\"./Scale\"),\n        r = Math.floor,\n        a = Math.ceil,\n        o = e.getPrecisionSafe,\n        s = e.round,\n        l = n[ke]({ type: \"interval\", _interval: 0, setExtent: function setExtent(t, e) {\n        var i = this._extent;\n        isNaN(t) || (i[0] = parseFloat(t)), isNaN(e) || (i[1] = parseFloat(e));\n      }, unionExtent: function unionExtent(t) {\n        var e = this._extent;t[0] < e[0] && (e[0] = t[0]), t[1] > e[1] && (e[1] = t[1]), l[Ue].setExtent.call(this, e[0], e[1]);\n      }, getInterval: function getInterval() {\n        return this._interval || this.niceTicks(), this._interval;\n      }, setInterval: function setInterval(t) {\n        this._interval = t, this._niceExtent = this._extent.slice();\n      }, getTicks: function getTicks() {\n        this._interval || this.niceTicks();var t = this._interval,\n            e = this._extent,\n            i = [],\n            n = 1e4;if (t) {\n          var r = this._niceExtent,\n              a = o(t) + 2;e[0] < r[0] && i.push(e[0]);for (var l = r[0]; l <= r[1];) {\n            if (i.push(l), l = s(l + t, a), i[Ae] > n) return [];\n          }e[1] > r[1] && i.push(e[1]);\n        }return i;\n      }, getTicksLabels: function getTicksLabels() {\n        for (var t = [], e = this.getTicks(), i = 0; i < e[Ae]; i++) {\n          t.push(this.getLabel(e[i]));\n        }return t;\n      }, getLabel: function getLabel(t) {\n        return i.addCommas(t);\n      }, niceTicks: function niceTicks(t) {\n        t = t || 5;var i = this._extent,\n            n = i[1] - i[0];if (isFinite(n)) {\n          0 > n && (n = -n, i.reverse());var l = s(e.nice(n / t, !0), Math.max(o(i[0]), o(i[1])) + 2),\n              u = o(l) + 2,\n              c = [s(a(i[0] / l) * l, u), s(r(i[1] / l) * l, u)];this._interval = l, this._niceExtent = c;\n        }\n      }, niceExtent: function niceExtent(t, e, i) {\n        var n = this._extent;if (n[0] === n[1]) if (0 !== n[0]) {\n          var o = n[0];i ? n[0] -= o / 2 : (n[1] += o / 2, n[0] -= o / 2);\n        } else n[1] = 1;var l = n[1] - n[0];isFinite(l) || (n[0] = 0, n[1] = 1), this.niceTicks(t);var u = this._interval;e || (n[0] = s(r(n[0] / u) * u)), i || (n[1] = s(a(n[1] / u) * u));\n      } });return l[Oe] = function () {\n      return new l();\n    }, l;\n  }), e(\"echarts/scale/Scale\", [ai, \"../util/clazz\"], function (t) {\n    function e() {\n      this._extent = [1 / 0, -1 / 0], this._interval = 0, this.init && this.init.apply(this, arguments);\n    }var i = t(\"../util/clazz\"),\n        n = e[Ue];return n.parse = function (t) {\n      return t;\n    }, n[$] = function (t) {\n      var e = this._extent;return t >= e[0] && t <= e[1];\n    }, n[Y] = function (t) {\n      var e = this._extent;return e[1] === e[0] ? .5 : (t - e[0]) / (e[1] - e[0]);\n    }, n.scale = function (t) {\n      var e = this._extent;return t * (e[1] - e[0]) + e[0];\n    }, n.unionExtent = function (t) {\n      var e = this._extent;t[0] < e[0] && (e[0] = t[0]), t[1] > e[1] && (e[1] = t[1]);\n    }, n[j] = function () {\n      return this._extent.slice();\n    }, n.setExtent = function (t, e) {\n      var i = this._extent;isNaN(t) || (i[0] = t), isNaN(e) || (i[1] = e);\n    }, n.getTicksLabels = function () {\n      for (var t = [], e = this.getTicks(), i = 0; i < e[Ae]; i++) {\n        t.push(this.getLabel(e[i]));\n      }return t;\n    }, i.enableClassExtend(e), i.enableClassManagement(e, { registerWhenExtend: !0 }), e;\n  }), e(\"echarts/coord/axisHelper\", [ai, \"../scale/Ordinal\", \"../scale/Interval\", \"../scale/Time\", \"../scale/Log\", \"../scale/Scale\", \"../util/number\", ri, \"zrender/contain/text\"], function (t) {\n    var e = t(\"../scale/Ordinal\"),\n        i = t(\"../scale/Interval\");t(\"../scale/Time\"), t(\"../scale/Log\");var n = t(\"../scale/Scale\"),\n        r = t(\"../util/number\"),\n        a = t(ri),\n        o = t(\"zrender/contain/text\"),\n        s = {};return s.getScaleExtent = function (t, e) {\n      var i = t.scale,\n          n = i[j](),\n          o = n[1] - n[0];if (i.type === G) return isFinite(o) ? n : [0, 0];var s = e.getMin ? e.getMin() : e.get(\"min\"),\n          l = e.getMax ? e.getMax() : e.get(\"max\"),\n          u = e.getNeedCrossZero ? e.getNeedCrossZero() : !e.get(\"scale\"),\n          c = e.get(\"boundaryGap\");a[he](c) || (c = [c || 0, c || 0]), c[0] = r[R](c[0], 1), c[1] = r[R](c[1], 1);var h = !0,\n          f = !0;return null == s && (s = n[0] - c[0] * o, h = !1), null == l && (l = n[1] + c[1] * o, f = !1), \"dataMin\" === s && (s = n[0]), \"dataMax\" === l && (l = n[1]), u && (s > 0 && l > 0 && !h && (s = 0), 0 > s && 0 > l && !f && (l = 0)), [s, l];\n    }, s.niceScaleExtent = function (t, e) {\n      var i = t.scale,\n          n = s.getScaleExtent(t, e),\n          r = null != (e.getMin ? e.getMin() : e.get(\"min\")),\n          a = null != (e.getMax ? e.getMax() : e.get(\"max\")),\n          o = e.get(\"splitNumber\");\"log\" === i.type && (i.base = e.get(\"logBase\")), i.setExtent(n[0], n[1]), i.niceExtent(o, r, a);var l = e.get(\"minInterval\");if (isFinite(l) && !r && !a && \"interval\" === i.type) {\n        var u = i.getInterval(),\n            c = Math.max(Math.abs(u), l) / u;n = i[j](), i.setExtent(c * n[0], n[1] * c), i.niceExtent(o);\n      }var u = e.get(\"interval\");null != u && i.setInterval && i.setInterval(u);\n    }, s.createScaleByModel = function (t, r) {\n      if (r = r || t.get(\"type\")) switch (r) {case W:\n          return new e(t.getCategories(), [1 / 0, -1 / 0]);case \"value\":\n          return new i();default:\n          return (n.getClass(r) || i)[Oe](t);}\n    }, s.ifAxisCrossZero = function (t) {\n      var e = t.scale[j](),\n          i = e[0],\n          n = e[1];return !(i > 0 && n > 0 || 0 > i && 0 > n);\n    }, s.getAxisLabelInterval = function (t, e, i, n) {\n      var r,\n          a = 0,\n          s = 0,\n          l = 1;e[Ae] > 40 && (l = Math.floor(e[Ae] / 40));for (var u = 0; u < t[Ae]; u += l) {\n        var c = t[u],\n            h = o[ee](e[u], i, J, \"top\");h[n ? \"x\" : \"y\"] += c, h[n ? \"width\" : Re] *= 1.3, r ? r.intersect(h) ? (s++, a = Math.max(a, s)) : (r.union(h), s = 0) : r = h.clone();\n      }return 0 === a && l > 1 ? l : (a + 1) * l - 1;\n    }, s.getFormattedLabels = function (t, e) {\n      var i = t.scale,\n          n = i.getTicksLabels(),\n          r = i.getTicks();return (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) === je ? (e = function (t) {\n        return function (e) {\n          return t[fe](\"{value}\", e);\n        };\n      }(e), a.map(n, e)) : (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) === ce ? a.map(r, function (n, r) {\n        return e(t.type === W ? i.getLabel(n) : n, r);\n      }, this) : n;\n    }, s;\n  }), e(\"echarts/coord/cartesian/Axis2D\", [ai, ri, \"../Axis\", \"./axisLabelInterval\"], function (t) {\n    var e = t(ri),\n        i = t(\"../Axis\"),\n        n = t(\"./axisLabelInterval\"),\n        r = function r(t, e, n, _r, a) {\n      i.call(this, t, e, n), this.type = _r || \"value\", this[K] = a || Ee;\n    };return r[Ue] = { constructor: r, index: 0, onZero: !1, model: null, isHorizontal: function isHorizontal() {\n        var t = this[K];return \"top\" === t || t === Ee;\n      }, getGlobalExtent: function getGlobalExtent() {\n        var t = this[j]();return t[0] = this[H](t[0]), t[1] = this[H](t[1]), t;\n      }, getLabelInterval: function getLabelInterval() {\n        var t = this._labelInterval;return t || (t = this._labelInterval = n(this)), t;\n      }, isLabelIgnored: function isLabelIgnored(t) {\n        if (this.type === W) {\n          var e = this.getLabelInterval();return (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) === ce && !e(t, this.scale.getLabel(t)) || t % (e + 1);\n        }\n      }, toLocalCoord: null, toGlobalCoord: null }, e[oe](r, i), r;\n  }), e(\"echarts/coord/cartesian/Cartesian2D\", [ai, ri, \"./Cartesian\"], function (t) {\n    function e(t) {\n      n.call(this, t);\n    }var i = t(ri),\n        n = t(\"./Cartesian\");return e[Ue] = { constructor: e, type: \"cartesian2d\", dimensions: [\"x\", \"y\"], getBaseAxis: function getBaseAxis() {\n        return this.getAxesByScale(G)[0] || this.getAxesByScale(\"time\")[0] || this[q](\"x\");\n      }, containPoint: function containPoint(t) {\n        var e = this[q](\"x\"),\n            i = this[q](\"y\");return e[$](e.toLocalCoord(t[0])) && i[$](i.toLocalCoord(t[1]));\n      }, containData: function containData(t) {\n        return this[q](\"x\").containData(t[0]) && this[q](\"y\").containData(t[1]);\n      }, dataToPoints: function dataToPoints(t, e) {\n        return t.mapArray([\"x\", \"y\"], function (t, e) {\n          return this[N]([t, e]);\n        }, e, this);\n      }, dataToPoint: function dataToPoint(t, e) {\n        var i = this[q](\"x\"),\n            n = this[q](\"y\");return [i[H](i[O](t[0], e)), n[H](n[O](t[1], e))];\n      }, pointToData: function pointToData(t, e) {\n        var i = this[q](\"x\"),\n            n = this[q](\"y\");return [i.coordToData(i.toLocalCoord(t[0]), e), n.coordToData(n.toLocalCoord(t[1]), e)];\n      }, getOtherAxis: function getOtherAxis(t) {\n        return this[q](\"x\" === t.dim ? \"y\" : \"x\");\n      } }, i[oe](e, n), e;\n  }), e(\"echarts/coord/cartesian/GridModel\", [ai, \"./AxisModel\", \"../../model/Component\"], function (t) {\n    t(\"./AxisModel\");var e = t(\"../../model/Component\");return e[ke]({ type: \"grid\", dependencies: [\"xAxis\", \"yAxis\"], layoutMode: \"box\", coordinateSystem: null, defaultOption: { show: !1, zlevel: 0, z: 0, left: \"10%\", top: 60, right: \"10%\", bottom: 60, containLabel: !1, backgroundColor: \"rgba(0,0,0,0)\", borderWidth: 1, borderColor: \"#ccc\" } });\n  }), e(\"zrender/tool/path\", [ai, \"../graphic/Path\", \"../core/PathProxy\", \"./transformPath\", \"../core/matrix\"], function (t) {\n    function e(t, e, i, n, r, a, o, s, l, u, c) {\n      var v = l * (p / 180),\n          y = d(v) * (t - i) / 2 + f(v) * (e - n) / 2,\n          x = -1 * f(v) * (t - i) / 2 + d(v) * (e - n) / 2,\n          _ = y * y / (o * o) + x * x / (s * s);_ > 1 && (o *= h(_), s *= h(_));var b = (r === a ? -1 : 1) * h((o * o * s * s - o * o * x * x - s * s * y * y) / (o * o * x * x + s * s * y * y)) || 0,\n          w = b * o * x / s,\n          M = b * -s * y / o,\n          S = (t + i) / 2 + d(v) * w - f(v) * M,\n          T = (e + n) / 2 + f(v) * w + d(v) * M,\n          A = g([1, 0], [(y - w) / o, (x - M) / s]),\n          C = [(y - w) / o, (x - M) / s],\n          k = [(-1 * y - w) / o, (-1 * x - M) / s],\n          L = g(C, k);m(C, k) <= -1 && (L = p), m(C, k) >= 1 && (L = 0), 0 === a && L > 0 && (L -= 2 * p), 1 === a && 0 > L && (L += 2 * p), c.addData(u, S, T, o, s, A, L, v, a);\n    }function r(t) {\n      if (!t) return [];var i,\n          n = t[fe](/-/g, \" -\")[fe](/  /g, \" \")[fe](/ /g, \",\")[fe](/,,/g, \",\");for (i = 0; i < c[Ae]; i++) {\n        n = n[fe](new RegExp(c[i], \"g\"), \"|\" + c[i]);\n      }var r,\n          a = n.split(\"|\"),\n          o = 0,\n          l = 0,\n          u = new s(),\n          h = s.CMD;for (i = 1; i < a[Ae]; i++) {\n        var f,\n            d = a[i],\n            p = d.charAt(0),\n            v = 0,\n            m = d.slice(1)[fe](/e,-/g, \"e-\").split(\",\");m[Ae] > 0 && \"\" === m[0] && m.shift();for (var g = 0; g < m[Ae]; g++) {\n          m[g] = parseFloat(m[g]);\n        }for (; v < m[Ae] && !isNaN(m[v]) && !isNaN(m[0]);) {\n          var y,\n              x,\n              _,\n              b,\n              w,\n              M,\n              S,\n              T = o,\n              A = l;switch (p) {case \"l\":\n              o += m[v++], l += m[v++], f = h.L, u.addData(f, o, l);break;case \"L\":\n              o = m[v++], l = m[v++], f = h.L, u.addData(f, o, l);break;case \"m\":\n              o += m[v++], l += m[v++], f = h.M, u.addData(f, o, l), p = \"l\";break;case \"M\":\n              o = m[v++], l = m[v++], f = h.M, u.addData(f, o, l), p = \"L\";break;case \"h\":\n              o += m[v++], f = h.L, u.addData(f, o, l);break;case \"H\":\n              o = m[v++], f = h.L, u.addData(f, o, l);break;case \"v\":\n              l += m[v++], f = h.L, u.addData(f, o, l);break;case \"V\":\n              l = m[v++], f = h.L, u.addData(f, o, l);break;case \"C\":\n              f = h.C, u.addData(f, m[v++], m[v++], m[v++], m[v++], m[v++], m[v++]), o = m[v - 2], l = m[v - 1];break;case \"c\":\n              f = h.C, u.addData(f, m[v++] + o, m[v++] + l, m[v++] + o, m[v++] + l, m[v++] + o, m[v++] + l), o += m[v - 2], l += m[v - 1];break;case \"S\":\n              y = o, x = l;var C = u.len(),\n                  k = u.data;r === h.C && (y += o - k[C - 4], x += l - k[C - 3]), f = h.C, T = m[v++], A = m[v++], o = m[v++], l = m[v++], u.addData(f, y, x, T, A, o, l);break;case \"s\":\n              y = o, x = l;var C = u.len(),\n                  k = u.data;r === h.C && (y += o - k[C - 4], x += l - k[C - 3]), f = h.C, T = o + m[v++], A = l + m[v++], o += m[v++], l += m[v++], u.addData(f, y, x, T, A, o, l);break;case \"Q\":\n              T = m[v++], A = m[v++], o = m[v++], l = m[v++], f = h.Q, u.addData(f, T, A, o, l);break;case \"q\":\n              T = m[v++] + o, A = m[v++] + l, o += m[v++], l += m[v++], f = h.Q, u.addData(f, T, A, o, l);break;case \"T\":\n              y = o, x = l;var C = u.len(),\n                  k = u.data;r === h.Q && (y += o - k[C - 4], x += l - k[C - 3]), o = m[v++], l = m[v++], f = h.Q, u.addData(f, y, x, o, l);break;case \"t\":\n              y = o, x = l;var C = u.len(),\n                  k = u.data;r === h.Q && (y += o - k[C - 4], x += l - k[C - 3]), o += m[v++], l += m[v++], f = h.Q, u.addData(f, y, x, o, l);break;case \"A\":\n              _ = m[v++], b = m[v++], w = m[v++], M = m[v++], S = m[v++], T = o, A = l, o = m[v++], l = m[v++], f = h.A, e(T, A, o, l, M, S, _, b, w, f, u);break;case \"a\":\n              _ = m[v++], b = m[v++], w = m[v++], M = m[v++], S = m[v++], T = o, A = l, o += m[v++], l += m[v++], f = h.A, e(T, A, o, l, M, S, _, b, w, f, u);}\n        }(\"z\" === p || \"Z\" === p) && (f = h.Z, u.addData(f)), r = f;\n      }return u.toStatic(), u;\n    }function a(t, e) {\n      var i,\n          a = r(t);return e = e || {}, e[n] = function (t) {\n        t.setData(a.data), i && l(t, i);var e = t.getContext();e && t.rebuildPath(e);\n      }, e[_] = function (t) {\n        i || (i = u[Oe]()), u.mul(i, t, i), this.dirty(!0);\n      }, e;\n    }var o = t(\"../graphic/Path\"),\n        s = t(\"../core/PathProxy\"),\n        l = t(\"./transformPath\"),\n        u = t(\"../core/matrix\"),\n        c = [\"m\", \"M\", \"l\", \"L\", \"v\", \"V\", \"h\", \"H\", \"z\", \"Z\", \"c\", \"C\", \"q\", \"Q\", \"t\", \"T\", \"s\", \"S\", \"a\", \"A\"],\n        h = Math.sqrt,\n        f = Math.sin,\n        d = Math.cos,\n        p = Math.PI,\n        v = function v(t) {\n      return Math.sqrt(t[0] * t[0] + t[1] * t[1]);\n    },\n        m = function m(t, e) {\n      return (t[0] * e[0] + t[1] * e[1]) / (v(t) * v(e));\n    },\n        g = function g(t, e) {\n      return (t[0] * e[1] < t[1] * e[0] ? -1 : 1) * Math.acos(m(t, e));\n    };return { createFromString: function createFromString(t, e) {\n        return new o(a(t, e));\n      }, extendFromString: function extendFromString(t, e) {\n        return o[ke](a(t, e));\n      }, mergePath: function mergePath(t, e) {\n        for (var r = [], a = t[Ae], s = 0; a > s; s++) {\n          var l = t[s];l[i] && l[n](l.path, l.shape, !0), r.push(l.path);\n        }var u = new o(e);return u[n] = function (t) {\n          t.appendPath(r);var e = t.getContext();e && t.rebuildPath(e);\n        }, u;\n      } };\n  }), e(\"zrender/container/Group\", [ai, \"../core/util\", \"../Element\", \"../core/BoundingRect\"], function (t) {\n    var e = t(\"../core/util\"),\n        n = t(\"../Element\"),\n        r = t(\"../core/BoundingRect\"),\n        a = function a(t) {\n      t = t || {}, n.call(this, t);for (var e in t) {\n        this[e] = t[e];\n      }this._children = [], this.__storage = null, this[i] = !0;\n    };return a[Ue] = { constructor: a, isGroup: !0, type: \"group\", silent: !1, children: function children() {\n        return this._children.slice();\n      }, childAt: function childAt(t) {\n        return this._children[t];\n      }, childOfName: function childOfName(t) {\n        for (var e = this._children, i = 0; i < e[Ae]; i++) {\n          if (e[i].name === t) return e[i];\n        }\n      }, childCount: function childCount() {\n        return this._children[Ae];\n      }, add: function add(t) {\n        return t && t !== this && t[m] !== this && (this._children.push(t), this._doAdd(t)), this;\n      }, addBefore: function addBefore(t, e) {\n        if (t && t !== this && t[m] !== this && e && e[m] === this) {\n          var i = this._children,\n              n = i[se](e);n >= 0 && (i[Me](n, 0, t), this._doAdd(t));\n        }return this;\n      }, _doAdd: function _doAdd(t) {\n        t[m] && t[m][Le](t), t[m] = this;var e = this.__storage,\n            i = this.__zr;e && e !== t.__storage && (e.addToMap(t), t instanceof a && t.addChildrenToStorage(e)), i && i.refresh();\n      }, remove: function remove(t) {\n        var i = this.__zr,\n            n = this.__storage,\n            r = this._children,\n            o = e[se](r, t);return 0 > o ? this : (r[Me](o, 1), t[m] = null, n && (n.delFromMap(t.id), t instanceof a && t.delChildrenFromStorage(n)), i && i.refresh(), this);\n      }, removeAll: function removeAll() {\n        var t,\n            e,\n            i = this._children,\n            n = this.__storage;for (e = 0; e < i[Ae]; e++) {\n          t = i[e], n && (n.delFromMap(t.id), t instanceof a && t.delChildrenFromStorage(n)), t[m] = null;\n        }return i[Ae] = 0, this;\n      }, eachChild: function eachChild(t, e) {\n        for (var i = this._children, n = 0; n < i[Ae]; n++) {\n          var r = i[n];t.call(e, r, n);\n        }return this;\n      }, traverse: function traverse(t, e) {\n        for (var i = 0; i < this._children[Ae]; i++) {\n          var n = this._children[i];t.call(e, n), \"group\" === n.type && n[ve](t, e);\n        }return this;\n      }, addChildrenToStorage: function addChildrenToStorage(t) {\n        for (var e = 0; e < this._children[Ae]; e++) {\n          var i = this._children[e];t.addToMap(i), i instanceof a && i.addChildrenToStorage(t);\n        }\n      }, delChildrenFromStorage: function delChildrenFromStorage(t) {\n        for (var e = 0; e < this._children[Ae]; e++) {\n          var i = this._children[e];t.delFromMap(i.id), i instanceof a && i.delChildrenFromStorage(t);\n        }\n      }, dirty: function dirty() {\n        return this[i] = !0, this.__zr && this.__zr.refresh(), this;\n      }, getBoundingRect: function getBoundingRect(t) {\n        for (var e = null, i = new r(0, 0, 0, 0), n = t || this._children, a = [], o = 0; o < n[Ae]; o++) {\n          var s = n[o];if (!s[Ne] && !s.invisible) {\n            var l = s[ee](),\n                u = s.getLocalTransform(a);u ? (i.copy(l), i[_](u), e = e || i.clone(), e.union(i)) : (e = e || l.clone(), e.union(l));\n          }\n        }return e || i;\n      } }, e[oe](a, n), a;\n  }), e(\"zrender/graphic/Image\", [ai, \"./Displayable\", \"../core/BoundingRect\", \"../core/util\", \"../core/LRU\"], function (t) {\n    function e(t) {\n      i.call(this, t);\n    }var i = t(\"./Displayable\"),\n        n = t(\"../core/BoundingRect\"),\n        r = t(\"../core/util\"),\n        a = t(\"../core/LRU\"),\n        o = new a(50);return e[Ue] = { constructor: e, type: \"image\", brush: function brush(t, e) {\n        var i,\n            n = this.style,\n            r = n.image;if (n.bind(t, this, e), i = (typeof r === \"undefined\" ? \"undefined\" : _typeof(r)) === je ? this._image : r, !i && r) {\n          var a = o.get(r);if (!a) return i = new Image(), i.onload = function () {\n            i.onload = null;for (var t = 0; t < a.pending[Ae]; t++) {\n              a.pending[t].dirty();\n            }\n          }, a = { image: i, pending: [this] }, i.src = r, o.put(r, a), void (this._image = i);if (i = a.image, this._image = i, !i.width || !i[Re]) return void a.pending.push(this);\n        }if (i) {\n          var s = n.width || i.width,\n              l = n[Re] || i[Re],\n              u = n.x || 0,\n              c = n.y || 0;if (!i.width || !i[Re]) return;if (this.setTransform(t), n.sWidth && n.sHeight) {\n            var h = n.sx || 0,\n                f = n.sy || 0;t.drawImage(i, h, f, n.sWidth, n.sHeight, u, c, s, l);\n          } else if (n.sx && n.sy) {\n            var h = n.sx,\n                f = n.sy,\n                d = s - h,\n                p = l - f;t.drawImage(i, h, f, d, p, u, c, s, l);\n          } else t.drawImage(i, u, c, s, l);null == n.width && (n.width = s), null == n[Re] && (n[Re] = l), this.restoreTransform(t), null != n.text && this.drawRectText(t, this[ee]());\n        }\n      }, getBoundingRect: function getBoundingRect() {\n        var t = this.style;return this._rect || (this._rect = new n(t.x || 0, t.y || 0, t.width || 0, t[Re] || 0)), this._rect;\n      } }, r[oe](e, i), e;\n  }), e(\"zrender/graphic/Path\", [ai, \"./Displayable\", \"../core/util\", \"../core/PathProxy\", \"../contain/path\", \"./Pattern\"], function (t) {\n    function e(t) {\n      r.call(this, t), this.path = new s();\n    }var r = t(\"./Displayable\"),\n        o = t(\"../core/util\"),\n        s = t(\"../core/PathProxy\"),\n        l = t(\"../contain/path\"),\n        u = t(\"./Pattern\"),\n        c = u[Ue].getCanvasPattern,\n        h = Math.abs;return e[Ue] = { constructor: e, type: \"path\", __dirtyPath: !0, strokeContainThreshold: 5, brush: function brush(t, e) {\n        var r = this.style,\n            a = this.path,\n            o = r.hasStroke(),\n            s = r.hasFill(),\n            l = r.fill,\n            u = r[y],\n            h = s && !!l.colorStops,\n            f = o && !!u.colorStops,\n            d = s && !!l.image,\n            p = o && !!u.image;if (r.bind(t, this, e), this.setTransform(t), this[i]) {\n          var v = this[ee]();h && (this._fillGradient = r.getGradient(t, l, v)), f && (this._strokeGradient = r.getGradient(t, u, v));\n        }h ? t.fillStyle = this._fillGradient : d && (t.fillStyle = c.call(l, t)), f ? t.strokeStyle = this._strokeGradient : p && (t.strokeStyle = c.call(u, t));var m = r.lineDash,\n            g = r.lineDashOffset,\n            x = !!t.setLineDash,\n            _ = this.getGlobalScale();a.setScale(_[0], _[1]), this.__dirtyPath || m && !x && o ? (a = this.path.beginPath(t), m && !x && (a.setLineDash(m), a.setLineDashOffset(g)), this[n](a, this.shape, !1), this.__dirtyPath = !1) : (t.beginPath(), this.path.rebuildPath(t)), s && a.fill(t), m && x && (t.setLineDash(m), t.lineDashOffset = g), o && a[y](t), m && x && t.setLineDash([]), this.restoreTransform(t), (r.text || 0 === r.text) && this.drawRectText(t, this[ee]());\n      }, buildPath: function buildPath() {}, getBoundingRect: function getBoundingRect() {\n        var t = this._rect,\n            e = this.style,\n            r = !t;if (r) {\n          var a = this.path;this.__dirtyPath && (a.beginPath(), this[n](a, this.shape, !1)), t = a[ee]();\n        }if (this._rect = t, e.hasStroke()) {\n          var o = this._rectWithStroke || (this._rectWithStroke = t.clone());if (this[i] || r) {\n            o.copy(t);var s = e[x],\n                l = e.strokeNoScale ? this.getLineScale() : 1;e.hasFill() || (s = Math.max(s, this.strokeContainThreshold || 4)), l > 1e-10 && (o.width += s / l, o[Re] += s / l, o.x -= s / l / 2, o.y -= s / l / 2);\n          }return o;\n        }return t;\n      }, contain: function contain(t, e) {\n        var i = this.transformCoordToLocal(t, e),\n            n = this[ee](),\n            r = this.style;if (t = i[0], e = i[1], n[$](t, e)) {\n          var a = this.path.data;if (r.hasStroke()) {\n            var o = r[x],\n                s = r.strokeNoScale ? this.getLineScale() : 1;if (s > 1e-10 && (r.hasFill() || (o = Math.max(o, this.strokeContainThreshold)), l.containStroke(a, o / s, t, e))) return !0;\n          }if (r.hasFill()) return l[$](a, t, e);\n        }return !1;\n      }, dirty: function dirty(t) {\n        null == t && (t = !0), t && (this.__dirtyPath = t, this._rect = null), this[i] = !0, this.__zr && this.__zr.refresh(), this.__clipTarget && this.__clipTarget.dirty();\n      }, animateShape: function animateShape(t) {\n        return this.animate(\"shape\", t);\n      }, attrKV: function attrKV(t, e) {\n        \"shape\" === t ? (this[M](e), this.__dirtyPath = !0, this._rect = null) : r[Ue].attrKV.call(this, t, e);\n      }, setShape: function setShape(t, e) {\n        var i = this.shape;if (i) {\n          if (o[Pe](t)) for (var n in t) {\n            i[n] = t[n];\n          } else i[t] = e;this.dirty(!0);\n        }return this;\n      }, getLineScale: function getLineScale() {\n        var t = this[a];return t && h(t[0] - 1) > 1e-10 && h(t[3] - 1) > 1e-10 ? Math.sqrt(h(t[0] * t[3] - t[2] * t[1])) : 1;\n      } }, e[ke] = function (t) {\n      var i = function i(_i) {\n        e.call(this, _i), t.style && this.style.extendFrom(t.style, !1);var n = t.shape;if (n) {\n          this.shape = this.shape || {};var r = this.shape;for (var a in n) {\n            !r.hasOwnProperty(a) && n.hasOwnProperty(a) && (r[a] = n[a]);\n          }\n        }t.init && t.init.call(this, _i);\n      };o[oe](i, e);for (var n in t) {\n        \"style\" !== n && \"shape\" !== n && (i[Ue][n] = t[n]);\n      }return i;\n    }, o[oe](e, r), e;\n  }), e(\"zrender/graphic/Text\", [ai, \"./Displayable\", \"../core/util\", \"../contain/text\"], function (t) {\n    var e = t(\"./Displayable\"),\n        i = t(\"../core/util\"),\n        n = t(\"../contain/text\"),\n        r = function r(t) {\n      e.call(this, t);\n    };return r[Ue] = { constructor: r, type: \"text\", brush: function brush(t, e) {\n        var i = this.style,\n            r = i.x || 0,\n            a = i.y || 0,\n            o = i.text;if (null != o && (o += \"\"), i.bind(t, this, e), o) {\n          this.setTransform(t);var s,\n              l = i[re],\n              u = i.textFont || i.font;if (i.textVerticalAlign) {\n            var c = n[ee](o, u, i[re], \"top\");switch (s = te, i.textVerticalAlign) {case te:\n                a -= c[Re] / 2 - c.lineHeight / 2;break;case Ee:\n                a -= c[Re] - c.lineHeight / 2;break;default:\n                a += c.lineHeight / 2;}\n          } else s = i.textBaseline;t.font = u || \"12px sans-serif\", t[re] = l || \"left\", t[re] !== l && (t[re] = \"left\"), t.textBaseline = s || \"alphabetic\", t.textBaseline !== s && (t.textBaseline = \"alphabetic\");for (var h = n.measureText(\"国\", t.font).width, f = o.split(\"\\n\"), d = 0; d < f[Ae]; d++) {\n            i.hasFill() && t.fillText(f[d], r, a), i.hasStroke() && t.strokeText(f[d], r, a), a += h;\n          }this.restoreTransform(t);\n        }\n      }, getBoundingRect: function getBoundingRect() {\n        if (!this._rect) {\n          var t = this.style,\n              e = t.textVerticalAlign,\n              i = n[ee](t.text + \"\", t.textFont || t.font, t[re], e ? \"top\" : t.textBaseline);switch (e) {case te:\n              i.y -= i[Re] / 2;break;case Ee:\n              i.y -= i[Re];}i.x += t.x || 0, i.y += t.y || 0, this._rect = i;\n        }return this._rect;\n      } }, i[oe](r, e), r;\n  }), e(\"zrender/graphic/Gradient\", [ai], function () {\n    var t = function t(_t) {\n      this.colorStops = _t || [];\n    };return t[Ue] = { constructor: t, addColorStop: function addColorStop(t, e) {\n        this.colorStops.push({ offset: t, color: e });\n      } }, t;\n  }), e(\"zrender/graphic/shape/Circle\", [ai, \"../Path\"], function (t) {\n    return t(\"../Path\")[ke]({ type: \"circle\", shape: { cx: 0, cy: 0, r: 0 }, buildPath: function buildPath(t, e, i) {\n        i && t[r](e.cx + e.r, e.cy), t.arc(e.cx, e.cy, e.r, 0, 2 * Math.PI, !0);\n      } });\n  }), e(\"zrender/graphic/shape/Sector\", [ai, \"../Path\"], function (t) {\n    return t(\"../Path\")[ke]({ type: \"sector\", shape: { cx: 0, cy: 0, r0: 0, r: 0, startAngle: 0, endAngle: 2 * Math.PI, clockwise: !0 }, buildPath: function buildPath(t, e) {\n        var i = e.cx,\n            n = e.cy,\n            a = Math.max(e.r0 || 0, 0),\n            o = Math.max(e.r, 0),\n            s = e.startAngle,\n            l = e.endAngle,\n            u = e.clockwise,\n            c = Math.cos(s),\n            h = Math.sin(s);t[r](c * a + i, h * a + n), t.lineTo(c * o + i, h * o + n), t.arc(i, n, o, s, l, !u), t.lineTo(Math.cos(l) * a + i, Math.sin(l) * a + n), 0 !== a && t.arc(i, n, a, l, s, u), t.closePath();\n      } });\n  }), e(\"zrender/graphic/shape/Ring\", [ai, \"../Path\"], function (t) {\n    return t(\"../Path\")[ke]({ type: \"ring\", shape: { cx: 0, cy: 0, r: 0, r0: 0 }, buildPath: function buildPath(t, e) {\n        var i = e.cx,\n            n = e.cy,\n            a = 2 * Math.PI;t[r](i + e.r, n), t.arc(i, n, e.r, 0, a, !1), t[r](i + e.r0, n), t.arc(i, n, e.r0, 0, a, !0);\n      } });\n  }), e(\"zrender/graphic/shape/Polyline\", [ai, \"../helper/poly\", \"../Path\"], function (t) {\n    var e = t(\"../helper/poly\");return t(\"../Path\")[ke]({ type: \"polyline\", shape: { points: null, smooth: !1, smoothConstraint: null }, style: { stroke: \"#000\", fill: null }, buildPath: function buildPath(t, i) {\n        e[n](t, i, !1);\n      } });\n  }), e(\"zrender/graphic/shape/Rect\", [ai, \"../helper/roundRect\", \"../Path\"], function (t) {\n    var e = t(\"../helper/roundRect\");return t(\"../Path\")[ke]({ type: \"rect\", shape: { r: 0, x: 0, y: 0, width: 0, height: 0 }, buildPath: function buildPath(t, i) {\n        var r = i.x,\n            a = i.y,\n            o = i.width,\n            s = i[Re];i.r ? e[n](t, i) : t.rect(r, a, o, s), t.closePath();\n      } });\n  }), e(\"zrender/graphic/shape/Polygon\", [ai, \"../helper/poly\", \"../Path\"], function (t) {\n    var e = t(\"../helper/poly\");return t(\"../Path\")[ke]({ type: \"polygon\", shape: { points: null, smooth: !1, smoothConstraint: null }, buildPath: function buildPath(t, i) {\n        e[n](t, i, !0);\n      } });\n  }), e(\"zrender/graphic/shape/BezierCurve\", [ai, \"../../core/curve\", \"../../core/vector\", \"../Path\"], function (t) {\n    function e(t, e, i) {\n      var n = t.cpx2,\n          r = t.cpy2;return null === n || null === r ? [(i ? c : l)(t.x1, t.cpx1, t.cpx2, t.x2, e), (i ? c : l)(t.y1, t.cpy1, t.cpy2, t.y2, e)] : [(i ? u : s)(t.x1, t.cpx1, t.x2, e), (i ? u : s)(t.y1, t.cpy1, t.y2, e)];\n    }var i = t(\"../../core/curve\"),\n        n = t(\"../../core/vector\"),\n        a = i.quadraticSubdivide,\n        o = i.cubicSubdivide,\n        s = i.quadraticAt,\n        l = i.cubicAt,\n        u = i.quadraticDerivativeAt,\n        c = i.cubicDerivativeAt,\n        h = [];return t(\"../Path\")[ke]({ type: \"bezier-curve\", shape: { x1: 0, y1: 0, x2: 0, y2: 0, cpx1: 0, cpy1: 0, percent: 1 }, style: { stroke: \"#000\", fill: null }, buildPath: function buildPath(t, e) {\n        var i = e.x1,\n            n = e.y1,\n            s = e.x2,\n            l = e.y2,\n            u = e.cpx1,\n            c = e.cpy1,\n            f = e.cpx2,\n            d = e.cpy2,\n            p = e.percent;0 !== p && (t[r](i, n), null == f || null == d ? (1 > p && (a(i, u, s, p, h), u = h[1], s = h[2], a(n, c, l, p, h), c = h[1], l = h[2]), t.quadraticCurveTo(u, c, s, l)) : (1 > p && (o(i, u, f, s, p, h), u = h[1], f = h[2], s = h[3], o(n, c, d, l, p, h), c = h[1], d = h[2], l = h[3]), t.bezierCurveTo(u, c, f, d, s, l)));\n      }, pointAt: function pointAt(t) {\n        return e(this.shape, t, !1);\n      }, tangentAt: function tangentAt(t) {\n        var i = e(this.shape, t, !0);return n[Y](i, i);\n      } });\n  }), e(\"zrender/graphic/shape/Line\", [ai, \"../Path\"], function (t) {\n    return t(\"../Path\")[ke]({ type: \"line\", shape: { x1: 0, y1: 0, x2: 0, y2: 0, percent: 1 }, style: { stroke: \"#000\", fill: null }, buildPath: function buildPath(t, e) {\n        var i = e.x1,\n            n = e.y1,\n            a = e.x2,\n            o = e.y2,\n            s = e.percent;0 !== s && (t[r](i, n), 1 > s && (a = i * (1 - s) + a * s, o = n * (1 - s) + o * s), t.lineTo(a, o));\n      }, pointAt: function pointAt(t) {\n        var e = this.shape;return [e.x1 * (1 - t) + e.x2 * t, e.y1 * (1 - t) + e.y2 * t];\n      } });\n  }), e(\"zrender/graphic/shape/Arc\", [ai, \"../Path\"], function (t) {\n    return t(\"../Path\")[ke]({ type: \"arc\", shape: { cx: 0, cy: 0, r: 0, startAngle: 0, endAngle: 2 * Math.PI, clockwise: !0 }, style: { stroke: \"#000\", fill: null }, buildPath: function buildPath(t, e) {\n        var i = e.cx,\n            n = e.cy,\n            a = Math.max(e.r, 0),\n            o = e.startAngle,\n            s = e.endAngle,\n            l = e.clockwise,\n            u = Math.cos(o),\n            c = Math.sin(o);t[r](u * a + i, c * a + n), t.arc(i, n, a, o, s, !l);\n      } });\n  }), e(\"zrender/graphic/CompoundPath\", [ai, \"./Path\"], function (t) {\n    var e = t(\"./Path\");return e[ke]({ type: \"compound\", shape: { paths: null }, _updatePathDirty: function _updatePathDirty() {\n        for (var t = this.__dirtyPath, e = this.shape.paths, n = 0; n < e[Ae]; n++) {\n          t = t || e[n].__dirtyPath;\n        }this.__dirtyPath = t, this[i] = this[i] || t;\n      }, beforeBrush: function beforeBrush() {\n        this._updatePathDirty();for (var t = this.shape.paths || [], e = this.getGlobalScale(), i = 0; i < t[Ae]; i++) {\n          t[i].path.setScale(e[0], e[1]);\n        }\n      }, buildPath: function buildPath(t, e) {\n        for (var i = e.paths || [], r = 0; r < i[Ae]; r++) {\n          i[r][n](t, i[r].shape, !0);\n        }\n      }, afterBrush: function afterBrush() {\n        for (var t = this.shape.paths, e = 0; e < t[Ae]; e++) {\n          t[e].__dirtyPath = !1;\n        }\n      }, getBoundingRect: function getBoundingRect() {\n        return this._updatePathDirty(), e[Ue][ee].call(this);\n      } });\n  }), e(\"zrender/graphic/RadialGradient\", [ai, \"../core/util\", \"./Gradient\"], function (t) {\n    var e = t(\"../core/util\"),\n        i = t(\"./Gradient\"),\n        n = function n(t, e, _n, r, a) {\n      this.x = null == t ? .5 : t, this.y = null == e ? .5 : e, this.r = null == _n ? .5 : _n, this.type = \"radial\", this.global = a || !1, i.call(this, r);\n    };return n[Ue] = { constructor: n }, e[oe](n, i), n;\n  }), e(\"zrender/graphic/LinearGradient\", [ai, \"../core/util\", \"./Gradient\"], function (t) {\n    var e = t(\"../core/util\"),\n        i = t(\"./Gradient\"),\n        n = function n(t, e, _n2, r, a, o) {\n      this.x = null == t ? 0 : t, this.y = null == e ? 0 : e, this.x2 = null == _n2 ? 1 : _n2, this.y2 = null == r ? 0 : r, this.type = \"linear\", this.global = o || !1, i.call(this, a);\n    };return n[Ue] = { constructor: n }, e[oe](n, i), n;\n  }), e(\"zrender/core/BoundingRect\", [ai, \"./vector\", \"./matrix\"], function (t) {\n    function e(t, e, i, n) {\n      this.x = t, this.y = e, this.width = i, this[Re] = n;\n    }var i = t(\"./vector\"),\n        n = t(\"./matrix\"),\n        r = i[_],\n        a = Math.min,\n        o = Math.abs,\n        s = Math.max;return e[Ue] = { constructor: e, union: function union(t) {\n        var e = a(t.x, this.x),\n            i = a(t.y, this.y);this.width = s(t.x + t.width, this.x + this.width) - e, this[Re] = s(t.y + t[Re], this.y + this[Re]) - i, this.x = e, this.y = i;\n      }, applyTransform: function () {\n        var t = [],\n            e = [];return function (i) {\n          i && (t[0] = this.x, t[1] = this.y, e[0] = this.x + this.width, e[1] = this.y + this[Re], r(t, t, i), r(e, e, i), this.x = a(t[0], e[0]), this.y = a(t[1], e[1]), this.width = o(e[0] - t[0]), this[Re] = o(e[1] - t[1]));\n        };\n      }(), calculateTransform: function calculateTransform(t) {\n        var e = this,\n            i = t.width / e.width,\n            r = t[Re] / e[Re],\n            a = n[Oe]();return n.translate(a, a, [-e.x, -e.y]), n.scale(a, a, [i, r]), n.translate(a, a, [t.x, t.y]), a;\n      }, intersect: function intersect(t) {\n        var e = this,\n            i = e.x,\n            n = e.x + e.width,\n            r = e.y,\n            a = e.y + e[Re],\n            o = t.x,\n            s = t.x + t.width,\n            l = t.y,\n            u = t.y + t[Re];return !(o > n || i > s || l > a || r > u);\n      }, contain: function contain(t, e) {\n        var i = this;return t >= i.x && t <= i.x + i.width && e >= i.y && e <= i.y + i[Re];\n      }, clone: function clone() {\n        return new e(this.x, this.y, this.width, this[Re]);\n      }, copy: function copy(t) {\n        this.x = t.x, this.y = t.y, this.width = t.width, this[Re] = t[Re];\n      } }, e;\n  }), e(\"echarts/util/model\", [ai, \"./format\", \"./number\", \"../model/Model\", ri], function (t) {\n    var e = t(\"./format\"),\n        i = t(\"./number\"),\n        n = t(\"../model/Model\"),\n        r = t(ri),\n        a = {};return a.normalizeToArray = function (t) {\n      return t instanceof Array ? t : null == t ? [] : [t];\n    }, a.defaultEmphasis = function (t, e) {\n      if (t) {\n        var i = t[b] = t[b] || {},\n            n = t[D] = t[D] || {};r.each(e, function (t) {\n          var e = r[V](i[t], n[t]);null != e && (i[t] = e);\n        });\n      }\n    }, a.LABEL_OPTIONS = [K, \"show\", ae, \"distance\", \"formatter\"], a.getDataItemValue = function (t) {\n      return t && (null == t.value ? t : t.value);\n    }, a.isDataItemOption = function (t) {\n      return r[Pe](t) && !(t instanceof Array);\n    }, a.converDataValue = function (t, e) {\n      var n = e && e.type;return n === G ? t : (\"time\" !== n || isFinite(t) || null == t || \"-\" === t || (t = +i.parseDate(t)), null == t || \"\" === t ? 0 / 0 : +t);\n    }, a.createDataFormatModel = function (t, e) {\n      var i = new n();return r.mixin(i, a.dataFormatMixin), i[ge] = e[ge], i.name = e.name || \"\", i.mainType = e.mainType, i.subType = e.subType, i[ni] = function () {\n        return t;\n      }, i;\n    }, a.dataFormatMixin = { getDataParams: function getDataParams(t, e) {\n        var i = this[ni](e),\n            n = this[ge],\n            r = this.name,\n            a = this[w](t, e),\n            o = i.getRawIndex(t),\n            s = i[h](t, !0),\n            l = i.getRawDataItem(t);return { componentType: this.mainType, componentSubType: this.subType, seriesType: this.mainType === Se ? this.subType : null, seriesIndex: n, seriesName: r, name: s, dataIndex: o, data: l, dataType: e, value: a, color: i[S](t, \"color\"), $vars: [\"seriesName\", \"name\", \"value\"] };\n      }, getFormattedLabel: function getFormattedLabel(t, i, n, r) {\n        i = i || D;var a = this[ni](n),\n            o = a[L](t),\n            s = this[me](t, n);null != r && s.value instanceof Array && (s.value = s.value[r]);var l = o.get([\"label\", i, \"formatter\"]);return (typeof l === \"undefined\" ? \"undefined\" : _typeof(l)) === ce ? (s.status = i, l(s)) : (typeof l === \"undefined\" ? \"undefined\" : _typeof(l)) === je ? e.formatTpl(l, s) : void 0;\n      }, getRawValue: function getRawValue(t, e) {\n        var i = this[ni](e),\n            n = i.getRawDataItem(t);return null != n ? !r[Pe](n) || n instanceof Array ? n : n.value : void 0;\n      }, formatTooltip: r.noop }, a.mappingToExists = function (t, e) {\n      e = (e || []).slice();var i = r.map(t || [], function (t) {\n        return { exist: t };\n      });return r.each(e, function (t, n) {\n        if (r[Pe](t)) {\n          for (var o = 0; o < i[Ae]; o++) {\n            if (!i[o][d] && null != t.id && i[o].exist.id === t.id + \"\") return i[o][d] = t, void (e[n] = null);\n          }for (var o = 0; o < i[Ae]; o++) {\n            var s = i[o].exist;if (!(i[o][d] || null != s.id && null != t.id || null == t.name || a.isIdInner(t) || a.isIdInner(s) || s.name !== t.name + \"\")) return i[o][d] = t, void (e[n] = null);\n          }\n        }\n      }), r.each(e, function (t) {\n        if (r[Pe](t)) {\n          for (var e = 0; e < i[Ae]; e++) {\n            var n = i[e].exist;if (!i[e][d] && !a.isIdInner(n) && null == t.id) {\n              i[e][d] = t;break;\n            }\n          }e >= i[Ae] && i.push({ option: t });\n        }\n      }), i;\n    }, a.isIdInner = function (t) {\n      return r[Pe](t) && t.id && 0 === (t.id + \"\")[se](\"\\x00_ec_\\x00\");\n    }, a.compressBatches = function (t, e) {\n      function i(t, e, i) {\n        for (var n = 0, r = t[Ae]; r > n; n++) {\n          for (var o = t[n].seriesId, s = a.normalizeToArray(t[n][ye]), l = i && i[o], u = 0, c = s[Ae]; c > u; u++) {\n            var h = s[u];l && l[h] ? l[h] = null : (e[o] || (e[o] = {}))[h] = 1;\n          }\n        }\n      }function n(t, e) {\n        var i = [];for (var r in t) {\n          if (t.hasOwnProperty(r) && null != t[r]) if (e) i.push(+r);else {\n            var a = n(t[r], !0);a[Ae] && i.push({ seriesId: r, dataIndex: a });\n          }\n        }return i;\n      }var r = {},\n          o = {};return i(t || [], r), i(e || [], o, r), [n(r), n(o)];\n    }, a;\n  }), e(\"echarts/model/globalDefault\", [], function () {\n    var t = \"\";return (typeof navigator === \"undefined\" ? \"undefined\" : _typeof(navigator)) !== l && (t = navigator.platform || \"\"), { color: [\"#c23531\", \"#2f4554\", \"#61a0a8\", \"#d48265\", \"#91c7ae\", \"#749f83\", \"#ca8622\", \"#bda29a\", \"#6e7074\", \"#546570\", \"#c4ccd3\"], textStyle: { fontFamily: t.match(/^Win/) ? \"Microsoft YaHei\" : \"sans-serif\", fontSize: 12, fontStyle: \"normal\", fontWeight: \"normal\" }, blendMode: null, animation: !0, animationDuration: 1e3, animationDurationUpdate: 300, animationEasing: \"exponentialOut\", animationEasingUpdate: \"cubicOut\", animationThreshold: 2e3, progressiveThreshold: 3e3, progressive: 400, hoverLayerThreshold: 3e3 };\n  }), e(\"echarts/model/mixin/colorPalette\", [], function () {\n    return { clearColorPalette: function clearColorPalette() {\n        this._colorIdx = 0, this._colorNameMap = {};\n      }, getColorFromPalette: function getColorFromPalette(t, e) {\n        e = e || this;var i = e._colorIdx || 0,\n            n = e._colorNameMap || (e._colorNameMap = {});if (n[t]) return n[t];var r = this.get(\"color\", !0) || [];if (r[Ae]) {\n          var a = r[i];return t && (n[t] = a), e._colorIdx = (i + 1) % r[Ae], a;\n        }\n      } };\n  }), e(\"zrender/contain/text\", [ai, \"../core/util\", \"../core/BoundingRect\"], function (t) {\n    function e(t, e) {\n      var i = t + \":\" + e;if (o[i]) return o[i];for (var n = (t + \"\").split(\"\\n\"), r = 0, a = 0, u = n[Ae]; u > a; a++) {\n        r = Math.max(f.measureText(n[a], e).width, r);\n      }return s > l && (s = 0, o = {}), s++, o[i] = r, r;\n    }function i(t, i, n, r) {\n      var a = ((t || \"\") + \"\").split(\"\\n\")[Ae],\n          o = e(t, i),\n          s = e(\"国\", i),\n          l = a * s,\n          u = new c(0, 0, o, l);switch (u.lineHeight = s, r) {case Ee:case \"alphabetic\":\n          u.y -= s;break;case te:\n          u.y -= s / 2;}switch (n) {case \"end\":case \"right\":\n          u.x -= u.width;break;case J:\n          u.x -= u.width / 2;}return u;\n    }function n(t, e, i, n) {\n      var r = e.x,\n          a = e.y,\n          o = e[Re],\n          s = e.width,\n          l = i[Re],\n          u = o / 2 - l / 2,\n          c = \"left\";switch (t) {case \"left\":\n          r -= n, a += u, c = \"right\";break;case \"right\":\n          r += n + s, a += u, c = \"left\";break;case \"top\":\n          r += s / 2, a -= n + l, c = J;break;case Ee:\n          r += s / 2, a += o + n, c = J;break;case \"inside\":\n          r += s / 2, a += u, c = J;break;case \"insideLeft\":\n          r += n, a += u, c = \"left\";break;case \"insideRight\":\n          r += s - n, a += u, c = \"right\";break;case \"insideTop\":\n          r += s / 2, a += n, c = J;break;case \"insideBottom\":\n          r += s / 2, a += o - l - n, c = J;break;case \"insideTopLeft\":\n          r += n, a += n, c = \"left\";break;case \"insideTopRight\":\n          r += s - n, a += n, c = \"right\";break;case \"insideBottomLeft\":\n          r += n, a += o - l - n;break;case \"insideBottomRight\":\n          r += s - n, a += o - l - n, c = \"right\";}return { x: r, y: a, textAlign: c, textBaseline: \"top\" };\n    }function r(t, i, n, r, o) {\n      if (!i) return \"\";o = o || {}, r = h(r, \"...\");for (var s = h(o.maxIterations, 2), l = h(o.minChar, 0), u = e(\"国\", n), c = e(\"a\", n), f = h(o.placeholder, \"\"), d = i = Math.max(0, i - 1), p = 0; l > p && d >= c; p++) {\n        d -= c;\n      }var v = e(r);v > d && (r = \"\", v = 0), d = i - v;for (var m = (t + \"\").split(\"\\n\"), p = 0, g = m[Ae]; g > p; p++) {\n        var y = m[p],\n            x = e(y, n);if (!(i >= x)) {\n          for (var _ = 0;; _++) {\n            if (d >= x || _ >= s) {\n              y += r;break;\n            }var b = 0 === _ ? a(y, d, c, u) : x > 0 ? Math.floor(y[Ae] * d / x) : 0;y = y.substr(0, b), x = e(y, n);\n          }\"\" === y && (y = f), m[p] = y;\n        }\n      }return m.join(\"\\n\");\n    }function a(t, e, i, n) {\n      for (var r = 0, a = 0, o = t[Ae]; o > a && e > r; a++) {\n        var s = t.charCodeAt(a);r += s >= 0 && 127 >= s ? i : n;\n      }return a;\n    }var o = {},\n        s = 0,\n        l = 5e3,\n        u = t(\"../core/util\"),\n        c = t(\"../core/BoundingRect\"),\n        h = u[V],\n        f = { getWidth: e, getBoundingRect: i, adjustTextPositionOnRect: n, truncateText: r, measureText: function measureText(t, e) {\n        var i = u.getContext();return i.font = e || \"12px sans-serif\", i.measureText(t);\n      } };return f;\n  }), e(\"echarts/util/clazz\", [ai, ri], function (t) {\n    function e(t, e) {\n      var i = n.slice(arguments, 2);return this.superClass[Ue][e].apply(t, i);\n    }function i(t, e, i) {\n      return this.superClass[Ue][e].apply(t, i);\n    }var n = t(ri),\n        r = {},\n        a = \".\",\n        o = \"___EC__COMPONENT__CONTAINER___\",\n        s = r.parseClassType = function (t) {\n      var e = { main: \"\", sub: \"\" };return t && (t = t.split(a), e.main = t[0] || \"\", e.sub = t[1] || \"\"), e;\n    };return r.enableClassExtend = function (t) {\n      t.$constructor = t, t[ke] = function (t) {\n        var r = this,\n            a = function a() {\n          t.$constructor ? t.$constructor.apply(this, arguments) : r.apply(this, arguments);\n        };return n[ke](a[Ue], t), a[ke] = this[ke], a.superCall = e, a.superApply = i, n[oe](a, this), a.superClass = r, a;\n      };\n    }, r.enableClassManagement = function (t, e) {\n      function i(t) {\n        var e = r[t.main];return e && e[o] || (e = r[t.main] = {}, e[o] = !0), e;\n      }e = e || {};var r = {};if (t.registerClass = function (t, e) {\n        if (e) if (e = s(e), e.sub) {\n          if (e.sub !== o) {\n            var n = i(e);n[e.sub] = t;\n          }\n        } else r[e.main] = t;return t;\n      }, t.getClass = function (t, e, i) {\n        var n = r[t];if (n && n[o] && (n = e ? n[e] : null), i && !n) throw new Error(\"Component \" + t + \".\" + (e || \"\") + \" not exists. Load it first.\");return n;\n      }, t.getClassesByMainType = function (t) {\n        t = s(t);var e = [],\n            i = r[t.main];return i && i[o] ? n.each(i, function (t, i) {\n          i !== o && e.push(t);\n        }) : e.push(i), e;\n      }, t.hasClass = function (t) {\n        return t = s(t), !!r[t.main];\n      }, t.getAllClassMainTypes = function () {\n        var t = [];return n.each(r, function (e, i) {\n          t.push(i);\n        }), t;\n      }, t.hasSubTypes = function (t) {\n        t = s(t);var e = r[t.main];return e && e[o];\n      }, t.parseClassType = s, e.registerWhenExtend) {\n        var a = t[ke];a && (t[ke] = function (e) {\n          var i = a.call(this, e);return t.registerClass(i, e.type);\n        });\n      }return t;\n    }, r.setReadOnly = function () {}, r;\n  }), e(\"echarts/model/mixin/areaStyle\", [ai, \"./makeStyleMapper\"], function (t) {\n    return { getAreaStyle: t(\"./makeStyleMapper\")([[\"fill\", \"color\"], [\"shadowBlur\"], [\"shadowOffsetX\"], [\"shadowOffsetY\"], [Q], [\"shadowColor\"]]) };\n  }), e(\"echarts/model/mixin/lineStyle\", [ai, \"./makeStyleMapper\"], function (t) {\n    var e = t(\"./makeStyleMapper\")([[x, \"width\"], [y, \"color\"], [Q], [\"shadowBlur\"], [\"shadowOffsetX\"], [\"shadowOffsetY\"], [\"shadowColor\"]]);return { getLineStyle: function getLineStyle(t) {\n        var i = e.call(this, t),\n            n = this.getLineDash();return n && (i.lineDash = n), i;\n      }, getLineDash: function getLineDash() {\n        var t = this.get(\"type\");return \"solid\" === t || null == t ? null : \"dashed\" === t ? [5, 5] : [2, 2];\n      } };\n  }), e(\"echarts/model/mixin/textStyle\", [ai, \"zrender/contain/text\"], function (t) {\n    function e(t, e) {\n      return t && t[g](e);\n    }var i = t(\"zrender/contain/text\");return { getTextColor: function getTextColor() {\n        var t = this[s];return this[g](\"color\") || t && t.get(\"textStyle.color\");\n      }, getFont: function getFont() {\n        var t = this[s],\n            i = t && t[Ze](ae);return [this[g](\"fontStyle\") || e(i, \"fontStyle\"), this[g](\"fontWeight\") || e(i, \"fontWeight\"), (this[g](\"fontSize\") || e(i, \"fontSize\") || 12) + \"px\", this[g](\"fontFamily\") || e(i, \"fontFamily\") || \"sans-serif\"].join(\" \");\n      }, getTextRect: function getTextRect(t) {\n        var e = this.get(ae) || {};return i[ee](t, this[ne](), e.align, e.baseline);\n      }, truncateText: function truncateText(t, e, n, r) {\n        return i.truncateText(t, e, this[ne](), n, r);\n      } };\n  }), e(\"echarts/model/mixin/itemStyle\", [ai, \"./makeStyleMapper\"], function (t) {\n    var e = t(\"./makeStyleMapper\")([[\"fill\", \"color\"], [y, \"borderColor\"], [x, \"borderWidth\"], [Q], [\"shadowBlur\"], [\"shadowOffsetX\"], [\"shadowOffsetY\"], [\"shadowColor\"]]);return { getItemStyle: function getItemStyle(t) {\n        var i = e.call(this, t),\n            n = this.getBorderLineDash();return n && (i.lineDash = n), i;\n      }, getBorderLineDash: function getBorderLineDash() {\n        var t = this.get(\"borderType\");return \"solid\" === t || null == t ? null : \"dashed\" === t ? [5, 5] : [1, 1];\n      } };\n  }), e(\"echarts/component/marker/MarkerModel\", [ai, \"../../util/model\", ri, Qe, \"../../util/format\", z], function (t) {\n    function e(t) {\n      i.defaultEmphasis(t.label, i.LABEL_OPTIONS);\n    }var i = t(\"../../util/model\"),\n        n = t(ri),\n        r = t(Qe),\n        a = t(\"../../util/format\"),\n        o = a.addCommas,\n        s = a.encodeHTML,\n        l = t(z).extendComponentModel({ type: \"marker\", dependencies: [Se, \"grid\", \"polar\", \"geo\"], init: function init(t, e, i, n) {\n        this.mergeDefaultAndTheme(t, i), this[p](t, i, n.createdBySelf, !0);\n      }, ifEnableAnimation: function ifEnableAnimation() {\n        if (r.node) return !1;var t = this.__hostSeries;return this[g](qe) && t && t.ifEnableAnimation();\n      }, mergeOption: function mergeOption(t, i, r, a) {\n        var o = this.constructor,\n            s = this.mainType + \"Model\";r || i[ze](function (t) {\n          var r = t.get(this.mainType),\n              l = t[s];if (!r || !r.data) return void (t[s] = null);if (l) l[p](r, i, !0);else {\n            a && e(r), n.each(r.data, function (t) {\n              t instanceof Array ? (e(t[0]), e(t[1])) : e(t);\n            });var u = { mainType: this.mainType, seriesIndex: t[ge], name: t.name, createdBySelf: !0 };l = new o(r, this, i, u), l.__hostSeries = t;\n          }t[s] = l;\n        }, this);\n      }, formatTooltip: function formatTooltip(t) {\n        var e = this[ni](),\n            i = this[w](t),\n            r = n[he](i) ? n.map(i, o).join(\", \") : o(i),\n            a = e[h](t),\n            l = this.name;return (null != i || a) && (l += \"<br />\"), a && (l += s(a), null != i && (l += \" : \")), null != i && (l += r), l;\n      }, getData: function getData() {\n        return this._data;\n      }, setData: function setData(t) {\n        this._data = t;\n      } });return n.mixin(l, i.dataFormatMixin), l;\n  }), e(\"echarts/component/toolbox/featureManager\", [ai], function () {\n    var t = {};return { register: function register(e, i) {\n        t[e] = i;\n      }, get: function get(e) {\n        return t[e];\n      } };\n  }), e(\"zrender/graphic/mixin/RectText\", [ai, \"../../contain/text\", \"../../core/BoundingRect\"], function (t) {\n    function e(t, e) {\n      return (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === je ? t.lastIndexOf(\"%\") >= 0 ? parseFloat(t) / 100 * e : parseFloat(t) : t;\n    }var i = t(\"../../contain/text\"),\n        n = t(\"../../core/BoundingRect\"),\n        r = new n(),\n        o = function o() {};return o[Ue] = { constructor: o, drawRectText: function drawRectText(t, n, o) {\n        var s = this.style,\n            l = s.text;if (null != l && (l += \"\"), l) {\n          t.save();var u,\n              c,\n              h = s.textPosition,\n              f = s.textDistance,\n              d = s[re],\n              p = s.textFont || s.font,\n              v = s.textBaseline,\n              m = s.textVerticalAlign;o = o || i[ee](l, p, d, v);var g = this[a];if (s.textTransform ? this.setTransform(t) : g && (r.copy(n), r[_](g), n = r), h instanceof Array) {\n            if (u = n.x + e(h[0], n.width), c = n.y + e(h[1], n[Re]), d = d || \"left\", v = v || \"top\", m) {\n              switch (m) {case te:\n                  c -= o[Re] / 2 - o.lineHeight / 2;break;case Ee:\n                  c -= o[Re] - o.lineHeight / 2;break;default:\n                  c += o.lineHeight / 2;}v = te;\n            }\n          } else {\n            var y = i.adjustTextPositionOnRect(h, n, o, f);u = y.x, c = y.y, d = d || y[re], v = v || y.textBaseline;\n          }t[re] = d || \"left\", t.textBaseline = v || \"alphabetic\";var x = s.textFill,\n              b = s.textStroke;x && (t.fillStyle = x), b && (t.strokeStyle = b), t.font = p || \"12px sans-serif\", t.shadowBlur = s.textShadowBlur, t.shadowColor = s.textShadowColor || \"transparent\", t.shadowOffsetX = s.textShadowOffsetX, t.shadowOffsetY = s.textShadowOffsetY;var w = l.split(\"\\n\");s.textRotation && (g && t.translate(g[4], g[5]), t.rotate(s.textRotation), g && t.translate(-g[4], -g[5]));for (var M = 0; M < w[Ae]; M++) {\n            x && t.fillText(w[M], u, c), b && t.strokeText(w[M], u, c), c += o.lineHeight;\n          }t.restore();\n        }\n      } }, o;\n  }), e(\"zrender/core/PathProxy\", [ai, \"./curve\", \"./vector\", \"./bbox\", \"./BoundingRect\", \"../config\"], function (t) {\n    var e = t(\"./curve\"),\n        i = t(\"./vector\"),\n        n = t(\"./bbox\"),\n        a = t(\"./BoundingRect\"),\n        o = t(\"../config\").devicePixelRatio,\n        s = { M: 1, L: 2, C: 3, Q: 4, A: 5, Z: 6, R: 7 },\n        u = [],\n        c = [],\n        h = [],\n        f = [],\n        d = Math.min,\n        p = Math.max,\n        v = Math.cos,\n        m = Math.sin,\n        g = Math.sqrt,\n        x = Math.abs,\n        _ = (typeof Float32Array === \"undefined\" ? \"undefined\" : _typeof(Float32Array)) != l,\n        b = function b() {\n      this.data = [], this._len = 0, this._ctx = null, this._xi = 0, this._yi = 0, this._x0 = 0, this._y0 = 0, this._ux = 0, this._uy = 0;\n    };return b[Ue] = { constructor: b, _lineDash: null, _dashOffset: 0, _dashIdx: 0, _dashSum: 0, setScale: function setScale(t, e) {\n        this._ux = x(1 / o / t) || 0, this._uy = x(1 / o / e) || 0;\n      }, getContext: function getContext() {\n        return this._ctx;\n      }, beginPath: function beginPath(t) {\n        return this._ctx = t, t && t.beginPath(), t && (this.dpr = t.dpr), this._len = 0, this._lineDash && (this._lineDash = null, this._dashOffset = 0), this;\n      }, moveTo: function moveTo(t, e) {\n        return this.addData(s.M, t, e), this._ctx && this._ctx[r](t, e), this._x0 = t, this._y0 = e, this._xi = t, this._yi = e, this;\n      }, lineTo: function lineTo(t, e) {\n        var i = x(t - this._xi) > this._ux || x(e - this._yi) > this._uy || this._len < 5;return this.addData(s.L, t, e), this._ctx && i && (this._needsDash() ? this._dashedLineTo(t, e) : this._ctx.lineTo(t, e)), i && (this._xi = t, this._yi = e), this;\n      }, bezierCurveTo: function bezierCurveTo(t, e, i, n, r, a) {\n        return this.addData(s.C, t, e, i, n, r, a), this._ctx && (this._needsDash() ? this._dashedBezierTo(t, e, i, n, r, a) : this._ctx.bezierCurveTo(t, e, i, n, r, a)), this._xi = r, this._yi = a, this;\n      }, quadraticCurveTo: function quadraticCurveTo(t, e, i, n) {\n        return this.addData(s.Q, t, e, i, n), this._ctx && (this._needsDash() ? this._dashedQuadraticTo(t, e, i, n) : this._ctx.quadraticCurveTo(t, e, i, n)), this._xi = i, this._yi = n, this;\n      }, arc: function arc(t, e, i, n, r, a) {\n        return this.addData(s.A, t, e, i, i, n, r - n, 0, a ? 0 : 1), this._ctx && this._ctx.arc(t, e, i, n, r, a), this._xi = v(r) * i + t, this._xi = m(r) * i + t, this;\n      }, arcTo: function arcTo(t, e, i, n, r) {\n        return this._ctx && this._ctx.arcTo(t, e, i, n, r), this;\n      }, rect: function rect(t, e, i, n) {\n        return this._ctx && this._ctx.rect(t, e, i, n), this.addData(s.R, t, e, i, n), this;\n      }, closePath: function closePath() {\n        this.addData(s.Z);var t = this._ctx,\n            e = this._x0,\n            i = this._y0;return t && (this._needsDash() && this._dashedLineTo(e, i), t.closePath()), this._xi = e, this._yi = i, this;\n      }, fill: function fill(t) {\n        t && t.fill(), this.toStatic();\n      }, stroke: function stroke(t) {\n        t && t[y](), this.toStatic();\n      }, setLineDash: function setLineDash(t) {\n        if (t instanceof Array) {\n          this._lineDash = t, this._dashIdx = 0;for (var e = 0, i = 0; i < t[Ae]; i++) {\n            e += t[i];\n          }this._dashSum = e;\n        }return this;\n      }, setLineDashOffset: function setLineDashOffset(t) {\n        return this._dashOffset = t, this;\n      }, len: function len() {\n        return this._len;\n      }, setData: function setData(t) {\n        var e = t[Ae];this.data && this.data[Ae] == e || !_ || (this.data = new Float32Array(e));for (var i = 0; e > i; i++) {\n          this.data[i] = t[i];\n        }this._len = e;\n      }, appendPath: function appendPath(t) {\n        t instanceof Array || (t = [t]);for (var e = t[Ae], i = 0, n = this._len, r = 0; e > r; r++) {\n          i += t[r].len();\n        }_ && this.data instanceof Float32Array && (this.data = new Float32Array(n + i));for (var r = 0; e > r; r++) {\n          for (var a = t[r].data, o = 0; o < a[Ae]; o++) {\n            this.data[n++] = a[o];\n          }\n        }this._len = n;\n      }, addData: function addData(t) {\n        var e = this.data;this._len + arguments[Ae] > e[Ae] && (this._expandData(), e = this.data);for (var i = 0; i < arguments[Ae]; i++) {\n          e[this._len++] = arguments[i];\n        }this._prevCmd = t;\n      }, _expandData: function _expandData() {\n        if (!(this.data instanceof Array)) {\n          for (var t = [], e = 0; e < this._len; e++) {\n            t[e] = this.data[e];\n          }this.data = t;\n        }\n      }, _needsDash: function _needsDash() {\n        return this._lineDash;\n      }, _dashedLineTo: function _dashedLineTo(t, e) {\n        var i,\n            n,\n            a = this._dashSum,\n            o = this._dashOffset,\n            s = this._lineDash,\n            l = this._ctx,\n            u = this._xi,\n            c = this._yi,\n            h = t - u,\n            f = e - c,\n            v = g(h * h + f * f),\n            m = u,\n            y = c,\n            x = s[Ae];for (h /= v, f /= v, 0 > o && (o = a + o), o %= a, m -= o * h, y -= o * f; h > 0 && t >= m || 0 > h && m >= t || 0 == h && (f > 0 && e >= y || 0 > f && y >= e);) {\n          n = this._dashIdx, i = s[n], m += h * i, y += f * i, this._dashIdx = (n + 1) % x, h > 0 && u > m || 0 > h && m > u || f > 0 && c > y || 0 > f && y > c || l[n % 2 ? r : \"lineTo\"](h >= 0 ? d(m, t) : p(m, t), f >= 0 ? d(y, e) : p(y, e));\n        }h = m - t, f = y - e, this._dashOffset = -g(h * h + f * f);\n      }, _dashedBezierTo: function _dashedBezierTo(t, i, n, a, o, s) {\n        var l,\n            u,\n            c,\n            h,\n            f,\n            d = this._dashSum,\n            p = this._dashOffset,\n            v = this._lineDash,\n            m = this._ctx,\n            y = this._xi,\n            x = this._yi,\n            _ = e.cubicAt,\n            b = 0,\n            w = this._dashIdx,\n            M = v[Ae],\n            S = 0;for (0 > p && (p = d + p), p %= d, l = 0; 1 > l; l += .1) {\n          u = _(y, t, n, o, l + .1) - _(y, t, n, o, l), c = _(x, i, a, s, l + .1) - _(x, i, a, s, l), b += g(u * u + c * c);\n        }for (; M > w && (S += v[w], !(S > p)); w++) {}for (l = (S - p) / b; 1 >= l;) {\n          h = _(y, t, n, o, l), f = _(x, i, a, s, l), w % 2 ? m[r](h, f) : m.lineTo(h, f), l += v[w] / b, w = (w + 1) % M;\n        }w % 2 !== 0 && m.lineTo(o, s), u = o - h, c = s - f, this._dashOffset = -g(u * u + c * c);\n      }, _dashedQuadraticTo: function _dashedQuadraticTo(t, e, i, n) {\n        var r = i,\n            a = n;i = (i + 2 * t) / 3, n = (n + 2 * e) / 3, t = (this._xi + 2 * t) / 3, e = (this._yi + 2 * e) / 3, this._dashedBezierTo(t, e, i, n, r, a);\n      }, toStatic: function toStatic() {\n        var t = this.data;t instanceof Array && (t[Ae] = this._len, _ && (this.data = new Float32Array(t)));\n      }, getBoundingRect: function getBoundingRect() {\n        u[0] = u[1] = h[0] = h[1] = Number.MAX_VALUE, c[0] = c[1] = f[0] = f[1] = -Number.MAX_VALUE;for (var t = this.data, e = 0, r = 0, o = 0, l = 0, d = 0; d < t[Ae];) {\n          var p = t[d++];switch (1 == d && (e = t[d], r = t[d + 1], o = e, l = r), p) {case s.M:\n              o = t[d++], l = t[d++], e = o, r = l, h[0] = o, h[1] = l, f[0] = o, f[1] = l;break;case s.L:\n              n.fromLine(e, r, t[d], t[d + 1], h, f), e = t[d++], r = t[d++];break;case s.C:\n              n.fromCubic(e, r, t[d++], t[d++], t[d++], t[d++], t[d], t[d + 1], h, f), e = t[d++], r = t[d++];break;case s.Q:\n              n.fromQuadratic(e, r, t[d++], t[d++], t[d], t[d + 1], h, f), e = t[d++], r = t[d++];break;case s.A:\n              var g = t[d++],\n                  y = t[d++],\n                  x = t[d++],\n                  _ = t[d++],\n                  b = t[d++],\n                  w = t[d++] + b,\n                  M = (t[d++], 1 - t[d++]);1 == d && (o = v(b) * x + g, l = m(b) * _ + y), n.fromArc(g, y, x, _, b, w, M, h, f), e = v(w) * x + g, r = m(w) * _ + y;break;case s.R:\n              o = e = t[d++], l = r = t[d++];var S = t[d++],\n                  T = t[d++];n.fromLine(o, l, o + S, l + T, h, f);break;case s.Z:\n              e = o, r = l;}i.min(u, u, h), i.max(c, c, f);\n        }return 0 === d && (u[0] = u[1] = c[0] = c[1] = 0), new a(u[0], u[1], c[0] - u[0], c[1] - u[1]);\n      }, rebuildPath: function rebuildPath(t) {\n        for (var e, i, n, a, o, l, u = this.data, c = this._ux, h = this._uy, f = this._len, d = 0; f > d;) {\n          var p = u[d++];switch (1 == d && (n = u[d], a = u[d + 1], e = n, i = a), p) {case s.M:\n              e = n = u[d++], i = a = u[d++], t[r](n, a);break;case s.L:\n              o = u[d++], l = u[d++], (x(o - n) > c || x(l - a) > h || d === f - 1) && (t.lineTo(o, l), n = o, a = l);break;case s.C:\n              t.bezierCurveTo(u[d++], u[d++], u[d++], u[d++], u[d++], u[d++]), n = u[d - 2], a = u[d - 1];break;case s.Q:\n              t.quadraticCurveTo(u[d++], u[d++], u[d++], u[d++]), n = u[d - 2], a = u[d - 1];break;case s.A:\n              var g = u[d++],\n                  y = u[d++],\n                  _ = u[d++],\n                  b = u[d++],\n                  w = u[d++],\n                  M = u[d++],\n                  S = u[d++],\n                  T = u[d++],\n                  A = _ > b ? _ : b,\n                  C = _ > b ? 1 : _ / b,\n                  k = _ > b ? b / _ : 1,\n                  L = Math.abs(_ - b) > .001,\n                  P = w + M;L ? (t.translate(g, y), t.rotate(S), t.scale(C, k), t.arc(0, 0, A, w, P, 1 - T), t.scale(1 / C, 1 / k), t.rotate(-S), t.translate(-g, -y)) : t.arc(g, y, A, w, P, 1 - T), 1 == d && (e = v(w) * _ + g, i = m(w) * b + y), n = v(P) * _ + g, a = m(P) * b + y;break;case s.R:\n              e = n = u[d], i = a = u[d + 1], t.rect(u[d++], u[d++], u[d++], u[d++]);break;case s.Z:\n              t.closePath(), n = e, a = i;}\n        }\n      } }, b.CMD = s, b;\n  }), e(\"zrender/vml/core\", [ai, \"exports\", \"module\", \"../core/env\"], function (t, e, i) {\n    if (!t(\"../core/env\")[Fe]) {\n      var n,\n          r = \"urn:schemas-microsoft-com:vml\",\n          a = window,\n          o = a.document,\n          s = !1;try {\n        !o.namespaces.zrvml && o.namespaces.add(\"zrvml\", r), n = function n(t) {\n          return o[X](\"<zrvml:\" + t + ' class=\"zrvml\">');\n        };\n      } catch (l) {\n        n = function n(t) {\n          return o[X](\"<\" + t + ' xmlns=\"' + r + '\" class=\"zrvml\">');\n        };\n      }var u = function u() {\n        if (!s) {\n          s = !0;var t = o.styleSheets;t[Ae] < 31 ? o.createStyleSheet().addRule(\".zrvml\", \"behavior:url(#default#VML)\") : t[0].addRule(\".zrvml\", \"behavior:url(#default#VML)\");\n        }\n      };i.exports = { doc: o, initVML: u, createNode: n };\n    }\n  }), e(\"zrender/graphic/Displayable\", [ai, \"../core/util\", \"./Style\", \"../Element\", \"./mixin/RectText\"], function (t) {\n    function e(t) {\n      t = t || {}, a.call(this, t);for (var e in t) {\n        t.hasOwnProperty(e) && \"style\" !== e && (this[e] = t[e]);\n      }this.style = new r(t.style), this._rect = null, this.__clipPaths = [];\n    }var n = t(\"../core/util\"),\n        r = t(\"./Style\"),\n        a = t(\"../Element\"),\n        o = t(\"./mixin/RectText\");return e[Ue] = { constructor: e, type: \"displayable\", __dirty: !0, invisible: !1, z: 0, z2: 0, zlevel: 0, draggable: !1, dragging: !1, silent: !1, culling: !1, cursor: \"pointer\", rectHover: !1, progressive: -1, beforeBrush: function beforeBrush() {}, afterBrush: function afterBrush() {}, brush: function brush() {}, getBoundingRect: function getBoundingRect() {}, contain: function contain(t, e) {\n        return this.rectContain(t, e);\n      }, traverse: function traverse(t, e) {\n        t.call(e, this);\n      }, rectContain: function rectContain(t, e) {\n        var i = this.transformCoordToLocal(t, e),\n            n = this[ee]();return n[$](i[0], i[1]);\n      }, dirty: function dirty() {\n        this[i] = !0, this._rect = null, this.__zr && this.__zr.refresh();\n      }, animateStyle: function animateStyle(t) {\n        return this.animate(\"style\", t);\n      }, attrKV: function attrKV(t, e) {\n        \"style\" !== t ? a[Ue].attrKV.call(this, t, e) : this.style.set(e);\n      }, setStyle: function setStyle(t, e) {\n        return this.style.set(t, e), this.dirty(!1), this;\n      }, useStyle: function useStyle(t) {\n        return this.style = new r(t), this.dirty(!1), this;\n      } }, n[oe](e, a), n.mixin(e, o), e;\n  }), e(\"zrender/tool/transformPath\", [ai, \"../core/PathProxy\", \"../core/vector\"], function (t) {\n    function e(t, e) {\n      var n,\n          l,\n          u,\n          c,\n          h,\n          f,\n          d = t.data,\n          p = i.M,\n          v = i.C,\n          m = i.L,\n          g = i.R,\n          y = i.A,\n          x = i.Q;for (u = 0, c = 0; u < d[Ae];) {\n        switch (n = d[u++], c = u, l = 0, n) {case p:\n            l = 1;break;case m:\n            l = 1;break;case v:\n            l = 3;break;case x:\n            l = 2;break;case y:\n            var _ = e[4],\n                b = e[5],\n                w = o(e[0] * e[0] + e[1] * e[1]),\n                M = o(e[2] * e[2] + e[3] * e[3]),\n                S = s(-e[1] / M, e[0] / w);d[u++] += _, d[u++] += b, d[u++] *= w, d[u++] *= M, d[u++] += S, d[u++] += S, u += 2, c = u;break;case g:\n            f[0] = d[u++], f[1] = d[u++], r(f, f, e), d[c++] = f[0], d[c++] = f[1], f[0] += d[u++], f[1] += d[u++], r(f, f, e), d[c++] = f[0], d[c++] = f[1];}for (h = 0; l > h; h++) {\n          var f = a[h];f[0] = d[u++], f[1] = d[u++], r(f, f, e), d[c++] = f[0], d[c++] = f[1];\n        }\n      }\n    }var i = t(\"../core/PathProxy\").CMD,\n        n = t(\"../core/vector\"),\n        r = n[_],\n        a = [[], [], []],\n        o = Math.sqrt,\n        s = Math.atan2;return e;\n  }), e(\"echarts/scale/Ordinal\", [ai, ri, \"./Scale\"], function (t) {\n    var e = t(ri),\n        i = t(\"./Scale\"),\n        n = i[Ue],\n        r = i[ke]({ type: \"ordinal\", init: function init(t, e) {\n        this._data = t, this._extent = e || [0, t[Ae] - 1];\n      }, parse: function parse(t) {\n        return (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === je ? e[se](this._data, t) : Math.round(t);\n      }, contain: function contain(t) {\n        return t = this.parse(t), n[$].call(this, t) && null != this._data[t];\n      }, normalize: function normalize(t) {\n        return n[Y].call(this, this.parse(t));\n      }, scale: function scale(t) {\n        return Math.round(n.scale.call(this, t));\n      }, getTicks: function getTicks() {\n        for (var t = [], e = this._extent, i = e[0]; i <= e[1];) {\n          t.push(i), i++;\n        }return t;\n      }, getLabel: function getLabel(t) {\n        return this._data[t];\n      }, count: function count() {\n        return this._extent[1] - this._extent[0] + 1;\n      }, niceTicks: e.noop, niceExtent: e.noop });return r[Oe] = function () {\n      return new r();\n    }, r;\n  }), e(\"zrender/graphic/Pattern\", [ai], function () {\n    var t = function t(_t2, e) {\n      this.image = _t2, this.repeat = e, this.type = \"pattern\";\n    };return t[Ue].getCanvasPattern = function (t) {\n      return this._canvasPattern || (this._canvasPattern = t.createPattern(this.image, this.repeat));\n    }, t;\n  }), e(\"zrender/contain/path\", [ai, \"../core/PathProxy\", \"./line\", \"./cubic\", \"./quadratic\", \"./arc\", \"./util\", \"../core/curve\", \"./windingLine\"], function (t) {\n    function e(t, e) {\n      return Math.abs(t - e) < g;\n    }function i() {\n      var t = x[0];x[0] = x[1], x[1] = t;\n    }function n(t, e, n, r, a, o, s, l, u, c) {\n      if (c > e && c > r && c > o && c > l || e > c && r > c && o > c && l > c) return 0;var h = d.cubicRootAt(e, r, o, l, c, y);if (0 === h) return 0;for (var f, p, v = 0, m = -1, g = 0; h > g; g++) {\n        var _ = y[g],\n            b = 0 === _ || 1 === _ ? .5 : 1,\n            w = d.cubicAt(t, n, a, s, _);u > w || (0 > m && (m = d.cubicExtrema(e, r, o, l, x), x[1] < x[0] && m > 1 && i(), f = d.cubicAt(e, r, o, l, x[0]), m > 1 && (p = d.cubicAt(e, r, o, l, x[1]))), v += 2 == m ? _ < x[0] ? e > f ? b : -b : _ < x[1] ? f > p ? b : -b : p > l ? b : -b : _ < x[0] ? e > f ? b : -b : f > l ? b : -b);\n      }return v;\n    }function r(t, e, i, n, r, a, o, s) {\n      if (s > e && s > n && s > a || e > s && n > s && a > s) return 0;var l = d.quadraticRootAt(e, n, a, s, y);if (0 === l) return 0;var u = d.quadraticExtremum(e, n, a);if (u >= 0 && 1 >= u) {\n        for (var c = 0, h = d.quadraticAt(e, n, a, u), f = 0; l > f; f++) {\n          var p = 0 === y[f] || 1 === y[f] ? .5 : 1,\n              v = d.quadraticAt(t, i, r, y[f]);o > v || (c += y[f] < u ? e > h ? p : -p : h > a ? p : -p);\n        }return c;\n      }var p = 0 === y[0] || 1 === y[0] ? .5 : 1,\n          v = d.quadraticAt(t, i, r, y[0]);return o > v ? 0 : e > a ? p : -p;\n    }function a(t, e, i, n, r, a, o, s) {\n      if (s -= e, s > i || -i > s) return 0;var l = Math.sqrt(i * i - s * s);y[0] = -l, y[1] = l;var u = Math.abs(n - r);if (1e-4 > u) return 0;if (1e-4 > u % m) {\n        n = 0, r = m;var c = a ? 1 : -1;return o >= y[0] + t && o <= y[1] + t ? c : 0;\n      }if (a) {\n        var l = n;n = f(r), r = f(l);\n      } else n = f(n), r = f(r);n > r && (r += m);for (var h = 0, d = 0; 2 > d; d++) {\n        var p = y[d];if (p + t > o) {\n          var v = Math.atan2(s, p),\n              c = a ? 1 : -1;0 > v && (v = m + v), (v >= n && r >= v || v + m >= n && r >= v + m) && (v > Math.PI / 2 && v < 1.5 * Math.PI && (c = -c), h += c);\n        }\n      }return h;\n    }function o(t, i, o, l, f) {\n      for (var d = 0, m = 0, g = 0, y = 0, x = 0, _ = 0; _ < t[Ae];) {\n        var b = t[_++];switch (b === s.M && _ > 1 && (o || (d += p(m, g, y, x, l, f))), 1 == _ && (m = t[_], g = t[_ + 1], y = m, x = g), b) {case s.M:\n            y = t[_++], x = t[_++], m = y, g = x;break;case s.L:\n            if (o) {\n              if (v(m, g, t[_], t[_ + 1], i, l, f)) return !0;\n            } else d += p(m, g, t[_], t[_ + 1], l, f) || 0;m = t[_++], g = t[_++];break;case s.C:\n            if (o) {\n              if (u.containStroke(m, g, t[_++], t[_++], t[_++], t[_++], t[_], t[_ + 1], i, l, f)) return !0;\n            } else d += n(m, g, t[_++], t[_++], t[_++], t[_++], t[_], t[_ + 1], l, f) || 0;m = t[_++], g = t[_++];break;case s.Q:\n            if (o) {\n              if (c.containStroke(m, g, t[_++], t[_++], t[_], t[_ + 1], i, l, f)) return !0;\n            } else d += r(m, g, t[_++], t[_++], t[_], t[_ + 1], l, f) || 0;m = t[_++], g = t[_++];break;case s.A:\n            var w = t[_++],\n                M = t[_++],\n                S = t[_++],\n                T = t[_++],\n                A = t[_++],\n                C = t[_++],\n                k = (t[_++], 1 - t[_++]),\n                L = Math.cos(A) * S + w,\n                P = Math.sin(A) * T + M;_ > 1 ? d += p(m, g, L, P, l, f) : (y = L, x = P);var D = (l - w) * T / S + w;if (o) {\n              if (h.containStroke(w, M, T, A, A + C, k, i, D, f)) return !0;\n            } else d += a(w, M, T, A, A + C, k, D, f);m = Math.cos(A + C) * S + w, g = Math.sin(A + C) * T + M;break;case s.R:\n            y = m = t[_++], x = g = t[_++];var z = t[_++],\n                I = t[_++],\n                L = y + z,\n                P = x + I;if (o) {\n              if (v(y, x, L, x, i, l, f) || v(L, x, L, P, i, l, f) || v(L, P, y, P, i, l, f) || v(y, P, y, x, i, l, f)) return !0;\n            } else d += p(L, x, L, P, l, f), d += p(y, P, y, x, l, f);break;case s.Z:\n            if (o) {\n              if (v(m, g, y, x, i, l, f)) return !0;\n            } else d += p(m, g, y, x, l, f);m = y, g = x;}\n      }return o || e(g, x) || (d += p(m, g, y, x, l, f) || 0), 0 !== d;\n    }var s = t(\"../core/PathProxy\").CMD,\n        l = t(\"./line\"),\n        u = t(\"./cubic\"),\n        c = t(\"./quadratic\"),\n        h = t(\"./arc\"),\n        f = t(\"./util\").normalizeRadian,\n        d = t(\"../core/curve\"),\n        p = t(\"./windingLine\"),\n        v = l.containStroke,\n        m = 2 * Math.PI,\n        g = 1e-4,\n        y = [-1, -1, -1],\n        x = [-1, -1];return { contain: function contain(t, e, i) {\n        return o(t, 0, !1, e, i);\n      }, containStroke: function containStroke(t, e, i, n) {\n        return o(t, e, !0, i, n);\n      } };\n  }), e(\"echarts/model/mixin/makeStyleMapper\", [ai, ri], function (t) {\n    var e = t(ri);return function (t) {\n      for (var i = 0; i < t[Ae]; i++) {\n        t[i][1] || (t[i][1] = t[i][0]);\n      }return function (i) {\n        for (var n = {}, r = 0; r < t[Ae]; r++) {\n          var a = t[r][1];if (!(i && e[se](i, a) >= 0)) {\n            var o = this[g](a);null != o && (n[t[r][0]] = o);\n          }\n        }return n;\n      };\n    };\n  }), e(\"zrender/core/curve\", [ai, \"./vector\"], function (t) {\n    function e(t) {\n      return t > -_ && _ > t;\n    }function i(t) {\n      return t > _ || -_ > t;\n    }function n(t, e, i, n, r) {\n      var a = 1 - r;return a * a * (a * t + 3 * r * e) + r * r * (r * n + 3 * a * i);\n    }function r(t, e, i, n, r) {\n      var a = 1 - r;return 3 * (((e - t) * a + 2 * (i - e) * r) * a + (n - i) * r * r);\n    }function a(t, i, n, r, a, o) {\n      var s = r + 3 * (i - n) - t,\n          l = 3 * (n - 2 * i + t),\n          u = 3 * (i - t),\n          c = t - a,\n          h = l * l - 3 * s * u,\n          f = l * u - 9 * s * c,\n          d = u * u - 3 * l * c,\n          p = 0;if (e(h) && e(f)) {\n        if (e(l)) o[0] = 0;else {\n          var v = -u / l;v >= 0 && 1 >= v && (o[p++] = v);\n        }\n      } else {\n        var m = f * f - 4 * h * d;if (e(m)) {\n          var g = f / h,\n              v = -l / s + g,\n              _ = -g / 2;v >= 0 && 1 >= v && (o[p++] = v), _ >= 0 && 1 >= _ && (o[p++] = _);\n        } else if (m > 0) {\n          var b = x(m),\n              S = h * l + 1.5 * s * (-f + b),\n              T = h * l + 1.5 * s * (-f - b);S = 0 > S ? -y(-S, M) : y(S, M), T = 0 > T ? -y(-T, M) : y(T, M);var v = (-l - (S + T)) / (3 * s);v >= 0 && 1 >= v && (o[p++] = v);\n        } else {\n          var A = (2 * h * l - 3 * s * f) / (2 * x(h * h * h)),\n              C = Math.acos(A) / 3,\n              k = x(h),\n              L = Math.cos(C),\n              v = (-l - 2 * k * L) / (3 * s),\n              _ = (-l + k * (L + w * Math.sin(C))) / (3 * s),\n              P = (-l + k * (L - w * Math.sin(C))) / (3 * s);v >= 0 && 1 >= v && (o[p++] = v), _ >= 0 && 1 >= _ && (o[p++] = _), P >= 0 && 1 >= P && (o[p++] = P);\n        }\n      }return p;\n    }function o(t, n, r, a, o) {\n      var s = 6 * r - 12 * n + 6 * t,\n          l = 9 * n + 3 * a - 3 * t - 9 * r,\n          u = 3 * n - 3 * t,\n          c = 0;if (e(l)) {\n        if (i(s)) {\n          var h = -u / s;h >= 0 && 1 >= h && (o[c++] = h);\n        }\n      } else {\n        var f = s * s - 4 * l * u;if (e(f)) o[0] = -s / (2 * l);else if (f > 0) {\n          var d = x(f),\n              h = (-s + d) / (2 * l),\n              p = (-s - d) / (2 * l);h >= 0 && 1 >= h && (o[c++] = h), p >= 0 && 1 >= p && (o[c++] = p);\n        }\n      }return c;\n    }function s(t, e, i, n, r, a) {\n      var o = (e - t) * r + t,\n          s = (i - e) * r + e,\n          l = (n - i) * r + i,\n          u = (s - o) * r + o,\n          c = (l - s) * r + s,\n          h = (c - u) * r + u;a[0] = t, a[1] = o, a[2] = u, a[3] = h, a[4] = h, a[5] = c, a[6] = l, a[7] = n;\n    }function l(t, e, i, r, a, o, s, l, u, c, h) {\n      var f,\n          d,\n          p,\n          v,\n          m,\n          y = .005,\n          _ = 1 / 0;S[0] = u, S[1] = c;for (var w = 0; 1 > w; w += .05) {\n        T[0] = n(t, i, a, s, w), T[1] = n(e, r, o, l, w), v = g(S, T), _ > v && (f = w, _ = v);\n      }_ = 1 / 0;for (var M = 0; 32 > M && !(b > y); M++) {\n        d = f - y, p = f + y, T[0] = n(t, i, a, s, d), T[1] = n(e, r, o, l, d), v = g(T, S), d >= 0 && _ > v ? (f = d, _ = v) : (A[0] = n(t, i, a, s, p), A[1] = n(e, r, o, l, p), m = g(A, S), 1 >= p && _ > m ? (f = p, _ = m) : y *= .5);\n      }return h && (h[0] = n(t, i, a, s, f), h[1] = n(e, r, o, l, f)), x(_);\n    }function u(t, e, i, n) {\n      var r = 1 - n;return r * (r * t + 2 * n * e) + n * n * i;\n    }function c(t, e, i, n) {\n      return 2 * ((1 - n) * (e - t) + n * (i - e));\n    }function h(t, n, r, a, o) {\n      var s = t - 2 * n + r,\n          l = 2 * (n - t),\n          u = t - a,\n          c = 0;if (e(s)) {\n        if (i(l)) {\n          var h = -u / l;h >= 0 && 1 >= h && (o[c++] = h);\n        }\n      } else {\n        var f = l * l - 4 * s * u;if (e(f)) {\n          var h = -l / (2 * s);h >= 0 && 1 >= h && (o[c++] = h);\n        } else if (f > 0) {\n          var d = x(f),\n              h = (-l + d) / (2 * s),\n              p = (-l - d) / (2 * s);h >= 0 && 1 >= h && (o[c++] = h), p >= 0 && 1 >= p && (o[c++] = p);\n        }\n      }return c;\n    }function f(t, e, i) {\n      var n = t + i - 2 * e;return 0 === n ? .5 : (t - e) / n;\n    }function d(t, e, i, n, r) {\n      var a = (e - t) * n + t,\n          o = (i - e) * n + e,\n          s = (o - a) * n + a;r[0] = t, r[1] = a, r[2] = s, r[3] = s, r[4] = o, r[5] = i;\n    }function p(t, e, i, n, r, a, o, s, l) {\n      var c,\n          h = .005,\n          f = 1 / 0;S[0] = o, S[1] = s;for (var d = 0; 1 > d; d += .05) {\n        T[0] = u(t, i, r, d), T[1] = u(e, n, a, d);var p = g(S, T);f > p && (c = d, f = p);\n      }f = 1 / 0;for (var v = 0; 32 > v && !(b > h); v++) {\n        var m = c - h,\n            y = c + h;T[0] = u(t, i, r, m), T[1] = u(e, n, a, m);var p = g(T, S);if (m >= 0 && f > p) c = m, f = p;else {\n          A[0] = u(t, i, r, y), A[1] = u(e, n, a, y);var _ = g(A, S);1 >= y && f > _ ? (c = y, f = _) : h *= .5;\n        }\n      }return l && (l[0] = u(t, i, r, c), l[1] = u(e, n, a, c)), x(f);\n    }var v = t(\"./vector\"),\n        m = v[Oe],\n        g = v.distSquare,\n        y = Math.pow,\n        x = Math.sqrt,\n        _ = 1e-8,\n        b = 1e-4,\n        w = x(3),\n        M = 1 / 3,\n        S = m(),\n        T = m(),\n        A = m();return { cubicAt: n, cubicDerivativeAt: r, cubicRootAt: a, cubicExtrema: o, cubicSubdivide: s, cubicProjectPoint: l, quadraticAt: u, quadraticDerivativeAt: c, quadraticRootAt: h, quadraticExtremum: f, quadraticSubdivide: d, quadraticProjectPoint: p };\n  }), e(\"zrender/core/bbox\", [ai, \"./vector\", \"./curve\"], function (t) {\n    var e = t(\"./vector\"),\n        i = t(\"./curve\"),\n        n = {},\n        r = Math.min,\n        a = Math.max,\n        o = Math.sin,\n        s = Math.cos,\n        l = e[Oe](),\n        u = e[Oe](),\n        c = e[Oe](),\n        h = 2 * Math.PI;n.fromPoints = function (t, e, i) {\n      if (0 !== t[Ae]) {\n        var n,\n            o = t[0],\n            s = o[0],\n            l = o[0],\n            u = o[1],\n            c = o[1];for (n = 1; n < t[Ae]; n++) {\n          o = t[n], s = r(s, o[0]), l = a(l, o[0]), u = r(u, o[1]), c = a(c, o[1]);\n        }e[0] = s, e[1] = u, i[0] = l, i[1] = c;\n      }\n    }, n.fromLine = function (t, e, i, n, o, s) {\n      o[0] = r(t, i), o[1] = r(e, n), s[0] = a(t, i), s[1] = a(e, n);\n    };var f = [],\n        d = [];return n.fromCubic = function (t, e, n, o, s, l, u, c, h, p) {\n      var v,\n          m = i.cubicExtrema,\n          g = i.cubicAt,\n          y = m(t, n, s, u, f);for (h[0] = 1 / 0, h[1] = 1 / 0, p[0] = -1 / 0, p[1] = -1 / 0, v = 0; y > v; v++) {\n        var x = g(t, n, s, u, f[v]);h[0] = r(x, h[0]), p[0] = a(x, p[0]);\n      }for (y = m(e, o, l, c, d), v = 0; y > v; v++) {\n        var _ = g(e, o, l, c, d[v]);h[1] = r(_, h[1]), p[1] = a(_, p[1]);\n      }h[0] = r(t, h[0]), p[0] = a(t, p[0]), h[0] = r(u, h[0]), p[0] = a(u, p[0]), h[1] = r(e, h[1]), p[1] = a(e, p[1]), h[1] = r(c, h[1]), p[1] = a(c, p[1]);\n    }, n.fromQuadratic = function (t, e, n, o, s, l, u, c) {\n      var h = i.quadraticExtremum,\n          f = i.quadraticAt,\n          d = a(r(h(t, n, s), 1), 0),\n          p = a(r(h(e, o, l), 1), 0),\n          v = f(t, n, s, d),\n          m = f(e, o, l, p);u[0] = r(t, s, v), u[1] = r(e, l, m), c[0] = a(t, s, v), c[1] = a(e, l, m);\n    }, n.fromArc = function (t, i, n, r, a, f, d, p, v) {\n      var m = e.min,\n          g = e.max,\n          y = Math.abs(a - f);if (1e-4 > y % h && y > 1e-4) return p[0] = t - n, p[1] = i - r, v[0] = t + n, void (v[1] = i + r);if (l[0] = s(a) * n + t, l[1] = o(a) * r + i, u[0] = s(f) * n + t, u[1] = o(f) * r + i, m(p, l, u), g(v, l, u), a %= h, 0 > a && (a += h), f %= h, 0 > f && (f += h), a > f && !d ? f += h : f > a && d && (a += h), d) {\n        var x = f;f = a, a = x;\n      }for (var _ = 0; f > _; _ += Math.PI / 2) {\n        _ > a && (c[0] = s(_) * n + t, c[1] = o(_) * r + i, m(p, c, p), g(v, c, v));\n      }\n    }, n;\n  }), e(\"zrender/config\", [], function () {\n    var t = 1;(typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) !== l && (t = Math.max(window.devicePixelRatio || 1, 1));var e = { debugMode: 0, devicePixelRatio: t };return e;\n  }), e(\"echarts/coord/cartesian/Cartesian\", [ai, ri], function (t) {\n    function e(t) {\n      return this._axes[t];\n    }var i = t(ri),\n        n = function n(t) {\n      this._axes = {}, this._dimList = [], this.name = t || \"\";\n    };return n[Ue] = { constructor: n, type: \"cartesian\", getAxis: function getAxis(t) {\n        return this._axes[t];\n      }, getAxes: function getAxes() {\n        return i.map(this._dimList, e, this);\n      }, getAxesByScale: function getAxesByScale(t) {\n        return t = t[Xe](), i[le](this.getAxes(), function (e) {\n          return e.scale.type === t;\n        });\n      }, addAxis: function addAxis(t) {\n        var e = t.dim;this._axes[e] = t, this._dimList.push(e);\n      }, dataToCoord: function dataToCoord(t) {\n        return this._dataCoordConvert(t, O);\n      }, coordToData: function coordToData(t) {\n        return this._dataCoordConvert(t, \"coordToData\");\n      }, _dataCoordConvert: function _dataCoordConvert(t, e) {\n        for (var i = this._dimList, n = t instanceof Array ? [] : {}, r = 0; r < i[Ae]; r++) {\n          var a = i[r],\n              o = this._axes[a];n[a] = o[e](t[a]);\n        }return n;\n      } }, n;\n  }), e(\"zrender/Element\", [ai, \"./core/guid\", \"./mixin/Eventful\", \"./mixin/Transformable\", \"./mixin/Animatable\", \"./core/util\"], function (t) {\n    var e = t(\"./core/guid\"),\n        i = t(\"./mixin/Eventful\"),\n        n = t(\"./mixin/Transformable\"),\n        r = t(\"./mixin/Animatable\"),\n        o = t(\"./core/util\"),\n        s = function s(t) {\n      n.call(this, t), i.call(this, t), r.call(this, t), this.id = t.id || e();\n    };return s[Ue] = { type: \"element\", name: \"\", __zr: null, ignore: !1, clipPath: null, drift: function drift(t, e) {\n        switch (this.draggable) {case \"horizontal\":\n            e = 0;break;case \"vertical\":\n            t = 0;}var i = this[a];i || (i = this[a] = [1, 0, 0, 1, 0, 0]), i[4] += t, i[5] += e, this.decomposeTransform(), this.dirty(!1);\n      }, beforeUpdate: function beforeUpdate() {}, afterUpdate: function afterUpdate() {}, update: function update() {\n        this.updateTransform();\n      }, traverse: function traverse() {}, attrKV: function attrKV(t, e) {\n        if (t === K || \"scale\" === t || \"origin\" === t) {\n          if (e) {\n            var i = this[t];i || (i = this[t] = []), i[0] = e[0], i[1] = e[1];\n          }\n        } else this[t] = e;\n      }, hide: function hide() {\n        this[Ne] = !0, this.__zr && this.__zr.refresh();\n      }, show: function show() {\n        this[Ne] = !1, this.__zr && this.__zr.refresh();\n      }, attr: function attr(t, e) {\n        if ((typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === je) this.attrKV(t, e);else if (o[Pe](t)) for (var i in t) {\n          t.hasOwnProperty(i) && this.attrKV(i, t[i]);\n        }return this.dirty(!1), this;\n      }, setClipPath: function setClipPath(t) {\n        var e = this.__zr;e && t.addSelfToZr(e), this.clipPath && this.clipPath !== t && this.removeClipPath(), this.clipPath = t, t.__zr = e, t.__clipTarget = this, this.dirty(!1);\n      }, removeClipPath: function removeClipPath() {\n        var t = this.clipPath;t && (t.__zr && t.removeSelfFromZr(t.__zr), t.__zr = null, t.__clipTarget = null, this.clipPath = null, this.dirty(!1));\n      }, addSelfToZr: function addSelfToZr(t) {\n        this.__zr = t;var e = this.animators;if (e) for (var i = 0; i < e[Ae]; i++) {\n          t[qe].addAnimator(e[i]);\n        }this.clipPath && this.clipPath.addSelfToZr(t);\n      }, removeSelfFromZr: function removeSelfFromZr(t) {\n        this.__zr = null;var e = this.animators;if (e) for (var i = 0; i < e[Ae]; i++) {\n          t[qe].removeAnimator(e[i]);\n        }this.clipPath && this.clipPath.removeSelfFromZr(t);\n      } }, o.mixin(s, r), o.mixin(s, n), o.mixin(s, i), s;\n  }), e(\"zrender/graphic/Style\", [ai], function () {\n    function t(t, e, i) {\n      var n = e.x,\n          r = e.x2,\n          a = e.y,\n          o = e.y2;e.global || (n = n * i.width + i.x, r = r * i.width + i.x, a = a * i[Re] + i.y, o = o * i[Re] + i.y);var s = t.createLinearGradient(n, a, r, o);return s;\n    }function e(t, e, i) {\n      var n = i.width,\n          r = i[Re],\n          a = Math.min(n, r),\n          o = e.x,\n          s = e.y,\n          l = e.r;e.global || (o = o * n + i.x, s = s * r + i.y, l *= a);var u = t.createRadialGradient(o, s, 0, o, s, l);return u;\n    }var i = [[\"shadowBlur\", 0], [\"shadowOffsetX\", 0], [\"shadowOffsetY\", 0], [\"shadowColor\", \"#000\"], [\"lineCap\", \"butt\"], [\"lineJoin\", \"miter\"], [\"miterLimit\", 10]],\n        n = function n(t) {\n      this.extendFrom(t);\n    };n[Ue] = { constructor: n, fill: \"#000000\", stroke: null, opacity: 1, lineDash: null, lineDashOffset: 0, shadowBlur: 0, shadowOffsetX: 0, shadowOffsetY: 0, lineWidth: 1, strokeNoScale: !1, text: null, textFill: \"#000\", textStroke: null, textPosition: \"inside\", textBaseline: null, textAlign: null, textVerticalAlign: null, textDistance: 5, textShadowBlur: 0, textShadowOffsetX: 0, textShadowOffsetY: 0, textTransform: !1, textRotation: 0, blend: null, bind: function bind(t, e, n) {\n        for (var r = this, a = n && n.style, o = !a, s = 0; s < i[Ae]; s++) {\n          var l = i[s],\n              u = l[0];(o || r[u] !== a[u]) && (t[u] = r[u] || l[1]);\n        }if ((o || r.fill !== a.fill) && (t.fillStyle = r.fill), (o || r[y] !== a[y]) && (t.strokeStyle = r[y]), (o || r[Q] !== a[Q]) && (t.globalAlpha = null == r[Q] ? 1 : r[Q]), (o || r.blend !== a.blend) && (t.globalCompositeOperation = r.blend || \"source-over\"), this.hasStroke()) {\n          var c = r[x];t[x] = c / (this.strokeNoScale && e && e.getLineScale ? e.getLineScale() : 1);\n        }\n      }, hasFill: function hasFill() {\n        var t = this.fill;return null != t && \"none\" !== t;\n      }, hasStroke: function hasStroke() {\n        var t = this[y];return null != t && \"none\" !== t && this[x] > 0;\n      }, extendFrom: function extendFrom(t, e) {\n        if (t) {\n          var i = this;for (var n in t) {\n            !t.hasOwnProperty(n) || !e && i.hasOwnProperty(n) || (i[n] = t[n]);\n          }\n        }\n      }, set: function set(t, e) {\n        (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === je ? this[t] = e : this.extendFrom(t, !0);\n      }, clone: function clone() {\n        var t = new this.constructor();return t.extendFrom(this, !0), t;\n      }, getGradient: function getGradient(i, n, r) {\n        for (var a = \"radial\" === n.type ? e : t, o = a(i, n, r), s = n.colorStops, l = 0; l < s[Ae]; l++) {\n          o.addColorStop(s[l].offset, s[l].color);\n        }return o;\n      } };for (var r = n[Ue], a = 0; a < i[Ae]; a++) {\n      var o = i[a];o[0] in r || (r[o[0]] = o[1]);\n    }return n.getGradient = r.getGradient, n;\n  }), e(\"echarts/model/mixin/boxLayout\", [ai], function () {\n    return { getBoxLayoutParams: function getBoxLayoutParams() {\n        return { left: this.get(\"left\"), top: this.get(\"top\"), right: this.get(\"right\"), bottom: this.get(Ee), width: this.get(\"width\"), height: this.get(Re) };\n      } };\n  }), e(\"echarts/util/component\", [ai, ri, \"./clazz\"], function (t) {\n    var e = t(ri),\n        i = t(\"./clazz\"),\n        n = i.parseClassType,\n        r = 0,\n        a = {},\n        o = \"_\";return a.getUID = function (t) {\n      return [t || \"\", r++, Math.random()].join(o);\n    }, a.enableSubTypeDefaulter = function (t) {\n      var e = {};return t.registerSubTypeDefaulter = function (t, i) {\n        t = n(t), e[t.main] = i;\n      }, t.determineSubType = function (i, r) {\n        var a = r.type;if (!a) {\n          var o = n(i).main;t.hasSubTypes(i) && e[o] && (a = e[o](r));\n        }return a;\n      }, t;\n    }, a.enableTopologicalTravel = function (t, i) {\n      function n(t) {\n        var n = {},\n            o = [];return e.each(t, function (s) {\n          var l = r(n, s),\n              u = l.originalDeps = i(s),\n              c = a(u, t);l.entryCount = c[Ae], 0 === l.entryCount && o.push(s), e.each(c, function (t) {\n            e[se](l.predecessor, t) < 0 && l.predecessor.push(t);var i = r(n, t);e[se](i.successor, t) < 0 && i.successor.push(s);\n          });\n        }), { graph: n, noEntryList: o };\n      }function r(t, e) {\n        return t[e] || (t[e] = { predecessor: [], successor: [] }), t[e];\n      }function a(t, i) {\n        var n = [];return e.each(t, function (t) {\n          e[se](i, t) >= 0 && n.push(t);\n        }), n;\n      }t.topologicalTravel = function (t, i, r, a) {\n        function o(t) {\n          u[t].entryCount--, 0 === u[t].entryCount && c.push(t);\n        }function s(t) {\n          h[t] = !0, o(t);\n        }if (t[Ae]) {\n          var l = n(i),\n              u = l.graph,\n              c = l.noEntryList,\n              h = {};for (e.each(t, function (t) {\n            h[t] = !0;\n          }); c[Ae];) {\n            var f = c.pop(),\n                d = u[f],\n                p = !!h[f];p && (r.call(a, f, d.originalDeps.slice()), delete h[f]), e.each(d.successor, p ? s : o);\n          }e.each(h, function () {\n            throw new Error(\"Circle dependency may exists\");\n          });\n        }\n      };\n    }, a;\n  }), e(\"echarts/coord/cartesian/axisLabelInterval\", [ai, ri, \"../axisHelper\"], function (t) {\n    var e = t(ri),\n        i = t(\"../axisHelper\");return function (t) {\n      var n = t.model,\n          r = n[Ze](\"axisLabel\"),\n          a = r.get(\"interval\");return t.type !== W || \"auto\" !== a ? \"auto\" === a ? 0 : a : i.getAxisLabelInterval(e.map(t.scale.getTicks(), t[O], t), n.getFormattedLabels(), r[Ze](ae)[ne](), t.isHorizontal());\n    };\n  }), e(\"echarts/coord/Axis\", [ai, \"../util/number\", ri], function (t) {\n    function e(t, e) {\n      var i = t[1] - t[0],\n          n = e,\n          r = i / n / 2;t[0] += r, t[1] -= r;\n    }var i = t(\"../util/number\"),\n        n = i.linearMap,\n        r = t(ri),\n        a = [0, 1],\n        o = function o(t, e, i) {\n      this.dim = t, this.scale = e, this._extent = i || [0, 0], this.inverse = !1, this.onBand = !1;\n    };return o[Ue] = { constructor: o, contain: function contain(t) {\n        var e = this._extent,\n            i = Math.min(e[0], e[1]),\n            n = Math.max(e[0], e[1]);return t >= i && n >= t;\n      }, containData: function containData(t) {\n        return this[$](this[O](t));\n      }, getExtent: function getExtent() {\n        var t = this._extent.slice();return t;\n      }, getPixelPrecision: function getPixelPrecision(t) {\n        return i.getPixelPrecision(t || this.scale[j](), this._extent);\n      }, setExtent: function setExtent(t, e) {\n        var i = this._extent;i[0] = t, i[1] = e;\n      }, dataToCoord: function dataToCoord(t, i) {\n        var r = this._extent,\n            o = this.scale;return t = o[Y](t), this.onBand && o.type === G && (r = r.slice(), e(r, o.count())), n(t, a, r, i);\n      }, coordToData: function coordToData(t, i) {\n        var r = this._extent,\n            o = this.scale;this.onBand && o.type === G && (r = r.slice(), e(r, o.count()));var s = n(t, r, a, i);return this.scale.scale(s);\n      }, getTicksCoords: function getTicksCoords(t) {\n        if (this.onBand && !t) {\n          for (var e = this.getBands(), i = [], n = 0; n < e[Ae]; n++) {\n            i.push(e[n][0]);\n          }return e[n - 1] && i.push(e[n - 1][1]), i;\n        }return r.map(this.scale.getTicks(), this[O], this);\n      }, getLabelsCoords: function getLabelsCoords() {\n        return r.map(this.scale.getTicks(), this[O], this);\n      }, getBands: function getBands() {\n        for (var t = this[j](), e = [], i = this.scale.count(), n = t[0], r = t[1], a = r - n, o = 0; i > o; o++) {\n          e.push([a * o / i + n, a * (o + 1) / i + n]);\n        }return e;\n      }, getBandWidth: function getBandWidth() {\n        var t = this._extent,\n            e = this.scale[j](),\n            i = e[1] - e[0] + (this.onBand ? 1 : 0);0 === i && (i = 1);var n = Math.abs(t[1] - t[0]);return Math.abs(n) / i;\n      } }, o;\n  }), e(\"zrender/core/guid\", [], function () {\n    var t = 2311;return function () {\n      return t++;\n    };\n  }), e(\"zrender/mixin/Transformable\", [ai, \"../core/matrix\", \"../core/vector\"], function (t) {\n    function e(t) {\n      return t > o || -o > t;\n    }var i = t(\"../core/matrix\"),\n        n = t(\"../core/vector\"),\n        r = i.identity,\n        o = 5e-5,\n        s = function s(t) {\n      t = t || {}, t[K] || (this[K] = [0, 0]), null == t[v] && (this[v] = 0), t.scale || (this.scale = [1, 1]), this.origin = this.origin || null;\n    },\n        l = s[Ue];l[a] = null, l.needLocalTransform = function () {\n      return e(this[v]) || e(this[K][0]) || e(this[K][1]) || e(this.scale[0] - 1) || e(this.scale[1] - 1);\n    }, l.updateTransform = function () {\n      var t = this[m],\n          e = t && t[a],\n          n = this.needLocalTransform(),\n          o = this[a];return n || e ? (o = o || i[Oe](), n ? this.getLocalTransform(o) : r(o), e && (n ? i.mul(o, t[a], o) : i.copy(o, t[a])), this[a] = o, this.invTransform = this.invTransform || i[Oe](), void i.invert(this.invTransform, o)) : void (o && r(o));\n    }, l.getLocalTransform = function (t) {\n      t = t || [], r(t);var e = this.origin,\n          n = this.scale,\n          a = this[v],\n          o = this[K];return e && (t[4] -= e[0], t[5] -= e[1]), i.scale(t, t, n), a && i.rotate(t, t, a), e && (t[4] += e[0], t[5] += e[1]), t[4] += o[0], t[5] += o[1], t;\n    }, l.setTransform = function (t) {\n      var e = this[a],\n          i = t.dpr || 1;e ? t.setTransform(i * e[0], i * e[1], i * e[2], i * e[3], i * e[4], i * e[5]) : t.setTransform(i, 0, 0, i, 0, 0);\n    }, l.restoreTransform = function (t) {\n      var e = (this[a], t.dpr || 1);t.setTransform(e, 0, 0, e, 0, 0);\n    };var u = [];return l.decomposeTransform = function () {\n      if (this[a]) {\n        var t = this[m],\n            n = this[a];t && t[a] && (i.mul(u, t.invTransform, n), n = u);var r = n[0] * n[0] + n[1] * n[1],\n            o = n[2] * n[2] + n[3] * n[3],\n            s = this[K],\n            l = this.scale;e(r - 1) && (r = Math.sqrt(r)), e(o - 1) && (o = Math.sqrt(o)), n[0] < 0 && (r = -r), n[3] < 0 && (o = -o), s[0] = n[4], s[1] = n[5], l[0] = r, l[1] = o, this[v] = Math.atan2(-n[1] / o, n[0] / r);\n      }\n    }, l.getGlobalScale = function () {\n      var t = this[a];if (!t) return [1, 1];var e = Math.sqrt(t[0] * t[0] + t[1] * t[1]),\n          i = Math.sqrt(t[2] * t[2] + t[3] * t[3]);return t[0] < 0 && (e = -e), t[3] < 0 && (i = -i), [e, i];\n    }, l.transformCoordToLocal = function (t, e) {\n      var i = [t, e],\n          r = this.invTransform;return r && n[_](i, i, r), i;\n    }, l.transformCoordToGlobal = function (t, e) {\n      var i = [t, e],\n          r = this[a];return r && n[_](i, i, r), i;\n    }, s;\n  }), e(\"zrender/mixin/Animatable\", [ai, \"../animation/Animator\", \"../core/util\", \"../core/log\"], function (t) {\n    var e = t(\"../animation/Animator\"),\n        i = t(\"../core/util\"),\n        n = i.isString,\n        r = i.isFunction,\n        a = i[Pe],\n        o = t(\"../core/log\"),\n        s = function s() {\n      this.animators = [];\n    };return s[Ue] = { constructor: s, animate: function animate(t, n) {\n        var r,\n            a = !1,\n            s = this,\n            l = this.__zr;\n        if (t) {\n          var u = t.split(\".\"),\n              c = s;a = \"shape\" === u[0];for (var h = 0, f = u[Ae]; f > h; h++) {\n            c && (c = c[u[h]]);\n          }c && (r = c);\n        } else r = s;if (!r) return void o('Property \"' + t + '\" is not existed in element ' + s.id);var d = s.animators,\n            p = new e(r, n);return p.during(function () {\n          s.dirty(a);\n        }).done(function () {\n          d[Me](i[se](d, p), 1);\n        }), d.push(p), l && l[qe].addAnimator(p), p;\n      }, stopAnimation: function stopAnimation(t) {\n        for (var e = this.animators, i = e[Ae], n = 0; i > n; n++) {\n          e[n].stop(t);\n        }return e[Ae] = 0, this;\n      }, animateTo: function animateTo(t, e, i, a, o) {\n        function s() {\n          u--, u || o && o();\n        }n(i) ? (o = a, a = i, i = 0) : r(a) ? (o = a, a = \"linear\", i = 0) : r(i) ? (o = i, i = 0) : r(e) ? (o = e, e = 500) : e || (e = 500), this.stopAnimation(), this._animateToShallow(\"\", this, t, e, i, a, o);var l = this.animators.slice(),\n            u = l[Ae];u || o && o();for (var c = 0; c < l[Ae]; c++) {\n          l[c].done(s).start(a);\n        }\n      }, _animateToShallow: function _animateToShallow(t, e, n, r, o) {\n        var s = {},\n            l = 0;for (var u in n) {\n          if (null != e[u]) a(n[u]) && !i.isArrayLike(n[u]) ? this._animateToShallow(t ? t + \".\" + u : u, e[u], n[u], r, o) : (s[u] = n[u], l++);else if (null != n[u]) if (t) {\n            var c = {};c[t] = {}, c[t][u] = n[u], this.attr(c);\n          } else this.attr(u, n[u]);\n        }return l > 0 && this.animate(t, !1).when(null == r ? 500 : r, s).delay(o || 0), this;\n      } }, s;\n  }), e(\"echarts/coord/cartesian/AxisModel\", [ai, \"../../model/Component\", ri, \"../axisModelCreator\", \"../axisModelCommonMixin\"], function (t) {\n    function e(t, e) {\n      return e.type || (e.data ? W : \"value\");\n    }var i = t(\"../../model/Component\"),\n        n = t(ri),\n        r = t(\"../axisModelCreator\"),\n        a = i[ke]({ type: \"cartesian2dAxis\", axis: null, init: function init() {\n        a.superApply(this, \"init\", arguments), this._resetRange();\n      }, mergeOption: function mergeOption() {\n        a.superApply(this, p, arguments), this._resetRange();\n      }, restoreData: function restoreData() {\n        a.superApply(this, \"restoreData\", arguments), this._resetRange();\n      }, setRange: function setRange(t, e) {\n        this[d].rangeStart = t, this[d].rangeEnd = e;\n      }, getMin: function getMin() {\n        var t = this[d];return null != t.rangeStart ? t.rangeStart : t.min;\n      }, getMax: function getMax() {\n        var t = this[d];return null != t.rangeEnd ? t.rangeEnd : t.max;\n      }, getNeedCrossZero: function getNeedCrossZero() {\n        var t = this[d];return null != t.rangeStart || null != t.rangeEnd ? !1 : !t.scale;\n      }, findGridModel: function findGridModel() {\n        return this[s][F]({ mainType: \"grid\", index: this.get(\"gridIndex\"), id: this.get(\"gridId\") })[0];\n      }, _resetRange: function _resetRange() {\n        this[d].rangeStart = this[d].rangeEnd = null;\n      } });n.merge(a[Ue], t(\"../axisModelCommonMixin\"));var o = { offset: 0 };return r(\"x\", a, e, o), r(\"y\", a, e, o), a;\n  }), e(\"zrender/core/log\", [ai, \"../config\"], function (t) {\n    var e = t(\"../config\");return function () {\n      if (0 !== e.debugMode) if (1 == e.debugMode) for (var t in arguments) {\n        throw new Error(arguments[t]);\n      } else if (e.debugMode > 1) for (var t in arguments) {\n        console.log(arguments[t]);\n      }\n    };\n  }), e(\"zrender/animation/Animator\", [ai, \"./Clip\", \"../tool/color\", \"../core/util\"], function (t) {\n    function e(t, e) {\n      return t[e];\n    }function i(t, e, i) {\n      t[e] = i;\n    }function n(t, e, i) {\n      return (e - t) * i + t;\n    }function r(t, e, i) {\n      return i > .5 ? e : t;\n    }function a(t, e, i, r, a) {\n      var o = t[Ae];if (1 == a) for (var s = 0; o > s; s++) {\n        r[s] = n(t[s], e[s], i);\n      } else for (var l = t[0][Ae], s = 0; o > s; s++) {\n        for (var u = 0; l > u; u++) {\n          r[s][u] = n(t[s][u], e[s][u], i);\n        }\n      }\n    }function o(t, e, i) {\n      var n = t[Ae],\n          r = e[Ae];if (n !== r) {\n        var a = n > r;if (a) t[Ae] = r;else for (var o = n; r > o; o++) {\n          t.push(1 === i ? e[o] : g.call(e[o]));\n        }\n      }for (var s = t[0] && t[0][Ae], o = 0; o < t[Ae]; o++) {\n        if (1 === i) isNaN(t[o]) && (t[o] = e[o]);else for (var l = 0; s > l; l++) {\n          isNaN(t[o][l]) && (t[o][l] = e[o][l]);\n        }\n      }\n    }function s(t, e, i) {\n      if (t === e) return !0;var n = t[Ae];if (n !== e[Ae]) return !1;if (1 === i) {\n        for (var r = 0; n > r; r++) {\n          if (t[r] !== e[r]) return !1;\n        }\n      } else for (var a = t[0][Ae], r = 0; n > r; r++) {\n        for (var o = 0; a > o; o++) {\n          if (t[r][o] !== e[r][o]) return !1;\n        }\n      }return !0;\n    }function l(t, e, i, n, r, a, o, s, l) {\n      var c = t[Ae];if (1 == l) for (var h = 0; c > h; h++) {\n        s[h] = u(t[h], e[h], i[h], n[h], r, a, o);\n      } else for (var f = t[0][Ae], h = 0; c > h; h++) {\n        for (var d = 0; f > d; d++) {\n          s[h][d] = u(t[h][d], e[h][d], i[h][d], n[h][d], r, a, o);\n        }\n      }\n    }function u(t, e, i, n, r, a, o) {\n      var s = .5 * (i - t),\n          l = .5 * (n - e);return (2 * (e - i) + s + l) * o + (-3 * (e - i) - 2 * s - l) * a + s * r + e;\n    }function c(t) {\n      if (m(t)) {\n        var e = t[Ae];if (m(t[0])) {\n          for (var i = [], n = 0; e > n; n++) {\n            i.push(g.call(t[n]));\n          }return i;\n        }return g.call(t);\n      }return t;\n    }function h(t) {\n      return t[0] = Math.floor(t[0]), t[1] = Math.floor(t[1]), t[2] = Math.floor(t[2]), \"rgba(\" + t.join(\",\") + \")\";\n    }function f(t, e, i, c, f) {\n      var v = t._getter,\n          g = t._setter,\n          y = \"spline\" === e,\n          x = c[Ae];if (x) {\n        var _,\n            b = c[0].value,\n            w = m(b),\n            M = !1,\n            S = !1,\n            T = w && m(b[0]) ? 2 : 1;c.sort(function (t, e) {\n          return t.time - e.time;\n        }), _ = c[x - 1].time;for (var A = [], C = [], k = c[0].value, L = !0, P = 0; x > P; P++) {\n          A.push(c[P].time / _);var D = c[P].value;if (w && s(D, k, T) || !w && D === k || (L = !1), k = D, (typeof D === \"undefined\" ? \"undefined\" : _typeof(D)) == je) {\n            var z = p.parse(D);z ? (D = z, M = !0) : S = !0;\n          }C.push(D);\n        }if (!L) {\n          for (var I = C[x - 1], P = 0; x - 1 > P; P++) {\n            w ? o(C[P], I, T) : !isNaN(C[P]) || isNaN(I) || S || M || (C[P] = I);\n          }w && o(v(t._target, f), I, T);var O,\n              R,\n              E,\n              N,\n              B,\n              V,\n              F = 0,\n              H = 0;if (M) var G = [0, 0, 0, 0];var Z = function Z(t, e) {\n            var i;if (0 > e) i = 0;else if (H > e) {\n              for (O = Math.min(F + 1, x - 1), i = O; i >= 0 && !(A[i] <= e); i--) {}i = Math.min(i, x - 2);\n            } else {\n              for (i = F; x > i && !(A[i] > e); i++) {}i = Math.min(i - 1, x - 2);\n            }F = i, H = e;var o = A[i + 1] - A[i];if (0 !== o) if (R = (e - A[i]) / o, y) {\n              if (N = C[i], E = C[0 === i ? i : i - 1], B = C[i > x - 2 ? x - 1 : i + 1], V = C[i > x - 3 ? x - 1 : i + 2], w) l(E, N, B, V, R, R * R, R * R * R, v(t, f), T);else {\n                var s;if (M) s = l(E, N, B, V, R, R * R, R * R * R, G, 1), s = h(G);else {\n                  if (S) return r(N, B, R);s = u(E, N, B, V, R, R * R, R * R * R);\n                }g(t, f, s);\n              }\n            } else if (w) a(C[i], C[i + 1], R, v(t, f), T);else {\n              var s;if (M) a(C[i], C[i + 1], R, G, 1), s = h(G);else {\n                if (S) return r(C[i], C[i + 1], R);s = n(C[i], C[i + 1], R);\n              }g(t, f, s);\n            }\n          },\n              q = new d({ target: t._target, life: _, loop: t._loop, delay: t._delay, onframe: Z, ondestroy: i });return e && \"spline\" !== e && (q.easing = e), q;\n        }\n      }\n    }var d = t(\"./Clip\"),\n        p = t(\"../tool/color\"),\n        v = t(\"../core/util\"),\n        m = v.isArrayLike,\n        g = Array[Ue].slice,\n        y = function y(t, n, r, a) {\n      this._tracks = {}, this._target = t, this._loop = n || !1, this._getter = r || e, this._setter = a || i, this._clipCount = 0, this._delay = 0, this._doneList = [], this._onframeList = [], this._clipList = [];\n    };return y[Ue] = { when: function when(t, e) {\n        var i = this._tracks;for (var n in e) {\n          if (!i[n]) {\n            i[n] = [];var r = this._getter(this._target, n);if (null == r) continue;0 !== t && i[n].push({ time: 0, value: c(r) });\n          }i[n].push({ time: t, value: e[n] });\n        }return this;\n      }, during: function during(t) {\n        return this._onframeList.push(t), this;\n      }, _doneCallback: function _doneCallback() {\n        this._tracks = {}, this._clipList[Ae] = 0;for (var t = this._doneList, e = t[Ae], i = 0; e > i; i++) {\n          t[i].call(this);\n        }\n      }, start: function start(t) {\n        var e,\n            i = this,\n            n = 0,\n            r = function r() {\n          n--, n || i._doneCallback();\n        };for (var a in this._tracks) {\n          var o = f(this, t, r, this._tracks[a], a);o && (this._clipList.push(o), n++, this[qe] && this[qe].addClip(o), e = o);\n        }if (e) {\n          var s = e.onframe;e.onframe = function (t, e) {\n            s(t, e);for (var n = 0; n < i._onframeList[Ae]; n++) {\n              i._onframeList[n](t, e);\n            }\n          };\n        }return n || this._doneCallback(), this;\n      }, stop: function stop(t) {\n        for (var e = this._clipList, i = this[qe], n = 0; n < e[Ae]; n++) {\n          var r = e[n];t && r.onframe(this._target, 1), i && i.removeClip(r);\n        }e[Ae] = 0;\n      }, delay: function delay(t) {\n        return this._delay = t, this;\n      }, done: function done(t) {\n        return t && this._doneList.push(t), this;\n      }, getClips: function getClips() {\n        return this._clipList;\n      } }, y;\n  }), e(\"echarts/coord/axisModelCreator\", [ai, \"./axisDefault\", ri, \"../model/Component\", \"../util/layout\"], function (t) {\n    var e = t(\"./axisDefault\"),\n        i = t(ri),\n        n = t(\"../model/Component\"),\n        r = t(\"../util/layout\"),\n        a = [\"value\", W, \"time\", \"log\"];return function (t, o, s, l) {\n      i.each(a, function (n) {\n        o[ke]({ type: t + \"Axis.\" + n, mergeDefaultAndTheme: function mergeDefaultAndTheme(e, a) {\n            var o = this.layoutMode,\n                l = o ? r.getLayoutParams(e) : {},\n                u = a.getTheme();i.merge(e, u.get(n + \"Axis\")), i.merge(e, this.getDefaultOption()), e.type = s(t, e), o && r.mergeLayoutParam(e, l, o);\n          }, defaultOption: i.mergeAll([{}, e[n + \"Axis\"], l], !0) });\n      }), n.registerSubTypeDefaulter(t + \"Axis\", i.curry(s, t));\n    };\n  }), e(\"echarts/coord/axisModelCommonMixin\", [ai, ri, \"./axisHelper\"], function (t) {\n    function e(t) {\n      return r[Pe](t) && null != t.value ? t.value : t;\n    }function i() {\n      return this.get(\"type\") === W && r.map(this.get(\"data\"), e);\n    }function n() {\n      return a.getFormattedLabels(this.axis, this.get(\"axisLabel.formatter\"));\n    }var r = t(ri),\n        a = t(\"./axisHelper\");return { getFormattedLabels: n, getCategories: i };\n  }), e(\"zrender/animation/Clip\", [ai, \"./easing\"], function (t) {\n    function e(t) {\n      this._target = t[xe], this._life = t.life || 1e3, this._delay = t.delay || 0, this._initialized = !1, this.loop = null == t.loop ? !1 : t.loop, this.gap = t.gap || 0, this.easing = t.easing || \"Linear\", this.onframe = t.onframe, this.ondestroy = t.ondestroy, this.onrestart = t.onrestart;\n    }var i = t(\"./easing\");return e[Ue] = { constructor: e, step: function step(t) {\n        this._initialized || (this._startTime = t + this._delay, this._initialized = !0);var e = (t - this._startTime) / this._life;if (!(0 > e)) {\n          e = Math.min(e, 1);var n = this.easing,\n              r = (typeof n === \"undefined\" ? \"undefined\" : _typeof(n)) == je ? i[n] : n,\n              a = (typeof r === \"undefined\" ? \"undefined\" : _typeof(r)) === ce ? r(e) : e;return this.fire(\"frame\", a), 1 == e ? this.loop ? (this.restart(t), \"restart\") : (this._needsRemove = !0, \"destroy\") : null;\n        }\n      }, restart: function restart(t) {\n        var e = (t - this._startTime) % this._life;this._startTime = t - e + this.gap, this._needsRemove = !1;\n      }, fire: function fire(t, e) {\n        t = \"on\" + t, this[t] && this[t](this._target, e);\n      } }, e;\n  }), e(\"echarts/coord/axisDefault\", [ai, ri], function (t) {\n    var e = t(ri),\n        i = { show: !0, zlevel: 0, z: 0, inverse: !1, name: \"\", nameLocation: \"end\", nameRotate: null, nameTruncate: { maxWidth: null, ellipsis: \"...\", placeholder: \".\" }, nameTextStyle: {}, nameGap: 15, silent: !1, triggerEvent: !1, tooltip: { show: !1 }, axisLine: { show: !0, onZero: !0, lineStyle: { color: \"#333\", width: 1, type: \"solid\" } }, axisTick: { show: !0, inside: !1, length: 5, lineStyle: { width: 1 } }, axisLabel: { show: !0, inside: !1, rotate: 0, margin: 8, textStyle: { fontSize: 12 } }, splitLine: { show: !0, lineStyle: { color: [\"#ccc\"], width: 1, type: \"solid\" } }, splitArea: { show: !1, areaStyle: { color: [\"rgba(250,250,250,0.3)\", \"rgba(200,200,200,0.3)\"] } } },\n        n = e.merge({ boundaryGap: !0, splitLine: { show: !1 }, axisTick: { alignWithLabel: !1, interval: \"auto\" }, axisLabel: { interval: \"auto\" } }, i),\n        r = e.merge({ boundaryGap: [0, 0], splitNumber: 5 }, i),\n        a = e[Je]({ scale: !0, min: \"dataMin\", max: \"dataMax\" }, r),\n        o = e[Je]({ logBase: 10 }, r);return o.scale = !0, { categoryAxis: n, valueAxis: r, timeAxis: a, logAxis: o };\n  }), e(\"zrender/animation/easing\", [], function () {\n    var t = { linear: function linear(t) {\n        return t;\n      }, quadraticIn: function quadraticIn(t) {\n        return t * t;\n      }, quadraticOut: function quadraticOut(t) {\n        return t * (2 - t);\n      }, quadraticInOut: function quadraticInOut(t) {\n        return (t *= 2) < 1 ? .5 * t * t : -.5 * (--t * (t - 2) - 1);\n      }, cubicIn: function cubicIn(t) {\n        return t * t * t;\n      }, cubicOut: function cubicOut(t) {\n        return --t * t * t + 1;\n      }, cubicInOut: function cubicInOut(t) {\n        return (t *= 2) < 1 ? .5 * t * t * t : .5 * ((t -= 2) * t * t + 2);\n      }, quarticIn: function quarticIn(t) {\n        return t * t * t * t;\n      }, quarticOut: function quarticOut(t) {\n        return 1 - --t * t * t * t;\n      }, quarticInOut: function quarticInOut(t) {\n        return (t *= 2) < 1 ? .5 * t * t * t * t : -.5 * ((t -= 2) * t * t * t - 2);\n      }, quinticIn: function quinticIn(t) {\n        return t * t * t * t * t;\n      }, quinticOut: function quinticOut(t) {\n        return --t * t * t * t * t + 1;\n      }, quinticInOut: function quinticInOut(t) {\n        return (t *= 2) < 1 ? .5 * t * t * t * t * t : .5 * ((t -= 2) * t * t * t * t + 2);\n      }, sinusoidalIn: function sinusoidalIn(t) {\n        return 1 - Math.cos(t * Math.PI / 2);\n      }, sinusoidalOut: function sinusoidalOut(t) {\n        return Math.sin(t * Math.PI / 2);\n      }, sinusoidalInOut: function sinusoidalInOut(t) {\n        return .5 * (1 - Math.cos(Math.PI * t));\n      }, exponentialIn: function exponentialIn(t) {\n        return 0 === t ? 0 : Math.pow(1024, t - 1);\n      }, exponentialOut: function exponentialOut(t) {\n        return 1 === t ? 1 : 1 - Math.pow(2, -10 * t);\n      }, exponentialInOut: function exponentialInOut(t) {\n        return 0 === t ? 0 : 1 === t ? 1 : (t *= 2) < 1 ? .5 * Math.pow(1024, t - 1) : .5 * (-Math.pow(2, -10 * (t - 1)) + 2);\n      }, circularIn: function circularIn(t) {\n        return 1 - Math.sqrt(1 - t * t);\n      }, circularOut: function circularOut(t) {\n        return Math.sqrt(1 - --t * t);\n      }, circularInOut: function circularInOut(t) {\n        return (t *= 2) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n      }, elasticIn: function elasticIn(t) {\n        var e,\n            i = .1,\n            n = .4;return 0 === t ? 0 : 1 === t ? 1 : (!i || 1 > i ? (i = 1, e = n / 4) : e = n * Math.asin(1 / i) / (2 * Math.PI), -(i * Math.pow(2, 10 * (t -= 1)) * Math.sin(2 * (t - e) * Math.PI / n)));\n      }, elasticOut: function elasticOut(t) {\n        var e,\n            i = .1,\n            n = .4;return 0 === t ? 0 : 1 === t ? 1 : (!i || 1 > i ? (i = 1, e = n / 4) : e = n * Math.asin(1 / i) / (2 * Math.PI), i * Math.pow(2, -10 * t) * Math.sin(2 * (t - e) * Math.PI / n) + 1);\n      }, elasticInOut: function elasticInOut(t) {\n        var e,\n            i = .1,\n            n = .4;return 0 === t ? 0 : 1 === t ? 1 : (!i || 1 > i ? (i = 1, e = n / 4) : e = n * Math.asin(1 / i) / (2 * Math.PI), (t *= 2) < 1 ? -.5 * i * Math.pow(2, 10 * (t -= 1)) * Math.sin(2 * (t - e) * Math.PI / n) : i * Math.pow(2, -10 * (t -= 1)) * Math.sin(2 * (t - e) * Math.PI / n) * .5 + 1);\n      }, backIn: function backIn(t) {\n        var e = 1.70158;return t * t * ((e + 1) * t - e);\n      }, backOut: function backOut(t) {\n        var e = 1.70158;return --t * t * ((e + 1) * t + e) + 1;\n      }, backInOut: function backInOut(t) {\n        var e = 2.5949095;return (t *= 2) < 1 ? .5 * t * t * ((e + 1) * t - e) : .5 * ((t -= 2) * t * ((e + 1) * t + e) + 2);\n      }, bounceIn: function bounceIn(e) {\n        return 1 - t.bounceOut(1 - e);\n      }, bounceOut: function bounceOut(t) {\n        return 1 / 2.75 > t ? 7.5625 * t * t : 2 / 2.75 > t ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : 2.5 / 2.75 > t ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n      }, bounceInOut: function bounceInOut(e) {\n        return .5 > e ? .5 * t.bounceIn(2 * e) : .5 * t.bounceOut(2 * e - 1) + .5;\n      } };return t;\n  }), e(\"echarts/chart/helper/createListFromArray\", [ai, \"../../data/List\", \"../../data/helper/completeDimensions\", ri, \"../../util/model\", \"../../CoordinateSystem\"], function (t) {\n    function e(t) {\n      for (var e = 0; e < t[Ae] && null == t[e];) {\n        e++;\n      }return t[e];\n    }function i(t) {\n      var i = e(t);return null != i && !c[he](d(i));\n    }function n(t, e, n) {\n      t = t || [];var r = e.get(ti),\n          a = v[r],\n          m = f.get(r),\n          g = a && a(t, e, n),\n          y = g && g[B];y || (y = m && m[B] || [\"x\", \"y\"], y = u(y, t, y[U]([\"value\"])));var x = g ? g.categoryIndex : -1,\n          _ = new l(y, e),\n          b = s(g, t),\n          w = {},\n          M = x >= 0 && i(t) ? function (t, e, i, n) {\n        return h.isDataItemOption(t) && (_[o] = !0), n === x ? i : p(d(t), y[n]);\n      } : function (t, e, i, n) {\n        var r = d(t),\n            a = p(r && r[n], y[n]);h.isDataItemOption(t) && (_[o] = !0);var s = g && g.categoryAxesModels;return s && s[e] && (typeof a === \"undefined\" ? \"undefined\" : _typeof(a)) === je && (w[e] = w[e] || s[e].getCategories(), a = c[se](w[e], a), 0 > a && !isNaN(a) && (a = +a)), a;\n      };return _[o] = !1, _.initData(t, b, M), _;\n    }function r(t) {\n      return t !== W && \"time\" !== t;\n    }function a(t) {\n      return t === W ? G : \"time\" === t ? \"time\" : \"float\";\n    }function s(t, e) {\n      var i,\n          n = [],\n          r = t && t[B][t.categoryIndex];if (r && (i = t.categoryAxesModels[r.name]), i) {\n        var a = i.getCategories();if (a) {\n          var o = e[Ae];if (c[he](e[0]) && e[0][Ae] > 1) {\n            n = [];for (var s = 0; o > s; s++) {\n              n[s] = a[e[s][t.categoryIndex || 0]];\n            }\n          } else n = a.slice(0);\n        }\n      }return n;\n    }var l = t(\"../../data/List\"),\n        u = t(\"../../data/helper/completeDimensions\"),\n        c = t(ri),\n        h = t(\"../../util/model\"),\n        f = t(\"../../CoordinateSystem\"),\n        d = h.getDataItemValue,\n        p = h.converDataValue,\n        v = { cartesian2d: function cartesian2d(t, e, i) {\n        var n = c.map([\"xAxis\", \"yAxis\"], function (t) {\n          return i[F]({ mainType: t, index: e.get(t + \"Index\"), id: e.get(t + \"Id\") })[0];\n        }),\n            o = n[0],\n            s = n[1],\n            l = o.get(\"type\"),\n            h = s.get(\"type\"),\n            f = [{ name: \"x\", type: a(l), stackable: r(l) }, { name: \"y\", type: a(h), stackable: r(h) }],\n            d = l === W,\n            p = h === W;u(f, t, [\"x\", \"y\", \"z\"]);var v = {};return d && (v.x = o), p && (v.y = s), { dimensions: f, categoryIndex: d ? 0 : p ? 1 : -1, categoryAxesModels: v };\n      }, polar: function polar(t, e, i) {\n        var n = i[F]({ mainType: \"polar\", index: e.get(\"polarIndex\"), id: e.get(\"polarId\") })[0],\n            o = n.findAxisModel(\"angleAxis\"),\n            s = n.findAxisModel(\"radiusAxis\"),\n            l = s.get(\"type\"),\n            c = o.get(\"type\"),\n            h = [{ name: \"radius\", type: a(l), stackable: r(l) }, { name: \"angle\", type: a(c), stackable: r(c) }],\n            f = c === W,\n            d = l === W;u(h, t, [\"radius\", \"angle\", \"value\"]);var p = {};return d && (p.radius = s), f && (p.angle = o), { dimensions: h, categoryIndex: f ? 1 : d ? 0 : -1, categoryAxesModels: p };\n      }, geo: function geo(t) {\n        return { dimensions: u([{ name: \"lng\" }, { name: \"lat\" }], t, [\"lng\", \"lat\", \"value\"]) };\n      } };return n;\n  }), e(\"zrender/contain/cubic\", [ai, \"../core/curve\"], function (t) {\n    var e = t(\"../core/curve\");return { containStroke: function containStroke(t, i, n, r, a, o, s, l, u, c, h) {\n        if (0 === u) return !1;var f = u;if (h > i + f && h > r + f && h > o + f && h > l + f || i - f > h && r - f > h && o - f > h && l - f > h || c > t + f && c > n + f && c > a + f && c > s + f || t - f > c && n - f > c && a - f > c && s - f > c) return !1;var d = e.cubicProjectPoint(t, i, n, r, a, o, s, l, c, h, null);return f / 2 >= d;\n      } };\n  }), e(\"zrender/contain/line\", [], function () {\n    return { containStroke: function containStroke(t, e, i, n, r, a, o) {\n        if (0 === r) return !1;var s = r,\n            l = 0,\n            u = t;if (o > e + s && o > n + s || e - s > o && n - s > o || a > t + s && a > i + s || t - s > a && i - s > a) return !1;if (t === i) return Math.abs(a - t) <= s / 2;l = (e - n) / (t - i), u = (t * n - i * e) / (t - i);var c = l * a - o + u,\n            h = c * c / (l * l + 1);return s / 2 * s / 2 >= h;\n      } };\n  }), e(\"zrender/contain/util\", [ai], function () {\n    var t = 2 * Math.PI;return { normalizeRadian: function normalizeRadian(e) {\n        return e %= t, 0 > e && (e += t), e;\n      } };\n  }), e(\"zrender/contain/quadratic\", [ai, \"../core/curve\"], function (t) {\n    var e = t(\"../core/curve\");return { containStroke: function containStroke(t, i, n, r, a, o, s, l, u) {\n        if (0 === s) return !1;var c = s;if (u > i + c && u > r + c && u > o + c || i - c > u && r - c > u && o - c > u || l > t + c && l > n + c && l > a + c || t - c > l && n - c > l && a - c > l) return !1;var h = e.quadraticProjectPoint(t, i, n, r, a, o, l, u, null);return c / 2 >= h;\n      } };\n  }), e(\"zrender/contain/arc\", [ai, \"./util\"], function (t) {\n    var e = t(\"./util\").normalizeRadian,\n        i = 2 * Math.PI;return { containStroke: function containStroke(t, n, r, a, o, s, l, u, c) {\n        if (0 === l) return !1;var h = l;u -= t, c -= n;var f = Math.sqrt(u * u + c * c);if (f - h > r || r > f + h) return !1;if (Math.abs(a - o) % i < 1e-4) return !0;if (s) {\n          var d = a;a = e(o), o = e(d);\n        } else a = e(a), o = e(o);a > o && (o += i);var p = Math.atan2(c, u);return 0 > p && (p += i), p >= a && o >= p || p + i >= a && o >= p + i;\n      } };\n  }), e(\"zrender/contain/windingLine\", [], function () {\n    return function (t, e, i, n, r, a) {\n      if (a > e && a > n || e > a && n > a) return 0;if (n === e) return 0;var o = e > n ? 1 : -1,\n          s = (a - e) / (n - e);(1 === s || 0 === s) && (o = e > n ? .5 : -.5);var l = s * (i - t) + t;return l > r ? o : 0;\n    };\n  }), e(\"zrender/core/LRU\", [ai], function () {\n    var t = function t() {\n      this.head = null, this.tail = null, this._len = 0;\n    },\n        e = t[Ue];e.insert = function (t) {\n      var e = new i(t);return this.insertEntry(e), e;\n    }, e.insertEntry = function (t) {\n      this.head ? (this.tail.next = t, t.prev = this.tail, this.tail = t) : this.head = this.tail = t, this._len++;\n    }, e[Le] = function (t) {\n      var e = t.prev,\n          i = t.next;e ? e.next = i : this.head = i, i ? i.prev = e : this.tail = e, t.next = t.prev = null, this._len--;\n    }, e.len = function () {\n      return this._len;\n    };var i = function i(t) {\n      this.value = t, this.next, this.prev;\n    },\n        n = function n(e) {\n      this._list = new t(), this._map = {}, this._maxSize = e || 10;\n    },\n        r = n[Ue];return r.put = function (t, e) {\n      var i = this._list,\n          n = this._map;if (null == n[t]) {\n        var r = i.len();if (r >= this._maxSize && r > 0) {\n          var a = i.head;i[Le](a), delete n[a.key];\n        }var o = i.insert(e);o.key = t, n[t] = o;\n      }\n    }, r.get = function (t) {\n      var e = this._map[t],\n          i = this._list;return null != e ? (e !== i.tail && (i[Le](e), i.insertEntry(e)), e.value) : void 0;\n    }, r.clear = function () {\n      this._list.clear(), this._map = {};\n    }, n;\n  }), e(\"echarts/data/helper/completeDimensions\", [ai, ri], function (t) {\n    function e(t, e, a, o) {\n      if (!e) return t;var s = i(e[0]),\n          l = n[he](s) && s[Ae] || 1;a = a || [], o = o || \"extra\";for (var u = 0; l > u; u++) {\n        if (!t[u]) {\n          var c = a[u] || o + (u - a[Ae]);t[u] = r(e, u) ? { type: \"ordinal\", name: c } : c;\n        }\n      }return t;\n    }function i(t) {\n      return n[he](t) ? t : n[Pe](t) ? t.value : t;\n    }var n = t(ri),\n        r = e.guessOrdinal = function (t, e) {\n      for (var r = 0, a = t[Ae]; a > r; r++) {\n        var o = i(t[r]);if (!n[he](o)) return !1;var o = o[e];if (null != o && isFinite(o)) return !1;if (n.isString(o) && \"-\" !== o) return !0;\n      }return !1;\n    };return e;\n  }), e(\"echarts/data/DataDiffer\", [ai], function () {\n    function t(t) {\n      return t;\n    }function e(e, i, n, r) {\n      this._old = e, this._new = i, this._oldKeyGetter = n || t, this._newKeyGetter = r || t;\n    }function i(t, e, i, n) {\n      for (var r = 0; r < t[Ae]; r++) {\n        var a = n(t[r], r),\n            o = e[a];null == o ? (i.push(a), e[a] = r) : (o[Ae] || (e[a] = o = [o]), o.push(r));\n      }\n    }return e[Ue] = { constructor: e, add: function add(t) {\n        return this._add = t, this;\n      }, update: function update(t) {\n        return this._update = t, this;\n      }, remove: function remove(t) {\n        return this._remove = t, this;\n      }, execute: function execute() {\n        var t,\n            e = this._old,\n            n = this._new,\n            r = this._oldKeyGetter,\n            a = this._newKeyGetter,\n            o = {},\n            s = {},\n            l = [],\n            u = [];for (i(e, o, l, r), i(n, s, u, a), t = 0; t < e[Ae]; t++) {\n          var c = l[t],\n              h = s[c];if (null != h) {\n            var f = h[Ae];f ? (1 === f && (s[c] = null), h = h.unshift()) : s[c] = null, this._update && this._update(h, t);\n          } else this._remove && this._remove(t);\n        }for (var t = 0; t < u[Ae]; t++) {\n          var c = u[t];if (s.hasOwnProperty(c)) {\n            var h = s[c];if (null == h) continue;if (h[Ae]) for (var d = 0, f = h[Ae]; f > d; d++) {\n              this._add && this._add(h[d]);\n            } else this._add && this._add(h);\n          }\n        }\n      } }, e;\n  }), e(\"zrender/graphic/helper/poly\", [ai, \"./smoothSpline\", \"./smoothBezier\"], function (t) {\n    var e = t(\"./smoothSpline\"),\n        i = t(\"./smoothBezier\");return { buildPath: function buildPath(t, n, a) {\n        var o = n.points,\n            s = n.smooth;if (o && o[Ae] >= 2) {\n          if (s && \"spline\" !== s) {\n            var l = i(o, s, a, n.smoothConstraint);t[r](o[0][0], o[0][1]);for (var u = o[Ae], c = 0; (a ? u : u - 1) > c; c++) {\n              var h = l[2 * c],\n                  f = l[2 * c + 1],\n                  d = o[(c + 1) % u];t.bezierCurveTo(h[0], h[1], f[0], f[1], d[0], d[1]);\n            }\n          } else {\n            \"spline\" === s && (o = e(o, a)), t[r](o[0][0], o[0][1]);for (var c = 1, p = o[Ae]; p > c; c++) {\n              t.lineTo(o[c][0], o[c][1]);\n            }\n          }a && t.closePath();\n        }\n      } };\n  }), e(\"zrender/Storage\", [ai, \"./core/util\", \"./core/env\", \"./container/Group\", \"./core/timsort\"], function (t) {\n    function e(t, e) {\n      return t[de] === e[de] ? t.z === e.z ? t.z2 - e.z2 : t.z - e.z : t[de] - e[de];\n    }var n = t(\"./core/util\"),\n        r = t(\"./core/env\"),\n        a = t(\"./container/Group\"),\n        o = t(\"./core/timsort\"),\n        s = function s() {\n      this._elements = {}, this._roots = [], this._displayList = [], this._displayListLen = 0;\n    };return s[Ue] = { constructor: s, traverse: function traverse(t, e) {\n        for (var i = 0; i < this._roots[Ae]; i++) {\n          this._roots[i][ve](t, e);\n        }\n      }, getDisplayList: function getDisplayList(t, e) {\n        return e = e || !1, t && this.updateDisplayList(e), this._displayList;\n      }, updateDisplayList: function updateDisplayList(t) {\n        this._displayListLen = 0;for (var i = this._roots, n = this._displayList, a = 0, s = i[Ae]; s > a; a++) {\n          this._updateAndAddDisplayable(i[a], null, t);\n        }n[Ae] = this._displayListLen, r[Fe] && o(n, e);\n      }, _updateAndAddDisplayable: function _updateAndAddDisplayable(t, e, n) {\n        if (!t[Ne] || n) {\n          t.beforeUpdate(), t[i] && t[Ie](), t.afterUpdate();var r = t.clipPath;if (r && (r[m] = t, r.updateTransform(), e ? (e = e.slice(), e.push(r)) : e = [r]), t.isGroup) {\n            for (var a = t._children, o = 0; o < a[Ae]; o++) {\n              var s = a[o];t[i] && (s[i] = !0), this._updateAndAddDisplayable(s, e, n);\n            }t[i] = !1;\n          } else t.__clipPaths = e, this._displayList[this._displayListLen++] = t;\n        }\n      }, addRoot: function addRoot(t) {\n        this._elements[t.id] || (t instanceof a && t.addChildrenToStorage(this), this.addToMap(t), this._roots.push(t));\n      }, delRoot: function delRoot(t) {\n        if (null == t) {\n          for (var e = 0; e < this._roots[Ae]; e++) {\n            var i = this._roots[e];i instanceof a && i.delChildrenFromStorage(this);\n          }return this._elements = {}, this._roots = [], this._displayList = [], void (this._displayListLen = 0);\n        }if (t instanceof Array) for (var e = 0, r = t[Ae]; r > e; e++) {\n          this.delRoot(t[e]);\n        } else {\n          var o;o = (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) == je ? this._elements[t] : t;var s = n[se](this._roots, o);s >= 0 && (this.delFromMap(o.id), this._roots[Me](s, 1), o instanceof a && o.delChildrenFromStorage(this));\n        }\n      }, addToMap: function addToMap(t) {\n        return t instanceof a && (t.__storage = this), t.dirty(!1), this._elements[t.id] = t, this;\n      }, get: function get(t) {\n        return this._elements[t];\n      }, delFromMap: function delFromMap(t) {\n        var e = this._elements,\n            i = e[t];return i && (delete e[t], i instanceof a && (i.__storage = null)), this;\n      }, dispose: function dispose() {\n        this._elements = this._renderList = this._roots = null;\n      }, displayableSortFunc: e }, s;\n  }), e(\"zrender/Handler\", [ai, \"./core/util\", \"./mixin/Draggable\", \"./mixin/Eventful\"], function (t) {\n    function e(t, e, i) {\n      return { type: t, event: i, target: e, cancelBubble: !1, offsetX: i.zrX, offsetY: i.zrY, gestureEvent: i.gestureEvent, pinchX: i.pinchX, pinchY: i.pinchY, pinchScale: i.pinchScale, wheelDelta: i.zrDelta };\n    }function i() {}function n(t, e, i) {\n      if (t[t.rectHover ? \"rectContain\" : $](e, i)) {\n        for (var n = t; n;) {\n          if (n[we] || n.clipPath && !n.clipPath[$](e, i)) return !1;n = n[m];\n        }return !0;\n      }return !1;\n    }var r = t(\"./core/util\"),\n        a = t(\"./mixin/Draggable\"),\n        o = t(\"./mixin/Eventful\");i[Ue].dispose = function () {};var s = [\"click\", \"dblclick\", \"mousewheel\", _e, \"mouseup\", \"mousedown\", \"mousemove\"],\n        l = function l(t, e, n) {\n      o.call(this), this[Ve] = t, this.painter = e, n = n || new i(), this.proxy = n, n.handler = this, this._hovered, this._lastTouchMoment, this._lastX, this._lastY, a.call(this), r.each(s, function (t) {\n        n.on && n.on(t, this[t], this);\n      }, this);\n    };return l[Ue] = { constructor: l, mousemove: function mousemove(t) {\n        var e = t.zrX,\n            i = t.zrY,\n            n = this.findHover(e, i, null),\n            r = this._hovered,\n            a = this.proxy;this._hovered = n, a.setCursor && a.setCursor(n ? n.cursor : \"default\"), r && n !== r && r.__zr && this.dispatchToElement(r, _e, t), this.dispatchToElement(n, \"mousemove\", t), n && n !== r && this.dispatchToElement(n, be, t);\n      }, mouseout: function mouseout(t) {\n        this.dispatchToElement(this._hovered, _e, t), this[Te](\"globalout\", { event: t });\n      }, resize: function resize() {\n        this._hovered = null;\n      }, dispatch: function dispatch(t, e) {\n        var i = this[t];i && i.call(this, e);\n      }, dispose: function dispose() {\n        this.proxy.dispose(), this[Ve] = this.proxy = this.painter = null;\n      }, setCursorStyle: function setCursorStyle(t) {\n        var e = this.proxy;e.setCursor && e.setCursor(t);\n      }, dispatchToElement: function dispatchToElement(t, i, n) {\n        for (var r = \"on\" + i, a = e(i, t, n), o = t; o && (o[r] && (a.cancelBubble = o[r].call(o, a)), o[Te](i, a), o = o[m], !a.cancelBubble);) {}a.cancelBubble || (this[Te](i, a), this.painter && this.painter.eachOtherLayer(function (t) {\n          _typeof(t[r]) == ce && t[r].call(t, a), t[Te] && t[Te](i, a);\n        }));\n      }, findHover: function findHover(t, e, i) {\n        for (var r = this[Ve].getDisplayList(), a = r[Ae] - 1; a >= 0; a--) {\n          if (!r[a][we] && r[a] !== i && !r[a][Ne] && n(r[a], t, e)) return r[a];\n        }\n      } }, r.each([\"click\", \"mousedown\", \"mouseup\", \"mousewheel\", \"dblclick\"], function (t) {\n      l[Ue][t] = function (e) {\n        var i = this.findHover(e.zrX, e.zrY, null);if (\"mousedown\" === t) this._downel = i, this._upel = i;else if (\"mosueup\" === t) this._upel = i;else if (\"click\" === t && this._downel !== this._upel) return;this.dispatchToElement(i, t, e);\n      };\n    }), r.mixin(l, o), r.mixin(l, a), l;\n  }), e(\"zrender/dom/HandlerProxy\", [ai, \"../core/event\", \"../core/util\", \"../mixin/Eventful\", \"../core/env\", \"../core/GestureMgr\"], function (t) {\n    function e(t) {\n      return \"mousewheel\" === t && c.browser.firefox ? \"DOMMouseScroll\" : t;\n    }function i(t, e, i) {\n      var n = t._gestureMgr;\"start\" === i && n.clear();var r = n.recognize(e, t.handler.findHover(e.zrX, e.zrY, null), t.dom);if (\"end\" === i && n.clear(), r) {\n        var a = r.type;e.gestureEvent = a, t.handler.dispatchToElement(r[xe], a, r.event);\n      }\n    }function n(t) {\n      t._touching = !0, clearTimeout(t._touchTimer), t._touchTimer = setTimeout(function () {\n        t._touching = !1;\n      }, 700);\n    }function r() {\n      return c.touchEventsSupported;\n    }function a(t) {\n      function e(t, e) {\n        return function () {\n          return e._touching ? void 0 : t.apply(e, arguments);\n        };\n      }for (var i = 0; i < g[Ae]; i++) {\n        var n = g[i];t._handlers[n] = l.bind(y[n], t);\n      }for (var i = 0; i < m[Ae]; i++) {\n        var n = m[i];t._handlers[n] = e(y[n], t);\n      }\n    }function o(t) {\n      function i(i, n) {\n        l.each(i, function (i) {\n          f(t, e(i), n._handlers[i]);\n        }, n);\n      }u.call(this), this.dom = t, this._touching = !1, this._touchTimer, this._gestureMgr = new h(), this._handlers = {}, a(this), r() && i(g, this), i(m, this);\n    }var s = t(\"../core/event\"),\n        l = t(\"../core/util\"),\n        u = t(\"../mixin/Eventful\"),\n        c = t(\"../core/env\"),\n        h = t(\"../core/GestureMgr\"),\n        f = s.addEventListener,\n        d = s.removeEventListener,\n        p = s.normalizeEvent,\n        v = 300,\n        m = [\"click\", \"dblclick\", \"mousewheel\", _e, \"mouseup\", \"mousedown\", \"mousemove\"],\n        g = [\"touchstart\", \"touchend\", \"touchmove\"],\n        y = { mousemove: function mousemove(t) {\n        t = p(this.dom, t), this[Te](\"mousemove\", t);\n      }, mouseout: function mouseout(t) {\n        t = p(this.dom, t);var e = t.toElement || t.relatedTarget;if (e != this.dom) for (; e && 9 != e.nodeType;) {\n          if (e === this.dom) return;e = e.parentNode;\n        }this[Te](_e, t);\n      }, touchstart: function touchstart(t) {\n        t = p(this.dom, t), this._lastTouchMoment = new Date(), i(this, t, \"start\"), y.mousemove.call(this, t), y.mousedown.call(this, t), n(this);\n      }, touchmove: function touchmove(t) {\n        t = p(this.dom, t), i(this, t, \"change\"), y.mousemove.call(this, t), n(this);\n      }, touchend: function touchend(t) {\n        t = p(this.dom, t), i(this, t, \"end\"), y.mouseup.call(this, t), +new Date() - this._lastTouchMoment < v && y.click.call(this, t), n(this);\n      } };l.each([\"click\", \"mousedown\", \"mouseup\", \"mousewheel\", \"dblclick\"], function (t) {\n      y[t] = function (e) {\n        e = p(this.dom, e), this[Te](t, e);\n      };\n    });var x = o[Ue];return x.dispose = function () {\n      for (var t = m[U](g), i = 0; i < t[Ae]; i++) {\n        var n = t[i];d(this.dom, e(n), this._handlers[n]);\n      }\n    }, x.setCursor = function (t) {\n      this.dom.style.cursor = t || \"default\";\n    }, l.mixin(o, u), o;\n  }), e(\"zrender/animation/Animation\", [ai, \"../core/util\", \"../core/event\", \"./requestAnimationFrame\", \"./Animator\"], function (t) {\n    var e = t(\"../core/util\"),\n        i = t(\"../core/event\").Dispatcher,\n        n = t(\"./requestAnimationFrame\"),\n        r = t(\"./Animator\"),\n        a = function a(t) {\n      t = t || {}, this.stage = t.stage || {}, this.onframe = t.onframe || function () {}, this._clips = [], this._running = !1, this._time, this._pausedTime, this._pauseStart, this._paused = !1, i.call(this);\n    };return a[Ue] = { constructor: a, addClip: function addClip(t) {\n        this._clips.push(t);\n      }, addAnimator: function addAnimator(t) {\n        t[qe] = this;for (var e = t.getClips(), i = 0; i < e[Ae]; i++) {\n          this.addClip(e[i]);\n        }\n      }, removeClip: function removeClip(t) {\n        var i = e[se](this._clips, t);i >= 0 && this._clips[Me](i, 1);\n      }, removeAnimator: function removeAnimator(t) {\n        for (var e = t.getClips(), i = 0; i < e[Ae]; i++) {\n          this.removeClip(e[i]);\n        }t[qe] = null;\n      }, _update: function _update() {\n        for (var t = new Date().getTime() - this._pausedTime, e = t - this._time, i = this._clips, n = i[Ae], r = [], a = [], o = 0; n > o; o++) {\n          var s = i[o],\n              l = s.step(t);l && (r.push(l), a.push(s));\n        }for (var o = 0; n > o;) {\n          i[o]._needsRemove ? (i[o] = i[n - 1], i.pop(), n--) : o++;\n        }n = r[Ae];for (var o = 0; n > o; o++) {\n          a[o].fire(r[o]);\n        }this._time = t, this.onframe(e), this[Te](\"frame\", e), this.stage[Ie] && this.stage[Ie]();\n      }, _startLoop: function _startLoop() {\n        function t() {\n          e._running && (n(t), !e._paused && e._update());\n        }var e = this;this._running = !0, n(t);\n      }, start: function start() {\n        this._time = new Date().getTime(), this._pausedTime = 0, this._startLoop();\n      }, stop: function stop() {\n        this._running = !1;\n      }, pause: function pause() {\n        this._paused || (this._pauseStart = new Date().getTime(), this._paused = !0);\n      }, resume: function resume() {\n        this._paused && (this._pausedTime += new Date().getTime() - this._pauseStart, this._paused = !1);\n      }, clear: function clear() {\n        this._clips = [];\n      }, animate: function animate(t, e) {\n        e = e || {};var i = new r(t, e.loop, e.getter, e.setter);return i;\n      } }, e.mixin(a, i), a;\n  }), e(\"zrender/Painter\", [ai, \"./config\", \"./core/util\", \"./core/log\", \"./core/BoundingRect\", \"./core/timsort\", \"./Layer\", \"./animation/requestAnimationFrame\", \"./graphic/Image\"], function (t) {\n    function e(t) {\n      return parseInt(t, 10);\n    }function r(t) {\n      return t ? t.isBuildin ? !0 : _typeof(t[We]) !== ce || _typeof(t.refresh) !== ce ? !1 : !0 : !1;\n    }function o(t) {\n      t.__unusedCount++;\n    }function s(t) {\n      1 == t.__unusedCount && t.clear();\n    }function l(t, e, i) {\n      return w.copy(t[ee]()), t[a] && w[_](t[a]), M.width = e, M[Re] = i, !w.intersect(M);\n    }function u(t, e) {\n      if (t == e) return !1;if (!t || !e || t[Ae] !== e[Ae]) return !0;for (var i = 0; i < t[Ae]; i++) {\n        if (t[i] !== e[i]) return !0;\n      }\n    }function c(t, e) {\n      for (var i = 0; i < t[Ae]; i++) {\n        var r = t[i],\n            a = r.path;r.setTransform(e), a.beginPath(e), r[n](a, r.shape), e.clip(), r.restoreTransform(e);\n      }\n    }function h(t, e) {\n      var i = document[X](\"div\"),\n          n = i.style;return n[K] = \"relative\", n.overflow = \"hidden\", n.width = t + \"px\", n[Re] = e + \"px\", i;\n    }var f = t(\"./config\"),\n        d = t(\"./core/util\"),\n        p = t(\"./core/log\"),\n        m = t(\"./core/BoundingRect\"),\n        g = t(\"./core/timsort\"),\n        y = t(\"./Layer\"),\n        x = t(\"./animation/requestAnimationFrame\"),\n        b = 5,\n        w = new m(0, 0, 0, 0),\n        M = new m(0, 0, 0, 0),\n        S = function S(t, e, i) {\n      var n = !t.nodeName || \"CANVAS\" === t.nodeName.toUpperCase();i = i || {}, this.dpr = i.devicePixelRatio || f.devicePixelRatio, this._singleCanvas = n, this.root = t;var r = t.style;r && (r[\"-webkit-tap-highlight-color\"] = \"transparent\", r[\"-webkit-user-select\"] = r[\"user-select\"] = r[\"-webkit-touch-callout\"] = \"none\", t.innerHTML = \"\"), this[Ve] = e;var a = this._zlevelList = [],\n          o = this._layers = {};if (this._layerConfig = {}, n) {\n        var s = t.width,\n            l = t[Re];this._width = s, this._height = l;var u = new y(t, this, 1);u.initContext(), o[0] = u, a.push(0);\n      } else {\n        this._width = this._getWidth(), this._height = this._getHeight();var c = this._domRoot = h(this._width, this._height);t.appendChild(c);\n      }this.pathToImage = this._createPathToImage(), this._progressiveLayers = [], this._hoverlayer, this._hoverElements = [];\n    };return S[Ue] = { constructor: S, isSingleCanvas: function isSingleCanvas() {\n        return this._singleCanvas;\n      }, getViewportRoot: function getViewportRoot() {\n        return this._singleCanvas ? this._layers[0].dom : this._domRoot;\n      }, refresh: function refresh(t) {\n        var e = this[Ve].getDisplayList(!0),\n            i = this._zlevelList;this._paintList(e, t);for (var n = 0; n < i[Ae]; n++) {\n          var r = i[n],\n              a = this._layers[r];!a.isBuildin && a.refresh && a.refresh();\n        }return this.refreshHover(), this._progressiveLayers[Ae] && this._startProgessive(), this;\n      }, addHover: function addHover(t, e) {\n        if (!t.__hoverMir) {\n          var i = new t.constructor({ style: t.style, shape: t.shape });i.__from = t, t.__hoverMir = i, i[pe](e), this._hoverElements.push(i);\n        }\n      }, removeHover: function removeHover(t) {\n        var e = t.__hoverMir,\n            i = this._hoverElements,\n            n = d[se](i, e);n >= 0 && i[Me](n, 1), t.__hoverMir = null;\n      }, clearHover: function clearHover() {\n        for (var t = this._hoverElements, e = 0; e < t[Ae]; e++) {\n          var i = t[e].__from;i && (i.__hoverMir = null);\n        }t[Ae] = 0;\n      }, refreshHover: function refreshHover() {\n        var t = this._hoverElements,\n            e = t[Ae],\n            i = this._hoverlayer;if (i && i.clear(), e) {\n          g(t, this[Ve].displayableSortFunc), i || (i = this._hoverlayer = this.getLayer(1e5));var n = {};i.ctx.save();for (var r = 0; e > r;) {\n            var o = t[r],\n                s = o.__from;s && s.__zr ? (r++, s.invisible || (o[a] = s[a], o.invTransform = s.invTransform, o.__clipPaths = s.__clipPaths, this._doPaintEl(o, i, !0, n))) : (t[Me](r, 1), s.__hoverMir = null, e--);\n          }i.ctx.restore();\n        }\n      }, _startProgessive: function _startProgessive() {\n        function t() {\n          i === e._progressiveToken && e[Ve] && (e._doPaintList(e[Ve].getDisplayList()), e._furtherProgressive ? (e._progress++, x(t)) : e._progressiveToken = -1);\n        }var e = this;if (e._furtherProgressive) {\n          var i = e._progressiveToken = +new Date();e._progress++, x(t);\n        }\n      }, _clearProgressive: function _clearProgressive() {\n        this._progressiveToken = -1, this._progress = 0, d.each(this._progressiveLayers, function (t) {\n          t[i] && t.clear();\n        });\n      }, _paintList: function _paintList(t, e) {\n        null == e && (e = !1), this._updateLayerStatus(t), this._clearProgressive(), this.eachBuildinLayer(o), this._doPaintList(t, e), this.eachBuildinLayer(s);\n      }, _doPaintList: function _doPaintList(t, e) {\n        function n(t) {\n          var e = o.dpr || 1;o.save(), o.globalAlpha = 1, o.shadowBlur = 0, r[i] = !0, o.setTransform(1, 0, 0, 1, 0, 0), o.drawImage(t.dom, 0, 0, h * e, f * e), o.restore();\n        }for (var r, a, o, s, l, u, c = 0, h = this._width, f = this._height, v = this._progress, m = 0, g = t[Ae]; g > m; m++) {\n          var y = t[m],\n              x = this._singleCanvas ? 0 : y[de],\n              _ = y.__frame;if (0 > _ && l && (n(l), l = null), a !== x && (o && o.restore(), s = {}, a = x, r = this.getLayer(a), r.isBuildin || p(\"ZLevel \" + a + \" has been used by unkown layer \" + r.id), o = r.ctx, o.save(), r.__unusedCount = 0, (r[i] || e) && r.clear()), r[i] || e) {\n            if (_ >= 0) {\n              if (!l) {\n                if (l = this._progressiveLayers[Math.min(c++, b - 1)], l.ctx.save(), l.renderScope = {}, l && l.__progress > l.__maxProgress) {\n                  m = l.__nextIdxNotProg - 1;continue;\n                }u = l.__progress, l[i] || (v = u), l.__progress = v + 1;\n              }_ === v && this._doPaintEl(y, l, !0, l.renderScope);\n            } else this._doPaintEl(y, r, e, s);y[i] = !1;\n          }\n        }l && n(l), o && o.restore(), this._furtherProgressive = !1, d.each(this._progressiveLayers, function (t) {\n          t.__maxProgress >= t.__progress && (this._furtherProgressive = !0);\n        }, this);\n      }, _doPaintEl: function _doPaintEl(t, e, n, r) {\n        var o = e.ctx,\n            s = t[a];if (!(!e[i] && !n || t.invisible || 0 === t.style[Q] || s && !s[0] && !s[3] || t.culling && l(t, this._width, this._height))) {\n          var h = t.__clipPaths;(r.prevClipLayer !== e || u(h, r.prevElClipPaths)) && (r.prevElClipPaths && (r.prevClipLayer.ctx.restore(), r.prevClipLayer = r.prevElClipPaths = null, r.prevEl = null), h && (o.save(), c(h, o), r.prevClipLayer = e, r.prevElClipPaths = h)), t.beforeBrush && t.beforeBrush(o), t.brush(o, r.prevEl || null), r.prevEl = t, t.afterBrush && t.afterBrush(o);\n        }\n      }, getLayer: function getLayer(t) {\n        if (this._singleCanvas) return this._layers[0];var e = this._layers[t];return e || (e = new y(\"zr_\" + t, this, this.dpr), e.isBuildin = !0, this._layerConfig[t] && d.merge(e, this._layerConfig[t], !0), this.insertLayer(t, e), e.initContext()), e;\n      }, insertLayer: function insertLayer(t, e) {\n        var i = this._layers,\n            n = this._zlevelList,\n            a = n[Ae],\n            o = null,\n            s = -1,\n            l = this._domRoot;if (i[t]) return void p(\"ZLevel \" + t + \" has been used already\");if (!r(e)) return void p(\"Layer of zlevel \" + t + \" is not valid\");if (a > 0 && t > n[0]) {\n          for (s = 0; a - 1 > s && !(n[s] < t && n[s + 1] > t); s++) {}o = i[n[s]];\n        }if (n[Me](s + 1, 0, t), o) {\n          var u = o.dom;u.nextSibling ? l.insertBefore(e.dom, u.nextSibling) : l.appendChild(e.dom);\n        } else l.firstChild ? l.insertBefore(e.dom, l.firstChild) : l.appendChild(e.dom);i[t] = e;\n      }, eachLayer: function eachLayer(t, e) {\n        var i,\n            n,\n            r = this._zlevelList;for (n = 0; n < r[Ae]; n++) {\n          i = r[n], t.call(e, this._layers[i], i);\n        }\n      }, eachBuildinLayer: function eachBuildinLayer(t, e) {\n        var i,\n            n,\n            r,\n            a = this._zlevelList;for (r = 0; r < a[Ae]; r++) {\n          n = a[r], i = this._layers[n], i.isBuildin && t.call(e, i, n);\n        }\n      }, eachOtherLayer: function eachOtherLayer(t, e) {\n        var i,\n            n,\n            r,\n            a = this._zlevelList;for (r = 0; r < a[Ae]; r++) {\n          n = a[r], i = this._layers[n], i.isBuildin || t.call(e, i, n);\n        }\n      }, getLayers: function getLayers() {\n        return this._layers;\n      }, _updateLayerStatus: function _updateLayerStatus(t) {\n        var e = this._layers,\n            n = this._progressiveLayers,\n            r = {},\n            a = {};this.eachBuildinLayer(function (t, e) {\n          r[e] = t.elCount, t.elCount = 0, t[i] = !1;\n        }), d.each(n, function (t, e) {\n          a[e] = t.elCount, t.elCount = 0, t[i] = !1;\n        });for (var o, s, l = 0, u = 0, c = 0, h = t[Ae]; h > c; c++) {\n          var f = t[c],\n              p = this._singleCanvas ? 0 : f[de],\n              v = e[p],\n              m = f.progressive;if (v && (v.elCount++, v[i] = v[i] || f[i]), m >= 0) {\n            s !== m && (s = m, u++);var g = f.__frame = u - 1;if (!o) {\n              var x = Math.min(l, b - 1);o = n[x], o || (o = n[x] = new y(\"progressive\", this, this.dpr), o.initContext()), o.__maxProgress = 0;\n            }o[i] = o[i] || f[i], o.elCount++, o.__maxProgress = Math.max(o.__maxProgress, g), o.__maxProgress >= o.__progress && (v[i] = !0);\n          } else f.__frame = -1, o && (o.__nextIdxNotProg = c, l++, o = null);\n        }o && (l++, o.__nextIdxNotProg = c), this.eachBuildinLayer(function (t, e) {\n          r[e] !== t.elCount && (t[i] = !0);\n        }), n[Ae] = Math.min(l, b), d.each(n, function (t, e) {\n          a[e] !== t.elCount && (f[i] = !0), t[i] && (t.__progress = 0);\n        });\n      }, clear: function clear() {\n        return this.eachBuildinLayer(this._clearLayer), this;\n      }, _clearLayer: function _clearLayer(t) {\n        t.clear();\n      }, configLayer: function configLayer(t, e) {\n        if (e) {\n          var i = this._layerConfig;i[t] ? d.merge(i[t], e, !0) : i[t] = e;var n = this._layers[t];n && d.merge(n, i[t], !0);\n        }\n      }, delLayer: function delLayer(t) {\n        var e = this._layers,\n            i = this._zlevelList,\n            n = e[t];n && (n.dom.parentNode.removeChild(n.dom), delete e[t], i[Me](d[se](i, t), 1));\n      }, resize: function resize(t, e) {\n        var i = this._domRoot;if (i.style.display = \"none\", t = t || this._getWidth(), e = e || this._getHeight(), i.style.display = \"\", this._width != t || e != this._height) {\n          i.style.width = t + \"px\", i.style[Re] = e + \"px\";for (var n in this._layers) {\n            this._layers[n][We](t, e);\n          }this.refresh(!0);\n        }return this._width = t, this._height = e, this;\n      }, clearLayer: function clearLayer(t) {\n        var e = this._layers[t];e && e.clear();\n      }, dispose: function dispose() {\n        this.root.innerHTML = \"\", this.root = this[Ve] = this._domRoot = this._layers = null;\n      }, getRenderedCanvas: function getRenderedCanvas(t) {\n        if (t = t || {}, this._singleCanvas) return this._layers[0].dom;var e = new y(\"image\", this, t.pixelRatio || this.dpr);e.initContext(), e.clearColor = t.backgroundColor, e.clear();for (var i = this[Ve].getDisplayList(!0), n = {}, r = 0; r < i[Ae]; r++) {\n          var a = i[r];this._doPaintEl(a, e, !0, n);\n        }return e.dom;\n      }, getWidth: function getWidth() {\n        return this._width;\n      }, getHeight: function getHeight() {\n        return this._height;\n      }, _getWidth: function _getWidth() {\n        var t = this.root,\n            i = document.defaultView.getComputedStyle(t);return (t.clientWidth || e(i.width) || e(t.style.width)) - (e(i.paddingLeft) || 0) - (e(i.paddingRight) || 0) | 0;\n      }, _getHeight: function _getHeight() {\n        var t = this.root,\n            i = document.defaultView.getComputedStyle(t);return (t.clientHeight || e(i[Re]) || e(t.style[Re])) - (e(i.paddingTop) || 0) - (e(i.paddingBottom) || 0) | 0;\n      }, _pathToImage: function _pathToImage(e, i, n, r, a) {\n        var o = document[X](\"canvas\"),\n            s = o.getContext(\"2d\");o.width = n * a, o[Re] = r * a, s.clearRect(0, 0, n * a, r * a);var l = { position: i[K], rotation: i[v], scale: i.scale };i[K] = [0, 0, 0], i[v] = 0, i.scale = [1, 1], i && i.brush(s);var u = t(\"./graphic/Image\"),\n            c = new u({ id: e, style: { x: 0, y: 0, image: o } });return null != l[K] && (c[K] = i[K] = l[K]), null != l[v] && (c[v] = i[v] = l[v]), null != l.scale && (c.scale = i.scale = l.scale), c;\n      }, _createPathToImage: function _createPathToImage() {\n        var t = this;return function (e, i, n, r) {\n          return t._pathToImage(e, i, n, r, t.dpr);\n        };\n      } }, S;\n  }), e(\"echarts/chart/bar/barItemStyle\", [ai, \"../../model/mixin/makeStyleMapper\"], function (t) {\n    var e = t(\"../../model/mixin/makeStyleMapper\")([[\"fill\", \"color\"], [y, \"borderColor\"], [x, \"borderWidth\"], [y, \"barBorderColor\"], [x, \"barBorderWidth\"], [Q], [\"shadowBlur\"], [\"shadowOffsetX\"], [\"shadowOffsetY\"], [\"shadowColor\"]]);return { getBarItemStyle: function getBarItemStyle(t) {\n        var i = e.call(this, t);if (this.getBorderLineDash) {\n          var n = this.getBorderLineDash();n && (i.lineDash = n);\n        }return i;\n      } };\n  }), e(\"zrender/graphic/helper/smoothBezier\", [ai, \"../../core/vector\"], function (t) {\n    var e = t(\"../../core/vector\"),\n        i = e.min,\n        n = e.max,\n        r = e.scale,\n        a = e.distance,\n        o = e.add;return function (t, s, l, u) {\n      var c,\n          h,\n          f,\n          d,\n          p = [],\n          v = [],\n          m = [],\n          g = [];if (u) {\n        f = [1 / 0, 1 / 0], d = [-1 / 0, -1 / 0];for (var y = 0, x = t[Ae]; x > y; y++) {\n          i(f, f, t[y]), n(d, d, t[y]);\n        }i(f, f, u[0]), n(d, d, u[1]);\n      }for (var y = 0, x = t[Ae]; x > y; y++) {\n        var _ = t[y];if (l) c = t[y ? y - 1 : x - 1], h = t[(y + 1) % x];else {\n          if (0 === y || y === x - 1) {\n            p.push(e.clone(t[y]));continue;\n          }c = t[y - 1], h = t[y + 1];\n        }e.sub(v, h, c), r(v, v, s);var b = a(_, c),\n            w = a(_, h),\n            M = b + w;0 !== M && (b /= M, w /= M), r(m, v, -b), r(g, v, w);var S = o([], _, m),\n            T = o([], _, g);u && (n(S, S, f), i(S, S, d), n(T, T, f), i(T, T, d)), p.push(S), p.push(T);\n      }return l && p.push(p.shift()), p;\n    };\n  }), e(\"zrender/graphic/helper/smoothSpline\", [ai, \"../../core/vector\"], function (t) {\n    function e(t, e, i, n, r, a, o) {\n      var s = .5 * (i - t),\n          l = .5 * (n - e);return (2 * (e - i) + s + l) * o + (-3 * (e - i) - 2 * s - l) * a + s * r + e;\n    }var i = t(\"../../core/vector\");return function (t, n) {\n      for (var r = t[Ae], a = [], o = 0, s = 1; r > s; s++) {\n        o += i.distance(t[s - 1], t[s]);\n      }var l = o / 2;l = r > l ? r : l;for (var s = 0; l > s; s++) {\n        var u,\n            c,\n            h,\n            f = s / (l - 1) * (n ? r : r - 1),\n            d = Math.floor(f),\n            p = f - d,\n            v = t[d % r];n ? (u = t[(d - 1 + r) % r], c = t[(d + 1) % r], h = t[(d + 2) % r]) : (u = t[0 === d ? d : d - 1], c = t[d > r - 2 ? r - 1 : d + 1], h = t[d > r - 3 ? r - 1 : d + 2]);var m = p * p,\n            g = p * m;a.push([e(u[0], v[0], c[0], h[0], p, m, g), e(u[1], v[1], c[1], h[1], p, m, g)]);\n      }return a;\n    };\n  }), e(\"zrender/mixin/Draggable\", [ai], function () {\n    function t() {\n      this.on(\"mousedown\", this._dragStart, this), this.on(\"mousemove\", this._drag, this), this.on(\"mouseup\", this._dragEnd, this), this.on(\"globalout\", this._dragEnd, this);\n    }return t[Ue] = { constructor: t, _dragStart: function _dragStart(t) {\n        var e = t[xe];e && e.draggable && (this._draggingTarget = e, e.dragging = !0, this._x = t.offsetX, this._y = t.offsetY, this.dispatchToElement(e, \"dragstart\", t.event));\n      }, _drag: function _drag(t) {\n        var e = this._draggingTarget;if (e) {\n          var i = t.offsetX,\n              n = t.offsetY,\n              r = i - this._x,\n              a = n - this._y;this._x = i, this._y = n, e.drift(r, a, t), this.dispatchToElement(e, \"drag\", t.event);var o = this.findHover(i, n, e),\n              s = this._dropTarget;this._dropTarget = o, e !== o && (s && o !== s && this.dispatchToElement(s, \"dragleave\", t.event), o && o !== s && this.dispatchToElement(o, \"dragenter\", t.event));\n        }\n      }, _dragEnd: function _dragEnd(t) {\n        var e = this._draggingTarget;e && (e.dragging = !1), this.dispatchToElement(e, \"dragend\", t.event), this._dropTarget && this.dispatchToElement(this._dropTarget, \"drop\", t.event), this._draggingTarget = null, this._dropTarget = null;\n      } }, t;\n  }), e(\"zrender/graphic/helper/roundRect\", [ai], function () {\n    return { buildPath: function buildPath(t, e) {\n        var i,\n            n,\n            a,\n            o,\n            s = e.x,\n            l = e.y,\n            u = e.width,\n            c = e[Re],\n            h = e.r;0 > u && (s += u, u = -u), 0 > c && (l += c, c = -c), (typeof h === \"undefined\" ? \"undefined\" : _typeof(h)) === ue ? i = n = a = o = h : h instanceof Array ? 1 === h[Ae] ? i = n = a = o = h[0] : 2 === h[Ae] ? (i = a = h[0], n = o = h[1]) : 3 === h[Ae] ? (i = h[0], n = o = h[1], a = h[2]) : (i = h[0], n = h[1], a = h[2], o = h[3]) : i = n = a = o = 0;var f;i + n > u && (f = i + n, i *= u / f, n *= u / f), a + o > u && (f = a + o, a *= u / f, o *= u / f), n + a > c && (f = n + a, n *= c / f, a *= c / f), i + o > c && (f = i + o, i *= c / f, o *= c / f), t[r](s + i, l), t.lineTo(s + u - n, l), 0 !== n && t.quadraticCurveTo(s + u, l, s + u, l + n), t.lineTo(s + u, l + c - a), 0 !== a && t.quadraticCurveTo(s + u, l + c, s + u - a, l + c), t.lineTo(s + o, l + c), 0 !== o && t.quadraticCurveTo(s, l + c, s, l + c - o), t.lineTo(s, l + i), 0 !== i && t.quadraticCurveTo(s, l, s + i, l);\n      } };\n  }), e(\"zrender/core/event\", [ai, \"../mixin/Eventful\"], function (t) {\n    function e(t) {\n      return t.getBoundingClientRect ? t.getBoundingClientRect() : { left: 0, top: 0 };\n    }function i(t, i, n) {\n      var r = e(t);return n = n || {}, n.zrX = i.clientX - r.left, n.zrY = i.clientY - r.top, n;\n    }function n(t, e) {\n      if (e = e || window.event, null != e.zrX) return e;var n = e.type,\n          r = n && n[se](\"touch\") >= 0;if (r) {\n        var a = \"touchend\" != n ? e.targetTouches[0] : e.changedTouches[0];a && i(t, a, e);\n      } else i(t, e, e), e.zrDelta = e.wheelDelta ? e.wheelDelta / 120 : -(e.detail || 0) / 3;return e;\n    }function r(t, e, i) {\n      s ? t.addEventListener(e, i) : t.attachEvent(\"on\" + e, i);\n    }function a(t, e, i) {\n      s ? t.removeEventListener(e, i) : t.detachEvent(\"on\" + e, i);\n    }var o = t(\"../mixin/Eventful\"),\n        s = (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) !== l && !!window.addEventListener,\n        u = s ? function (t) {\n      t.preventDefault(), t.stopPropagation(), t.cancelBubble = !0;\n    } : function (t) {\n      t.returnValue = !1, t.cancelBubble = !0;\n    };return { clientToLocal: i, normalizeEvent: n, addEventListener: r, removeEventListener: a, stop: u, Dispatcher: o };\n  }), e(\"zrender/animation/requestAnimationFrame\", [ai], function () {\n    return (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) !== l && (window.requestAnimationFrame || window.msRequestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame) || function (t) {\n      setTimeout(t, 16);\n    };\n  }), e(\"zrender/core/GestureMgr\", [ai, \"./event\"], function (t) {\n    function e(t) {\n      var e = t[1][0] - t[0][0],\n          i = t[1][1] - t[0][1];return Math.sqrt(e * e + i * i);\n    }function i(t) {\n      return [(t[0][0] + t[1][0]) / 2, (t[0][1] + t[1][1]) / 2];\n    }var n = t(\"./event\"),\n        r = function r() {\n      this._track = [];\n    };r[Ue] = { constructor: r, recognize: function recognize(t, e, i) {\n        return this._doTrack(t, e, i), this._recognize(t);\n      }, clear: function clear() {\n        return this._track[Ae] = 0, this;\n      }, _doTrack: function _doTrack(t, e, i) {\n        var r = t.touches;if (r) {\n          for (var a = { points: [], touches: [], target: e, event: t }, o = 0, s = r[Ae]; s > o; o++) {\n            var l = r[o],\n                u = n.clientToLocal(i, l);a.points.push([u.zrX, u.zrY]), a.touches.push(l);\n          }this._track.push(a);\n        }\n      }, _recognize: function _recognize(t) {\n        for (var e in a) {\n          if (a.hasOwnProperty(e)) {\n            var i = a[e](this._track, t);if (i) return i;\n          }\n        }\n      } };var a = { pinch: function pinch(t, n) {\n        var r = t[Ae];if (r) {\n          var a = (t[r - 1] || {}).points,\n              o = (t[r - 2] || {}).points || a;if (o && o[Ae] > 1 && a && a[Ae] > 1) {\n            var s = e(a) / e(o);!isFinite(s) && (s = 1), n.pinchScale = s;var l = i(a);return n.pinchX = l[0], n.pinchY = l[1], { type: \"pinch\", target: t[0][xe], event: n };\n          }\n        }\n      } };return r;\n  }), e(\"zrender/Layer\", [ai, \"./core/util\", \"./config\", \"./graphic/Style\", \"./graphic/Pattern\"], function (t) {\n    function e() {\n      return !1;\n    }function i(t, e, i, n) {\n      var r = document[X](e),\n          a = i[Ge](),\n          o = i[He](),\n          s = r.style;return s[K] = \"absolute\", s.left = 0, s.top = 0, s.width = a + \"px\", s[Re] = o + \"px\", r.width = a * n, r[Re] = o * n, r.setAttribute(\"data-zr-dom-id\", t), r;\n    }var n = t(\"./core/util\"),\n        r = t(\"./config\"),\n        a = t(\"./graphic/Style\"),\n        o = t(\"./graphic/Pattern\"),\n        s = function s(t, a, o) {\n      var s;o = o || r.devicePixelRatio, (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) === je ? s = i(t, \"canvas\", a, o) : n[Pe](t) && (s = t, t = s.id), this.id = t, this.dom = s;var l = s.style;l && (s.onselectstart = e, l[\"-webkit-user-select\"] = \"none\", l[\"user-select\"] = \"none\", l[\"-webkit-touch-callout\"] = \"none\", l[\"-webkit-tap-highlight-color\"] = \"rgba(0,0,0,0)\"), this.domBack = null, this.ctxBack = null, this.painter = a, this.config = null, this.clearColor = 0, this.motionBlur = !1, this.lastFrameAlpha = .7, this.dpr = o;\n    };return s[Ue] = { constructor: s, elCount: 0, __dirty: !0, initContext: function initContext() {\n        this.ctx = this.dom.getContext(\"2d\"), this.ctx.dpr = this.dpr;\n      }, createBackBuffer: function createBackBuffer() {\n        var t = this.dpr;this.domBack = i(\"back-\" + this.id, \"canvas\", this.painter, t), this.ctxBack = this.domBack.getContext(\"2d\"), 1 != t && this.ctxBack.scale(t, t);\n      }, resize: function resize(t, e) {\n        var i = this.dpr,\n            n = this.dom,\n            r = n.style,\n            a = this.domBack;r.width = t + \"px\", r[Re] = e + \"px\", n.width = t * i, n[Re] = e * i, a && (a.width = t * i, a[Re] = e * i, 1 != i && this.ctxBack.scale(i, i));\n      }, clear: function clear(t) {\n        var e = this.dom,\n            i = this.ctx,\n            n = e.width,\n            r = e[Re],\n            s = this.clearColor,\n            l = this.motionBlur && !t,\n            u = this.lastFrameAlpha,\n            c = this.dpr;if (l && (this.domBack || this.createBackBuffer(), this.ctxBack.globalCompositeOperation = \"copy\", this.ctxBack.drawImage(e, 0, 0, n / c, r / c)), i.clearRect(0, 0, n, r), s) {\n          var h;s.colorStops ? (h = s.__canvasGradient || a.getGradient(i, s, { x: 0, y: 0, width: n, height: r }), s.__canvasGradient = h) : s.image && (h = o[Ue].getCanvasPattern.call(s, i)), i.save(), i.fillStyle = h || s, i.fillRect(0, 0, n, r), i.restore();\n        }if (l) {\n          var f = this.domBack;i.save(), i.globalAlpha = u, i.drawImage(f, 0, 0, n, r), i.restore();\n        }\n      } }, s;\n  }), e(\"echarts/preprocessor/helper/compatStyle\", [ai, ri], function (t) {\n    function e(t) {\n      var e = t && t.itemStyle;e && i.each(n, function (n) {\n        var r = e[D],\n            a = e[b];r && r[n] && (t[n] = t[n] || {}, t[n][D] ? i.merge(t[n][D], r[n]) : t[n][D] = r[n], r[n] = null), a && a[n] && (t[n] = t[n] || {}, t[n][b] ? i.merge(t[n][b], a[n]) : t[n][b] = a[n], a[n] = null);\n      });\n    }var i = t(ri),\n        n = [\"areaStyle\", \"lineStyle\", \"nodeStyle\", \"linkStyle\", \"chordStyle\", \"label\", \"labelLine\"];return function (t) {\n      if (t) {\n        e(t), e(t.markPoint), e(t.markLine);var n = t.data;if (n) {\n          for (var r = 0; r < n[Ae]; r++) {\n            e(n[r]);\n          }var a = t.markPoint;if (a && a.data) for (var o = a.data, r = 0; r < o[Ae]; r++) {\n            e(o[r]);\n          }var s = t.markLine;if (s && s.data) for (var l = s.data, r = 0; r < l[Ae]; r++) {\n            i[he](l[r]) ? (e(l[r][0]), e(l[r][1])) : e(l[r]);\n          }\n        }\n      }\n    };\n  }), e(\"echarts/chart/helper/SymbolDraw\", [ai, I, \"./Symbol\"], function (t) {\n    function e(t) {\n      this.group = new n.Group(), this._symbolCtor = t || r;\n    }function i(t, e, i) {\n      var n = t[P](e);return !(!n || isNaN(n[0]) || isNaN(n[1]) || i && i(e) || \"none\" === t[S](e, \"symbol\"));\n    }var n = t(I),\n        r = t(\"./Symbol\"),\n        a = e[Ue];return a[c] = function (t, e) {\n      var r = this.group,\n          a = t.hostModel,\n          o = this._data,\n          s = this._symbolCtor,\n          l = { itemStyle: a[Ze](\"itemStyle.normal\")[Ke]([\"color\"]), hoverItemStyle: a[Ze](\"itemStyle.emphasis\")[Ke](), symbolRotate: a.get(\"symbolRotate\"), symbolOffset: a.get(\"symbolOffset\"), hoverAnimation: a.get(\"hoverAnimation\"), labelModel: a[Ze](\"label.normal\"), hoverLabelModel: a[Ze](\"label.emphasis\") };t.diff(o).add(function (n) {\n        var a = t[P](n);if (i(t, n, e)) {\n          var o = new s(t, n, l);o.attr(K, a), t[C](n, o), r.add(o);\n        }\n      })[Ie](function (u, h) {\n        var f = o[A](h),\n            d = t[P](u);return i(t, u, e) ? (f ? (f[c](t, u, l), n.updateProps(f, { position: d }, a)) : (f = new s(t, u), f.attr(K, d)), r.add(f), void t[C](u, f)) : void r[Le](f);\n      })[Le](function (t) {\n        var e = o[A](t);e && e.fadeOut(function () {\n          r[Le](e);\n        });\n      })[k](), this._data = t;\n    }, a[De] = function () {\n      var t = this._data;t && t[T](function (e, i) {\n        var n = t[P](i);e.attr(K, n);\n      });\n    }, a[Le] = function (t) {\n      var e = this.group,\n          i = this._data;i && (t ? i[T](function (t) {\n        t.fadeOut(function () {\n          e[Le](t);\n        });\n      }) : e[ei]());\n    }, e;\n  }), e(\"echarts/component/axis/AxisView\", [ai, ri, I, \"./AxisBuilder\", z], function (t) {\n    function e(t, e) {\n      function i(t) {\n        var e = n[q](t);return e[H](e[O](0));\n      }var n = t[ti],\n          r = e.axis,\n          a = {},\n          o = r[K],\n          s = r.onZero ? \"onZero\" : o,\n          l = r.dim,\n          u = n.getRect(),\n          c = [u.x, u.x + u.width, u.y, u.y + u[Re]],\n          h = e.get(\"offset\") || 0,\n          f = { x: { top: c[2] - h, bottom: c[3] + h }, y: { left: c[0] - h, right: c[1] + h } };f.x.onZero = Math.max(Math.min(i(\"y\"), f.x[Ee]), f.x.top), f.y.onZero = Math.max(Math.min(i(\"x\"), f.y.right), f.y.left), a[K] = [\"y\" === l ? f.y[s] : c[0], \"x\" === l ? f.x[s] : c[3]], a[v] = Math.PI / 2 * (\"x\" === l ? 0 : 1);var d = { top: -1, bottom: 1, left: -1, right: 1 };a.labelDirection = a.tickDirection = a.nameDirection = d[o], r.onZero && (a.labelOffset = f[l][o] - f[l].onZero), e[Ze](\"axisTick\").get(\"inside\") && (a.tickDirection = -a.tickDirection), e[Ze](\"axisLabel\").get(\"inside\") && (a.labelDirection = -a.labelDirection);var p = e[Ze](\"axisLabel\").get(\"rotate\");return a.labelRotation = \"top\" === s ? -p : p, a.labelInterval = r.getLabelInterval(), a.z2 = 1, a;\n    }var i = t(ri),\n        n = t(I),\n        r = t(\"./AxisBuilder\"),\n        a = r.ifIgnoreOnTick,\n        o = r.getInterval,\n        s = [\"axisLine\", \"axisLabel\", \"axisTick\", \"axisName\"],\n        l = [\"splitArea\", \"splitLine\"],\n        u = t(z)[ii]({ type: \"axis\", render: function render(t) {\n        this.group[ei]();var a = this._axisGroup;if (this._axisGroup = new n.Group(), this.group.add(this._axisGroup), t.get(\"show\")) {\n          var o = t.findGridModel(),\n              u = e(o, t),\n              c = new r(t, u);i.each(s, c.add, c), this._axisGroup.add(c.getGroup()), i.each(l, function (e) {\n            t.get(e + \".show\") && this[\"_\" + e](t, o, u.labelInterval);\n          }, this), n.groupTransition(a, this._axisGroup, t);\n        }\n      }, _splitLine: function _splitLine(t, e, r) {\n        var s = t.axis,\n            l = t[Ze](\"splitLine\"),\n            u = l[Ze](\"lineStyle\"),\n            c = u.get(\"color\"),\n            h = o(l, r);c = i[he](c) ? c : [c];for (var f = e[ti].getRect(), d = s.isHorizontal(), p = 0, v = s.getTicksCoords(), m = s.scale.getTicks(), g = [], y = [], x = u.getLineStyle(), _ = 0; _ < v[Ae]; _++) {\n          if (!a(s, _, h)) {\n            var b = s[H](v[_]);d ? (g[0] = b, g[1] = f.y, y[0] = b, y[1] = f.y + f[Re]) : (g[0] = f.x, g[1] = b, y[0] = f.x + f.width, y[1] = b);var w = p++ % c[Ae];this._axisGroup.add(new n.Line(n.subPixelOptimizeLine({ anid: \"line_\" + m[_], shape: { x1: g[0], y1: g[1], x2: y[0], y2: y[1] }, style: i[Je]({ stroke: c[w] }, x), silent: !0 })));\n          }\n        }\n      }, _splitArea: function _splitArea(t, e, r) {\n        var s = t.axis,\n            l = t[Ze](\"splitArea\"),\n            u = l[Ze](\"areaStyle\"),\n            c = u.get(\"color\"),\n            h = e[ti].getRect(),\n            f = s.getTicksCoords(),\n            d = s.scale.getTicks(),\n            p = s[H](f[0]),\n            v = s[H](f[0]),\n            m = 0,\n            g = o(l, r),\n            y = u.getAreaStyle();c = i[he](c) ? c : [c];for (var x = 1; x < f[Ae]; x++) {\n          if (!a(s, x, g)) {\n            var _,\n                b,\n                w,\n                M,\n                S = s[H](f[x]);s.isHorizontal() ? (_ = p, b = h.y, w = S - _, M = h[Re]) : (_ = h.x, b = v, w = h.width, M = S - b);var T = m++ % c[Ae];this._axisGroup.add(new n.Rect({ anid: \"area_\" + d[x], shape: { x: _, y: b, width: w, height: M }, style: i[Je]({ fill: c[T] }, y), silent: !0 })), p = _ + w, v = b + M;\n          }\n        }\n      } });u[ke]({ type: \"xAxis\" }), u[ke]({ type: \"yAxis\" });\n  }), e(\"echarts/component/helper/selectableMixin\", [ai, ri], function (t) {\n    var e = t(ri);return { updateSelectedMap: function updateSelectedMap(t) {\n        this._selectTargetMap = e.reduce(t || [], function (t, e) {\n          return t[e.name] = e, t;\n        }, {});\n      }, select: function select(t) {\n        var i = this._selectTargetMap,\n            n = i[t],\n            r = this.get(\"selectedMode\");\"single\" === r && e.each(i, function (t) {\n          t.selected = !1;\n        }), n && (n.selected = !0);\n      }, unSelect: function unSelect(t) {\n        var e = this._selectTargetMap[t];e && (e.selected = !1);\n      }, toggleSelected: function toggleSelected(t) {\n        var e = this._selectTargetMap[t];return null != e ? (this[e.selected ? \"unSelect\" : \"select\"](t), e.selected) : void 0;\n      }, isSelected: function isSelected(t) {\n        var e = this._selectTargetMap[t];return e && e.selected;\n      } };\n  }), e(\"echarts/chart/helper/Symbol\", [ai, ri, \"../../util/symbol\", I, u], function (t) {\n    function e(t) {\n      return t instanceof Array || (t = [+t, +t]), t;\n    }function i(t, e, i) {\n      s.Group.call(this), this[c](t, e, i);\n    }function n(t, e) {\n      this[m].drift(t, e);\n    }var r = t(ri),\n        a = t(\"../../util/symbol\"),\n        s = t(I),\n        l = t(u),\n        h = i[Ue];h._createSymbol = function (t, i, r) {\n      this[ei]();var o = i.hostModel,\n          l = i[S](r, \"color\"),\n          u = a.createSymbol(t, -.5, -.5, 1, 1, l);u.attr({ z2: 100, culling: !0, scale: [0, 0] }), u.drift = n;var c = e(i[S](r, \"symbolSize\"));s.initProps(u, { scale: c }, o, r), this._symbolType = t, this.add(u);\n    }, h.stopSymbolAnimation = function (t) {\n      this.childAt(0).stopAnimation(t);\n    }, h.getSymbolPath = function () {\n      return this.childAt(0);\n    }, h.getScale = function () {\n      return this.childAt(0).scale;\n    }, h.highlight = function () {\n      this.childAt(0)[Te](b);\n    }, h.downplay = function () {\n      this.childAt(0)[Te](D);\n    }, h.setZ = function (t, e) {\n      var i = this.childAt(0);i[de] = t, i.z = e;\n    }, h.setDraggable = function (t) {\n      var e = this.childAt(0);e.draggable = t, e.cursor = t ? \"move\" : \"pointer\";\n    }, h[c] = function (t, i, n) {\n      this[we] = !1;var r = t[S](i, \"symbol\") || \"circle\",\n          a = t.hostModel,\n          o = e(t[S](i, \"symbolSize\"));if (r !== this._symbolType) this._createSymbol(r, t, i);else {\n        var l = this.childAt(0);s.updateProps(l, { scale: o }, a, i);\n      }this._updateCommon(t, i, o, n), this._seriesModel = a;\n    };var f = [\"itemStyle\", D],\n        d = [\"itemStyle\", b],\n        p = [\"label\", D],\n        y = [\"label\", b];return h._updateCommon = function (t, i, n, a) {\n      var u = this.childAt(0),\n          c = t.hostModel,\n          h = t[S](i, \"color\");\"image\" !== u.type && u.useStyle({ strokeNoScale: !0 }), a = a || null;var m = a && a.itemStyle,\n          x = a && a.hoverItemStyle,\n          _ = a && a.symbolRotate,\n          w = a && a.symbolOffset,\n          M = a && a.labelModel,\n          T = a && a.hoverLabelModel,\n          A = a && a.hoverAnimation;if (!a || t[o]) {\n        var C = t[L](i);m = C[Ze](f)[Ke]([\"color\"]), x = C[Ze](d)[Ke](), _ = C[g](\"symbolRotate\"), w = C[g](\"symbolOffset\"), M = C[Ze](p), T = C[Ze](y), A = C[g](\"hoverAnimation\");\n      } else x = r[ke]({}, x);var k = u.style;u[v] = (_ || 0) * Math.PI / 180 || 0, w && u.attr(K, [l[R](w[0], n[0]), l[R](w[1], n[1])]), u.setColor(h), u[pe](m);var P = t[S](i, Q);null != P && (k[Q] = P);for (var z, I, O = t[B].slice(); O[Ae] && (z = O.pop(), I = t.getDimensionInfo(z).type, I === G || \"time\" === I);) {}null != z && M[g](\"show\") ? (s.setText(k, M, h), k.text = r[V](c.getFormattedLabel(i, D), t.get(z, i))) : k.text = \"\", null != z && T[g](\"show\") ? (s.setText(x, T, h), x.text = r[V](c.getFormattedLabel(i, b), t.get(z, i))) : x.text = \"\";var E = e(t[S](i, \"symbolSize\"));if (u.off(be).off(_e).off(b).off(D), u.hoverStyle = x, s.setHoverStyle(u), A && c.ifEnableAnimation()) {\n        var N = function N() {\n          var t = E[1] / E[0];this.animateTo({ scale: [Math.max(1.1 * E[0], E[0] + 3), Math.max(1.1 * E[1], E[1] + 3 * t)] }, 400, \"elasticOut\");\n        },\n            F = function F() {\n          this.animateTo({ scale: E }, 400, \"elasticOut\");\n        };u.on(be, N).on(_e, F).on(b, N).on(D, F);\n      }\n    }, h.fadeOut = function (t) {\n      var e = this.childAt(0);this[we] = !0, e.style.text = \"\", s.updateProps(e, { scale: [0, 0] }, this._seriesModel, this[ye], t);\n    }, r[oe](i, s.Group), i;\n  }), e(\"echarts/chart/line/poly\", [ai, \"zrender/graphic/Path\", Ye], function (t) {\n    function e(t) {\n      return isNaN(t[0]) || isNaN(t[1]);\n    }function i(t, i, n, a, p, v, m, g, y, x, _) {\n      for (var b = 0, w = n, M = 0; a > M; M++) {\n        var S = i[w];if (w >= p || 0 > w) break;if (e(S)) {\n          if (_) {\n            w += v;continue;\n          }break;\n        }if (w === n) t[v > 0 ? r : \"lineTo\"](S[0], S[1]), c(f, S);else if (y > 0) {\n          var T = w + v,\n              A = i[T];if (_) for (; A && e(i[T]);) {\n            T += v, A = i[T];\n          }var C = .5,\n              k = i[b],\n              A = i[T];if (!A || e(A)) c(d, S);else {\n            e(A) && !_ && (A = S), o.sub(h, A, k);var L, P;if (\"x\" === x || \"y\" === x) {\n              var D = \"x\" === x ? 0 : 1;L = Math.abs(S[D] - k[D]), P = Math.abs(S[D] - A[D]);\n            } else L = o.dist(S, k), P = o.dist(S, A);C = P / (P + L), u(d, S, h, -y * (1 - C));\n          }s(f, f, g), l(f, f, m), s(d, d, g), l(d, d, m), t.bezierCurveTo(f[0], f[1], d[0], d[1], S[0], S[1]), u(f, S, h, y * C);\n        } else t.lineTo(S[0], S[1]);b = w, w += v;\n      }return M;\n    }function n(t, e) {\n      var i = [1 / 0, 1 / 0],\n          n = [-1 / 0, -1 / 0];if (e) for (var r = 0; r < t[Ae]; r++) {\n        var a = t[r];a[0] < i[0] && (i[0] = a[0]), a[1] < i[1] && (i[1] = a[1]), a[0] > n[0] && (n[0] = a[0]), a[1] > n[1] && (n[1] = a[1]);\n      }return { min: e ? i : n, max: e ? n : i };\n    }var a = t(\"zrender/graphic/Path\"),\n        o = t(Ye),\n        s = o.min,\n        l = o.max,\n        u = o.scaleAndAdd,\n        c = o.copy,\n        h = [],\n        f = [],\n        d = [];return { Polyline: a[ke]({ type: \"ec-polyline\", shape: { points: [], smooth: 0, smoothConstraint: !0, smoothMonotone: null, connectNulls: !1 }, style: { fill: null, stroke: \"#000\" }, buildPath: function buildPath(t, r) {\n          var a = r.points,\n              o = 0,\n              s = a[Ae],\n              l = n(a, r.smoothConstraint);if (r.connectNulls) {\n            for (; s > 0 && e(a[s - 1]); s--) {}for (; s > o && e(a[o]); o++) {}\n          }for (; s > o;) {\n            o += i(t, a, o, s, s, 1, l.min, l.max, r.smooth, r.smoothMonotone, r.connectNulls) + 1;\n          }\n        } }), Polygon: a[ke]({ type: \"ec-polygon\", shape: { points: [], stackedOnPoints: [], smooth: 0, stackedOnSmooth: 0, smoothConstraint: !0, smoothMonotone: null, connectNulls: !1 }, buildPath: function buildPath(t, r) {\n          var a = r.points,\n              o = r.stackedOnPoints,\n              s = 0,\n              l = a[Ae],\n              u = r.smoothMonotone,\n              c = n(a, r.smoothConstraint),\n              h = n(o, r.smoothConstraint);if (r.connectNulls) {\n            for (; l > 0 && e(a[l - 1]); l--) {}for (; l > s && e(a[s]); s++) {}\n          }for (; l > s;) {\n            var f = i(t, a, s, l, l, 1, c.min, c.max, r.smooth, u, r.connectNulls);i(t, o, s + f - 1, f, l, -1, h.min, h.max, r.stackedOnSmooth, u, r.connectNulls), s += f + 1, t.closePath();\n          }\n        } }) };\n  }), e(\"echarts/chart/line/lineAnimationDiff\", [ai], function () {\n    function t(t) {\n      return t >= 0 ? 1 : -1;\n    }function e(e, i, n) {\n      for (var r, a = e[E](), o = e.getOtherAxis(a), s = a.onZero ? 0 : o.scale[j]()[0], l = o.dim, u = \"x\" === l || \"radius\" === l ? 1 : 0, c = i.stackedOn, h = i.get(l, n); c && t(c.get(l, n)) === t(h);) {\n        r = c;break;\n      }var f = [];return f[u] = i.get(a.dim, n), f[1 - u] = r ? r.get(l, n, !0) : s, e[N](f);\n    }function i(t, e) {\n      var i = [];return e.diff(t).add(function (t) {\n        i.push({ cmd: \"+\", idx: t });\n      })[Ie](function (t, e) {\n        i.push({ cmd: \"=\", idx: e, idx1: t });\n      })[Le](function (t) {\n        i.push({ cmd: \"-\", idx: t });\n      })[k](), i;\n    }return function (t, n, r, a, o, s) {\n      for (var l = i(t, n), u = [], c = [], h = [], f = [], d = [], p = [], v = [], m = s[B], g = 0; g < l[Ae]; g++) {\n        var y = l[g],\n            x = !0;switch (y.cmd) {case \"=\":\n            var _ = t[P](y.idx),\n                b = n[P](y.idx1);(isNaN(_[0]) || isNaN(_[1])) && (_ = b.slice()), u.push(_), c.push(b), h.push(r[y.idx]), f.push(a[y.idx1]), v.push(n.getRawIndex(y.idx1));break;case \"+\":\n            var w = y.idx;u.push(o[N]([n.get(m[0], w, !0), n.get(m[1], w, !0)])), c.push(n[P](w).slice()), h.push(e(o, n, w)), f.push(a[w]), v.push(n.getRawIndex(w));break;case \"-\":\n            var w = y.idx,\n                M = t.getRawIndex(w);M !== w ? (u.push(t[P](w)), c.push(s[N]([t.get(m[0], w, !0), t.get(m[1], w, !0)])), h.push(r[w]), f.push(e(s, t, w)), v.push(M)) : x = !1;}x && (d.push(y), p.push(p[Ae]));\n      }p.sort(function (t, e) {\n        return v[t] - v[e];\n      });for (var S = [], T = [], A = [], C = [], k = [], g = 0; g < p[Ae]; g++) {\n        var w = p[g];S[g] = u[w], T[g] = c[w], A[g] = h[w], C[g] = f[w], k[g] = d[w];\n      }return { current: S, next: T, stackedOnCurrent: A, stackedOnNext: C, status: k };\n    };\n  }), e(\"echarts/component/helper/listComponent\", [ai, \"../../util/layout\", \"../../util/format\", I], function (t) {\n    function e(t, e, n) {\n      i.positionGroup(t, e.getBoxLayoutParams(), { width: n[Ge](), height: n[He]() }, e.get(\"padding\"));\n    }var i = t(\"../../util/layout\"),\n        n = t(\"../../util/format\"),\n        r = t(I);return { layout: function layout(t, n, r) {\n        var a = i.getLayoutRect(n.getBoxLayoutParams(), { width: r[Ge](), height: r[He]() }, n.get(\"padding\"));i.box(n.get(\"orient\"), t, n.get(\"itemGap\"), a.width, a[Re]), e(t, n, r);\n      }, addBackground: function addBackground(t, e) {\n        var i = n.normalizeCssArray(e.get(\"padding\")),\n            a = t[ee](),\n            o = e[Ke]([\"color\", Q]);o.fill = e.get(\"backgroundColor\");var s = new r.Rect({ shape: { x: a.x - i[3], y: a.y - i[0], width: a.width + i[1] + i[3], height: a[Re] + i[0] + i[2] }, style: o, silent: !0, z2: -1 });r.subPixelOptimizeRect(s), t.add(s);\n      } };\n  }), e(\"echarts/util/symbol\", [ai, \"./graphic\", \"zrender/core/BoundingRect\"], function (t) {\n    var e = t(\"./graphic\"),\n        i = t(\"zrender/core/BoundingRect\"),\n        a = e.extendShape({ type: \"triangle\", shape: { cx: 0, cy: 0, width: 0, height: 0 }, buildPath: function buildPath(t, e) {\n        var i = e.cx,\n            n = e.cy,\n            a = e.width / 2,\n            o = e[Re] / 2;t[r](i, n - o), t.lineTo(i + a, n + o), t.lineTo(i - a, n + o), t.closePath();\n      } }),\n        o = e.extendShape({ type: \"diamond\", shape: { cx: 0, cy: 0, width: 0, height: 0 }, buildPath: function buildPath(t, e) {\n        var i = e.cx,\n            n = e.cy,\n            a = e.width / 2,\n            o = e[Re] / 2;t[r](i, n - o), t.lineTo(i + a, n), t.lineTo(i, n + o), t.lineTo(i - a, n), t.closePath();\n      } }),\n        s = e.extendShape({ type: \"pin\", shape: { x: 0, y: 0, width: 0, height: 0 }, buildPath: function buildPath(t, e) {\n        var i = e.x,\n            n = e.y,\n            r = e.width / 5 * 3,\n            a = Math.max(r, e[Re]),\n            o = r / 2,\n            s = o * o / (a - o),\n            l = n - a + o + s,\n            u = Math.asin(s / o),\n            c = Math.cos(u) * o,\n            h = Math.sin(u),\n            f = Math.cos(u);t.arc(i, l, o, Math.PI - u, 2 * Math.PI + u);var d = .6 * o,\n            p = .7 * o;t.bezierCurveTo(i + c - h * d, l + s + f * d, i, n - p, i, n), t.bezierCurveTo(i, n - p, i - c + h * d, l + s + f * d, i - c, l + s), t.closePath();\n      } }),\n        l = e.extendShape({ type: \"arrow\", shape: { x: 0, y: 0, width: 0, height: 0 }, buildPath: function buildPath(t, e) {\n        var i = e[Re],\n            n = e.width,\n            a = e.x,\n            o = e.y,\n            s = n / 3 * 2;t[r](a, o), t.lineTo(a + s, o + i), t.lineTo(a, o + i / 4 * 3), t.lineTo(a - s, o + i), t.lineTo(a, o), t.closePath();\n      } }),\n        u = { line: e.Line, rect: e.Rect, roundRect: e.Rect, square: e.Rect, circle: e.Circle, diamond: o, pin: s, arrow: l, triangle: a },\n        c = { line: function line(t, e, i, n, r) {\n        r.x1 = t, r.y1 = e + n / 2, r.x2 = t + i, r.y2 = e + n / 2;\n      }, rect: function rect(t, e, i, n, r) {\n        r.x = t, r.y = e, r.width = i, r[Re] = n;\n      }, roundRect: function roundRect(t, e, i, n, r) {\n        r.x = t, r.y = e, r.width = i, r[Re] = n, r.r = Math.min(i, n) / 4;\n      }, square: function square(t, e, i, n, r) {\n        var a = Math.min(i, n);r.x = t, r.y = e, r.width = a, r[Re] = a;\n      }, circle: function circle(t, e, i, n, r) {\n        r.cx = t + i / 2, r.cy = e + n / 2, r.r = Math.min(i, n) / 2;\n      }, diamond: function diamond(t, e, i, n, r) {\n        r.cx = t + i / 2, r.cy = e + n / 2, r.width = i, r[Re] = n;\n      }, pin: function pin(t, e, i, n, r) {\n        r.x = t + i / 2, r.y = e + n / 2, r.width = i, r[Re] = n;\n      }, arrow: function arrow(t, e, i, n, r) {\n        r.x = t + i / 2, r.y = e + n / 2, r.width = i, r[Re] = n;\n      }, triangle: function triangle(t, e, i, n, r) {\n        r.cx = t + i / 2, r.cy = e + n / 2, r.width = i, r[Re] = n;\n      } },\n        h = {};for (var f in u) {\n      h[f] = new u[f]();\n    }var d = e.extendShape({ type: \"symbol\", shape: { symbolType: \"\", x: 0, y: 0, width: 0, height: 0 }, beforeBrush: function beforeBrush() {\n        var t = this.style,\n            e = this.shape;\"pin\" === e.symbolType && \"inside\" === t.textPosition && (t.textPosition = [\"50%\", \"40%\"], t[re] = J, t.textVerticalAlign = te);\n      }, buildPath: function buildPath(t, e, i) {\n        var r = e.symbolType,\n            a = h[r];\"none\" !== e.symbolType && (a || (r = \"rect\", a = h[r]), c[r](e.x, e.y, e.width, e[Re], a.shape), a[n](t, a.shape, i));\n      } }),\n        p = function p(t) {\n      if (\"image\" !== this.type) {\n        var e = this.style,\n            i = this.shape;i && \"line\" === i.symbolType ? e[y] = t : this.__isEmptyBrush ? (e[y] = t, e.fill = \"#fff\") : (e.fill && (e.fill = t), e[y] && (e[y] = t)), this.dirty(!1);\n      }\n    },\n        v = { createSymbol: function createSymbol(t, n, r, a, o, s) {\n        var l = 0 === t[se](\"empty\");l && (t = t.substr(5, 1)[Xe]() + t.substr(6));var u;return u = 0 === t[se](\"image://\") ? new e.Image({ style: { image: t.slice(8), x: n, y: r, width: a, height: o } }) : 0 === t[se](\"path://\") ? e.makePath(t.slice(7), {}, new i(n, r, a, o)) : new d({ shape: { symbolType: t, x: n, y: r, width: a, height: o } }), u.__isEmptyBrush = l, u.setColor = p, u.setColor(s), u;\n      } };return v;\n  }), e(\"echarts/component/tooltip/TooltipContent\", [ai, ri, $e, \"zrender/core/event\", \"../../util/format\", Qe], function (t) {\n    function e(t) {\n      var e = \"cubic-bezier(0.23, 1, 0.32, 1)\",\n          i = \"left \" + t + \"s \" + e + \",top \" + t + \"s \" + e;return o.map(d, function (t) {\n        return t + \"transition:\" + i;\n      }).join(\";\");\n    }function i(t) {\n      var e = [],\n          i = t.get(\"fontSize\"),\n          n = t[ie]();return n && e.push(\"color:\" + n), e.push(\"font:\" + t[ne]()), i && e.push(\"line-height:\" + Math.round(3 * i / 2) + \"px\"), c([\"decoration\", \"align\"], function (i) {\n        var n = t.get(i);n && e.push(\"text-\" + i + \":\" + n);\n      }), e.join(\";\");\n    }function n(t) {\n      t = t;var n = [],\n          r = t.get(\"transitionDuration\"),\n          a = t.get(\"backgroundColor\"),\n          o = t[Ze](ae),\n          l = t.get(\"padding\");return r && n.push(e(r)), a && (f[Fe] ? n.push(\"background-Color:\" + a) : (n.push(\"background-Color:#\" + s.toHex(a)), n.push(\"filter:alpha(opacity=70)\"))), c([\"width\", \"color\", \"radius\"], function (e) {\n        var i = \"border-\" + e,\n            r = h(i),\n            a = t.get(r);null != a && n.push(i + \":\" + a + (\"color\" === e ? \"\" : \"px\"));\n      }), n.push(i(o)), null != l && n.push(\"padding:\" + u.normalizeCssArray(l).join(\"px \") + \"px\"), n.join(\";\") + \";\";\n    }function r(t, e) {\n      var i = document[X](\"div\"),\n          n = e.getZr();this.el = i, this._x = e[Ge]() / 2, this._y = e[He]() / 2, t.appendChild(i), this._container = t, this._show = !1, this._hideTimeout;var r = this;i.onmouseenter = function () {\n        r.enterable && (clearTimeout(r._hideTimeout), r._show = !0), r._inContent = !0;\n      }, i.onmousemove = function (e) {\n        if (!r.enterable) {\n          var i = n.handler;l.normalizeEvent(t, e), i.dispatch(\"mousemove\", e);\n        }\n      }, i.onmouseleave = function () {\n        r.enterable && r._show && r.hideLater(r._hideDelay), r._inContent = !1;\n      }, a(i, t);\n    }function a(t, e) {\n      function i(t) {\n        n(t[xe]) && t.preventDefault();\n      }function n(i) {\n        for (; i && i !== e;) {\n          if (i === t) return !0;i = i.parentNode;\n        }\n      }l.addEventListener(e, \"touchstart\", i), l.addEventListener(e, \"touchmove\", i), l.addEventListener(e, \"touchend\", i);\n    }var o = t(ri),\n        s = t($e),\n        l = t(\"zrender/core/event\"),\n        u = t(\"../../util/format\"),\n        c = o.each,\n        h = u.toCamelCase,\n        f = t(Qe),\n        d = [\"\", \"-webkit-\", \"-moz-\", \"-o-\"],\n        p = \"position:absolute;display:block;border-style:solid;white-space:nowrap;z-index:9999999;\";return r[Ue] = { constructor: r, enterable: !0, update: function update() {\n        var t = this._container,\n            e = t.currentStyle || document.defaultView.getComputedStyle(t),\n            i = t.style;\"absolute\" !== i[K] && \"absolute\" !== e[K] && (i[K] = \"relative\");\n      }, show: function show(t) {\n        clearTimeout(this._hideTimeout);var e = this.el;e.style.cssText = p + n(t) + \";left:\" + this._x + \"px;top:\" + this._y + \"px;\" + (t.get(\"extraCssText\") || \"\"), e.style.display = e.innerHTML ? \"block\" : \"none\", this._show = !0;\n      }, setContent: function setContent(t) {\n        var e = this.el;e.innerHTML = t, e.style.display = t ? \"block\" : \"none\";\n      }, moveTo: function moveTo(t, e) {\n        var i = this.el.style;i.left = t + \"px\", i.top = e + \"px\", this._x = t, this._y = e;\n      }, hide: function hide() {\n        this.el.style.display = \"none\", this._show = !1;\n      }, hideLater: function hideLater(t) {\n        !this._show || this._inContent && this.enterable || (t ? (this._hideDelay = t, this._show = !1, this._hideTimeout = setTimeout(o.bind(this.hide, this), t)) : this.hide());\n      }, isShow: function isShow() {\n        return this._show;\n      } }, r;\n  }), e(\"echarts/component/marker/MarkerView\", [ai, z], function (t) {\n    return t(z)[ii]({ type: \"marker\", init: function init() {\n        this.markerGroupMap = {};\n      }, render: function render(t, e, i) {\n        var n = this.markerGroupMap;for (var r in n) {\n          n[r].__keep = !1;\n        }var a = this.type + \"Model\";e[ze](function (t) {\n          var n = t[a];n && this.renderSeries(t, n, e, i);\n        }, this);for (var r in n) {\n          n[r].__keep || this.group[Le](n[r].group);\n        }\n      }, renderSeries: function renderSeries() {} });\n  }), e(\"echarts/component/marker/markerHelper\", [ai, ri, u], function (t) {\n    function e(t) {\n      return !(isNaN(parseFloat(t.x)) && isNaN(parseFloat(t.y)));\n    }function i(t) {\n      return !isNaN(parseFloat(t.x)) && !isNaN(parseFloat(t.y));\n    }function n(t, e, i) {\n      var n = -1;do {\n        n = Math.max(o.getPrecision(t.get(e, i)), n), t = t.stackedOn;\n      } while (t);return n;\n    }function r(t, e, i, r, a, o) {\n      var s = [],\n          l = m(e, r, t),\n          u = e.indexOfNearest(r, l, !0);s[a] = e.get(i, u, !0), s[o] = e.get(r, u, !0);var c = n(e, r, u);return c >= 0 && (s[o] = +s[o][f](c)), s;\n    }var a = t(ri),\n        o = t(u),\n        s = a[se],\n        l = a.curry,\n        c = { min: l(r, \"min\"), max: l(r, \"max\"), average: l(r, \"average\") },\n        h = function h(t, e) {\n      var n = t[ni](),\n          r = t[ti];if (e && !i(e) && !a[he](e.coord) && r) {\n        var o = r[B],\n            l = d(e, n, r, t);if (e = a.clone(e), e.type && c[e.type] && l.baseAxis && l.valueAxis) {\n          var u = s(o, l.baseAxis.dim),\n              h = s(o, l.valueAxis.dim);e.coord = c[e.type](n, l.baseDataDim, l.valueDataDim, u, h), e.value = e.coord[h];\n        } else {\n          for (var f = [null != e.xAxis ? e.xAxis : e.radiusAxis, null != e.yAxis ? e.yAxis : e.angleAxis], p = 0; 2 > p; p++) {\n            if (c[f[p]]) {\n              var v = t.coordDimToDataDim(o[p])[0];f[p] = m(n, v, f[p]);\n            }\n          }e.coord = f;\n        }\n      }return e;\n    },\n        d = function d(t, e, i, n) {\n      var r = {};return null != t.valueIndex || null != t.valueDim ? (r.valueDataDim = null != t.valueIndex ? e.getDimension(t.valueIndex) : t.valueDim, r.valueAxis = i[q](n.dataDimToCoordDim(r.valueDataDim)), r.baseAxis = i.getOtherAxis(r.valueAxis), r.baseDataDim = n.coordDimToDataDim(r.baseAxis.dim)[0]) : (r.baseAxis = n[E](), r.valueAxis = i.getOtherAxis(r.baseAxis), r.baseDataDim = n.coordDimToDataDim(r.baseAxis.dim)[0], r.valueDataDim = n.coordDimToDataDim(r.valueAxis.dim)[0]), r;\n    },\n        p = function p(t, i) {\n      return t && t.containData && i.coord && !e(i) ? t.containData(i.coord) : !0;\n    },\n        v = function v(t, e, i, n) {\n      return 2 > n ? t.coord && t.coord[n] : t.value;\n    },\n        m = function m(t, e, i) {\n      if (\"average\" === i) {\n        var n = 0,\n            r = 0;return t.each(e, function (t) {\n          isNaN(t) || (n += t, r++);\n        }, !0), n / r;\n      }return t.getDataExtent(e, !0)[\"max\" === i ? 1 : 0];\n    };return { dataTransform: h, dataFilter: p, dimValueGetter: v, getAxisInfo: d, numCalculate: m };\n  }), e(\"echarts/chart/helper/LineDraw\", [ai, I, \"./Line\"], function (t) {\n    function e(t) {\n      return isNaN(t[0]) || isNaN(t[1]);\n    }function i(t) {\n      return !e(t[0]) && !e(t[1]);\n    }function n(t) {\n      this._ctor = t || a, this.group = new r.Group();\n    }var r = t(I),\n        a = t(\"./Line\"),\n        o = n[Ue];return o[c] = function (t) {\n      var e = this._lineData,\n          n = this.group,\n          r = this._ctor,\n          a = t.hostModel,\n          o = { lineStyle: a[Ze](\"lineStyle.normal\").getLineStyle(), hoverLineStyle: a[Ze](\"lineStyle.emphasis\").getLineStyle(), labelModel: a[Ze](\"label.normal\"), hoverLabelModel: a[Ze](\"label.emphasis\") };t.diff(e).add(function (e) {\n        if (i(t[P](e))) {\n          var a = new r(t, e, o);t[C](e, a), n.add(a);\n        }\n      })[Ie](function (a, s) {\n        var l = e[A](s);return i(t[P](a)) ? (l ? l[c](t, a, o) : l = new r(t, a, o), t[C](a, l), void n.add(l)) : void n[Le](l);\n      })[Le](function (t) {\n        n[Le](e[A](t));\n      })[k](), this._lineData = t;\n    }, o[De] = function () {\n      var t = this._lineData;t[T](function (e, i) {\n        e[De](t, i);\n      }, this);\n    }, o[Le] = function () {\n      this.group[ei]();\n    }, n;\n  }), e(\"echarts/chart/pie/labelLayout\", [ai, \"zrender/contain/text\"], function (t) {\n    function e(t, e, i, n, r, a, o) {\n      function s(e, i, n) {\n        for (var r = e; i > r; r++) {\n          if (t[r].y += n, r > e && i > r + 1 && t[r + 1].y > t[r].y + t[r][Re]) return void l(r, n / 2);\n        }l(i - 1, n / 2);\n      }function l(e, i) {\n        for (var n = e; n >= 0 && (t[n].y -= i, !(n > 0 && t[n].y > t[n - 1].y + t[n - 1][Re])); n--) {}\n      }function u(t, e, i, n, r, a) {\n        for (var o = a > 0 ? e ? Number.MAX_VALUE : 0 : e ? Number.MAX_VALUE : 0, s = 0, l = t[Ae]; l > s; s++) {\n          if (t[s][K] !== J) {\n            var u = Math.abs(t[s].y - n),\n                c = t[s].len,\n                h = t[s].len2,\n                f = r + c > u ? Math.sqrt((r + c + h) * (r + c + h) - u * u) : Math.abs(t[s].x - i);e && f >= o && (f = o - 10), !e && o >= f && (f = o + 10), t[s].x = i + f * a, o = f;\n          }\n        }\n      }t.sort(function (t, e) {\n        return t.y - e.y;\n      });for (var c, h = 0, f = t[Ae], d = [], p = [], v = 0; f > v; v++) {\n        c = t[v].y - h, 0 > c && s(v, f, -c, r), h = t[v].y + t[v][Re];\n      }0 > o - h && l(f - 1, h - o);for (var v = 0; f > v; v++) {\n        t[v].y >= i ? p.push(t[v]) : d.push(t[v]);\n      }u(d, !1, e, i, n, r), u(p, !0, e, i, n, r);\n    }function i(t, i, n, r, a, o) {\n      for (var s = [], l = [], u = 0; u < t[Ae]; u++) {\n        t[u].x < i ? s.push(t[u]) : l.push(t[u]);\n      }e(l, i, n, r, 1, a, o), e(s, i, n, r, -1, a, o);for (var u = 0; u < t[Ae]; u++) {\n        var c = t[u].linePoints;if (c) {\n          var h = c[1][0] - c[2][0];c[2][0] = t[u].x < i ? t[u].x + 3 : t[u].x - 3, c[1][1] = c[2][1] = t[u].y, c[1][0] = c[2][0] + h;\n        }\n      }\n    }var n = t(\"zrender/contain/text\");return function (t, e, r, a) {\n      var o,\n          s,\n          l = t[ni](),\n          u = [],\n          c = !1;l.each(function (i) {\n        var r,\n            a,\n            f,\n            d,\n            p = l[P](i),\n            v = l[L](i),\n            m = v[Ze](\"label.normal\"),\n            g = m.get(K) || v.get(\"label.emphasis.position\"),\n            y = v[Ze](\"labelLine.normal\"),\n            x = y.get(Ae),\n            _ = y.get(\"length2\"),\n            b = (p.startAngle + p.endAngle) / 2,\n            w = Math.cos(b),\n            M = Math.sin(b);o = p.cx, s = p.cy;var S = \"inside\" === g || \"inner\" === g;if (g === J) r = p.cx, a = p.cy, d = J;else {\n          var T = (S ? (p.r + p.r0) / 2 * w : p.r * w) + o,\n              A = (S ? (p.r + p.r0) / 2 * M : p.r * M) + s;if (r = T + 3 * w, a = A + 3 * M, !S) {\n            var C = T + w * (x + e - p.r),\n                k = A + M * (x + e - p.r),\n                z = C + (0 > w ? -1 : 1) * _,\n                I = k;r = z + (0 > w ? -5 : 5), a = I, f = [[T, A], [C, k], [z, I]];\n          }d = S ? J : w > 0 ? \"left\" : \"right\";\n        }var O = m[Ze](ae)[ne](),\n            R = m.get(\"rotate\") ? 0 > w ? -b + Math.PI : -b : 0,\n            E = t.getFormattedLabel(i, D) || l[h](i),\n            N = n[ee](E, O, d, \"top\");c = !!R, p.label = { x: r, y: a, position: g, height: N[Re], len: x, len2: _, linePoints: f, textAlign: d, verticalAlign: \"middle\", font: O, rotation: R }, S || u.push(p.label);\n      }), !c && t.get(\"avoidLabelOverlap\") && i(u, o, s, e, r, a);\n    };\n  }), e(\"echarts/component/axis/AxisBuilder\", [ai, ri, \"../../util/format\", I, \"../../model/Model\", u, Ye], function (t) {\n    function e(t) {\n      var e = { componentType: t.mainType };return e[t.mainType + \"Index\"] = t[Z], e;\n    }function i(t, e, i) {\n      var n,\n          r,\n          a = d(e - t[v]);return p(a) ? (r = i > 0 ? \"top\" : Ee, n = J) : p(a - x) ? (r = i > 0 ? Ee : \"top\", n = J) : (r = te, n = a > 0 && x > a ? i > 0 ? \"right\" : \"left\" : i > 0 ? \"left\" : \"right\"), { rotation: a, textAlign: n, verticalAlign: r };\n    }function n(t, e, i, n) {\n      var r,\n          a,\n          o = d(i - t[v]),\n          s = n[0] > n[1],\n          l = \"start\" === e && !s || \"start\" !== e && s;return p(o - x / 2) ? (a = l ? Ee : \"top\", r = J) : p(o - 1.5 * x) ? (a = l ? \"top\" : Ee, r = J) : (a = te, r = 1.5 * x > o && o > x / 2 ? l ? \"left\" : \"right\" : l ? \"right\" : \"left\"), { rotation: o, textAlign: r, verticalAlign: a };\n    }function r(t) {\n      var e = t.get(\"tooltip\");return t.get(we) || !(t.get(\"triggerEvent\") || e && e.show);\n    }var o = t(ri),\n        l = t(\"../../util/format\"),\n        c = t(I),\n        h = t(\"../../model/Model\"),\n        f = t(u),\n        d = f.remRadian,\n        p = f.isRadianAroundZero,\n        m = t(Ye),\n        g = m[_],\n        y = o[V],\n        x = Math.PI,\n        b = function b(t, e) {\n      this.opt = e, this.axisModel = t, o[Je](e, { labelOffset: 0, nameDirection: 1, tickDirection: 1, labelDirection: 1, silent: !0 }), this.group = new c.Group();var i = new c.Group({ position: e[K].slice(), rotation: e[v] });i.updateTransform(), this._transform = i[a], this._dumbGroup = i;\n    };b[Ue] = { constructor: b, hasBuilder: function hasBuilder(t) {\n        return !!w[t];\n      }, add: function add(t) {\n        w[t].call(this);\n      }, getGroup: function getGroup() {\n        return this.group;\n      } };var w = { axisLine: function axisLine() {\n        var t = this.opt,\n            e = this.axisModel;if (e.get(\"axisLine.show\")) {\n          var i = this.axisModel.axis[j](),\n              n = this._transform,\n              r = [i[0], 0],\n              a = [i[1], 0];n && (g(r, r, n), g(a, a, n)), this.group.add(new c.Line(c.subPixelOptimizeLine({ anid: \"line\", shape: { x1: r[0], y1: r[1], x2: a[0], y2: a[1] }, style: o[ke]({ lineCap: \"round\" }, e[Ze](\"axisLine.lineStyle\").getLineStyle()), strokeContainThreshold: t.strokeContainThreshold || 5, silent: !0, z2: 1 })));\n        }\n      }, axisTick: function axisTick() {\n        var t = this.axisModel;if (t.get(\"axisTick.show\")) for (var e = t.axis, i = t[Ze](\"axisTick\"), n = this.opt, r = i[Ze](\"lineStyle\"), a = i.get(Ae), s = S(i, n.labelInterval), l = e.getTicksCoords(i.get(\"alignWithLabel\")), u = e.scale.getTicks(), h = [], f = [], d = this._transform, p = 0; p < l[Ae]; p++) {\n          if (!M(e, p, s)) {\n            var v = l[p];h[0] = v, h[1] = 0, f[0] = v, f[1] = n.tickDirection * a, d && (g(h, h, d), g(f, f, d)), this.group.add(new c.Line(c.subPixelOptimizeLine({ anid: \"tick_\" + u[p], shape: { x1: h[0], y1: h[1], x2: f[0], y2: f[1] }, style: o[Je](r.getLineStyle(), { stroke: t.get(\"axisLine.lineStyle.color\") }), z2: 2, silent: !0 })));\n          }\n        }\n      }, axisLabel: function axisLabel() {\n        function t(t, e) {\n          var i = t && t[ee]().clone(),\n              n = e && e[ee]().clone();return i && n ? (i[_](t.getLocalTransform()), n[_](e.getLocalTransform()), i.intersect(n)) : void 0;\n        }var n = this.opt,\n            a = this.axisModel,\n            o = y(n.axisLabelShow, a.get(\"axisLabel.show\"));if (o) {\n          var l = a.axis,\n              u = a[Ze](\"axisLabel\"),\n              f = u[Ze](ae),\n              d = u.get(\"margin\"),\n              p = l.scale.getTicks(),\n              m = a.getFormattedLabels(),\n              g = y(n.labelRotation, u.get(\"rotate\")) || 0;g = g * x / 180;for (var b = i(n, g, n.labelDirection), w = a.get(\"data\"), S = [], T = r(a), A = a.get(\"triggerEvent\"), C = 0; C < p[Ae]; C++) {\n            if (!M(l, C, n.labelInterval)) {\n              var k = f;w && w[C] && w[C][ae] && (k = new h(w[C][ae], f, a[s]));var L = k[ie]() || a.get(\"axisLine.lineStyle.color\"),\n                  P = l[O](p[C]),\n                  D = [P, n.labelOffset + n.labelDirection * d],\n                  z = l.scale.getLabel(p[C]),\n                  I = new c.Text({ anid: \"label_\" + p[C], style: { text: m[C], textAlign: k.get(\"align\", !0) || b[re], textVerticalAlign: k.get(\"baseline\", !0) || b.verticalAlign, textFont: k[ne](), fill: (typeof L === \"undefined\" ? \"undefined\" : _typeof(L)) === ce ? L(z) : L }, position: D, rotation: b[v], silent: T, z2: 10 });A && (I.eventData = e(a), I.eventData.targetType = \"axisLabel\", I.eventData.value = z), this._dumbGroup.add(I), I.updateTransform(), S.push(I), this.group.add(I), I.decomposeTransform();\n            }\n          }if (l.type !== W) {\n            if (a.getMin ? a.getMin() : a.get(\"min\")) {\n              var R = S[0],\n                  E = S[1];t(R, E) && (R[Ne] = !0);\n            }if (a.getMax ? a.getMax() : a.get(\"max\")) {\n              var N = S[S[Ae] - 1],\n                  B = S[S[Ae] - 2];t(B, N) && (N[Ne] = !0);\n            }\n          }\n        }\n      }, axisName: function axisName() {\n        var t = this.opt,\n            a = this.axisModel,\n            s = y(t.axisName, a.get(\"name\"));if (s) {\n          var u,\n              h = a.get(\"nameLocation\"),\n              f = t.nameDirection,\n              d = a[Ze](\"nameTextStyle\"),\n              p = a.get(\"nameGap\") || 0,\n              m = this.axisModel.axis[j](),\n              g = m[0] > m[1] ? -1 : 1,\n              _ = [\"start\" === h ? m[0] - g * p : \"end\" === h ? m[1] + g * p : (m[0] + m[1]) / 2, h === te ? t.labelOffset + f * p : 0],\n              b = a.get(\"nameRotate\");null != b && (b = b * x / 180);var w;h === te ? u = i(t, null != b ? b : t[v], f) : (u = n(t, h, b || 0, m), w = t.axisNameAvailableWidth, null != w && (w = Math.abs(w / Math.sin(u[v])), !isFinite(w) && (w = null)));var M = d[ne](),\n              S = a.get(\"nameTruncate\", !0) || {},\n              T = S.ellipsis,\n              A = y(S.maxWidth, w),\n              C = null != T && null != A ? l.truncateText(s, A, M, T, { minChar: 2, placeholder: S.placeholder }) : s,\n              k = a.get(\"tooltip\", !0),\n              L = a.mainType,\n              P = { componentType: L, name: s, $vars: [\"name\"] };P[L + \"Index\"] = a[Z];var D = new c.Text({ anid: \"name\", __fullText: s, __truncatedText: C, style: { text: C, textFont: M, fill: d[ie]() || a.get(\"axisLine.lineStyle.color\"), textAlign: u[re], textVerticalAlign: u.verticalAlign }, position: _, rotation: u[v], silent: r(a), z2: 1, tooltip: k && k.show ? o[ke]({ content: s, formatter: function formatter() {\n                return s;\n              }, formatterParams: P }, k) : null });a.get(\"triggerEvent\") && (D.eventData = e(a), D.eventData.targetType = \"axisName\", D.eventData.name = s), this._dumbGroup.add(D), D.updateTransform(), this.group.add(D), D.decomposeTransform();\n        }\n      } },\n        M = b.ifIgnoreOnTick = function (t, e, i) {\n      var n,\n          r = t.scale;return r.type === G && ((typeof i === \"undefined\" ? \"undefined\" : _typeof(i)) === ce ? (n = r.getTicks()[e], !i(n, r.getLabel(n))) : e % (i + 1));\n    },\n        S = b.getInterval = function (t, e) {\n      var i = t.get(\"interval\");return (null == i || \"auto\" == i) && (i = e), i;\n    };return b;\n  }), e(\"echarts/component/dataZoomSelect\", [ai, \"./dataZoom/typeDefaulter\", \"./dataZoom/DataZoomModel\", \"./dataZoom/DataZoomView\", \"./dataZoom/SelectZoomModel\", \"./dataZoom/SelectZoomView\", \"./dataZoom/dataZoomProcessor\", \"./dataZoom/dataZoomAction\"], function (t) {\n    t(\"./dataZoom/typeDefaulter\"), t(\"./dataZoom/DataZoomModel\"), t(\"./dataZoom/DataZoomView\"), t(\"./dataZoom/SelectZoomModel\"), t(\"./dataZoom/SelectZoomView\"), t(\"./dataZoom/dataZoomProcessor\"), t(\"./dataZoom/dataZoomAction\");\n  }), e(\"echarts/component/dataZoom/history\", [ai, ri], function (t) {\n    function e(t) {\n      var e = t[r];return e || (e = t[r] = [{}]), e;\n    }var i = t(ri),\n        n = i.each,\n        r = \"\\x00_ec_hist_store\",\n        a = { push: function push(t, i) {\n        var r = e(t);n(i, function (e, i) {\n          for (var n = r[Ae] - 1; n >= 0; n--) {\n            var a = r[n];if (a[i]) break;\n          }if (0 > n) {\n            var o = t[F]({ mainType: \"dataZoom\", subType: \"select\", id: i })[0];if (o) {\n              var s = o.getPercentRange();r[0][i] = { dataZoomId: i, start: s[0], end: s[1] };\n            }\n          }\n        }), r.push(i);\n      }, pop: function pop(t) {\n        var i = e(t),\n            r = i[i[Ae] - 1];i[Ae] > 1 && i.pop();var a = {};return n(r, function (t, e) {\n          for (var n = i[Ae] - 1; n >= 0; n--) {\n            var t = i[n][e];if (t) {\n              a[e] = t;break;\n            }\n          }\n        }), a;\n      }, clear: function clear(t) {\n        t[r] = null;\n      }, count: function count(t) {\n        return e(t)[Ae];\n      } };return a;\n  }), e(\"echarts/component/helper/brushHelper\", [ai, ri, I], function (t) {\n    function e(t) {\n      return t[0] > t[1] && t.reverse(), t;\n    }function i(t, e) {\n      for (var i = !0, n = 0; n < l[Ae]; n++) {\n        var r = l[n] + \"Index\";if (t[r] >= 0) {\n          i = !1;for (var a = 0; a < e[Ae]; a++) {\n            if (e[a][r] === t[r]) return e[a];\n          }\n        }\n      }return i;\n    }function n(t, i, n, a) {\n      var o = n.coordSys[q](t);return e(r.map([0, 1], function (t) {\n        return i ? o.coordToData(o.toLocalCoord(a[t])) : o[H](o[O](a[t]));\n      }));\n    }var r = t(ri),\n        a = t(I),\n        o = r.each,\n        s = {},\n        l = [\"geo\", \"xAxis\", \"yAxis\"],\n        u = \"--\",\n        c = [N, \"pointToData\"];s.parseOutputRanges = function (t, e, n, r) {\n      o(t, function (t, n) {\n        var a = t.panelId;if (a) {\n          a = a.split(u), t[a[0] + \"Index\"] = +a[1];var o = i(t, e);t.coordRange = h[t.brushType](1, o, t.range), r && (r[n] = o);\n        }\n      });\n    }, s.parseInputRanges = function (t) {\n      o(t.areas, function (e) {\n        var n = i(e, t.coordInfoList);e.range = e.range || [], n && n !== !0 && (e.range = h[e.brushType](0, n, e.coordRange), e.panelId = n.panelId);\n      });\n    }, s.makePanelOpts = function (t) {\n      var e = [];return o(t, function (t) {\n        var i,\n            n = t.coordSys;t.geoIndex >= 0 ? (i = n[ee]().clone(), i[_](a.getTransform(n))) : i = n.grid.getRect().clone(), e.push({ panelId: t.panelId, rect: i });\n      }), e;\n    }, s.makeCoordInfoList = function (t, e) {\n      var i = [];return o(l, function (n) {\n        var a = t[n + \"Index\"];null != a && \"none\" !== a && (\"all\" === a || r[he](a) || (a = [a]), e[Be]({ mainType: n }, function (t, e) {\n          if (!(\"all\" !== a && r[se](a, e) < 0)) {\n            var o, s;\"xAxis\" === n || \"yAxis\" === n ? o = t.axis.grid : s = t[ti];for (var l, c = 0, h = i[Ae]; h > c; c++) {\n              var f = i[c];if (\"yAxis\" === n && !f.yAxis && f.xAxis) {\n                var d = o.getCartesian(f.xAxisIndex, e);if (d) {\n                  s = d, l = f;break;\n                }\n              }\n            }!l && i.push(l = {}), l[n] = t, l[n + \"Index\"] = e, l.panelId = n + u + e, l.coordSys = s || o.getCartesian(l.xAxisIndex, l.yAxisIndex), l.coordSys ? i[n + \"Has\"] = !0 : i.pop();\n          }\n        }));\n      }), i;\n    }, s.controlSeries = function (t, e, n) {\n      var r = i(t, e.coordInfoList);return r === !0 || r && r.coordSys === n[ti];\n    };var h = { lineX: r.curry(n, \"x\"), lineY: r.curry(n, \"y\"), rect: function rect(t, i, n) {\n        var r = i.coordSys,\n            a = r[c[t]]([n[0][0], n[1][0]]),\n            o = r[c[t]]([n[0][1], n[1][1]]);return [e([a[0], o[0]]), e([a[1], o[1]])];\n      }, polygon: function polygon(t, e, i) {\n        var n = e.coordSys;return r.map(i, n[c[t]], n);\n      } };return s;\n  }), e(\"echarts/component/helper/BrushController\", [ai, \"zrender/mixin/Eventful\", ri, I, \"./interactionMutex\", \"../../data/DataDiffer\"], function (t) {\n    function e(t) {\n      F.call(this), this._zr = t, this.group = new G.Group(), this._brushType, this._brushOption, this._panels, this._track = [], this._dragging, this._covers = [], this._creatingCover, this._creatingPanel, this._enableGlobalPan, this._uid = \"brushController_\" + se++, this._handlers = {}, j(le, function (t, e) {\n        this._handlers[e] = H.bind(t, this);\n      }, this);\n    }function i(t, e) {\n      var i = t._zr;t._enableGlobalPan || Z.take(i, ne, t._uid), j(t._handlers, function (t, e) {\n        i.on(e, t);\n      }), t._brushType = e.brushType, t._brushOption = H.merge(H.clone(oe), e, !0);\n    }function n(t) {\n      var e = t._zr;Z.release(e, ne, t._uid), j(t._handlers, function (t, i) {\n        e.off(i, t);\n      }), t._brushType = t._brushOption = null;\n    }function r(t, e) {\n      var i = ue[e.brushType].createCover(t, e);return s(i), i.__brushOption = e, t.group.add(i), i;\n    }function a(t, e) {\n      var i = u(e);return i.endCreating && (i.endCreating(t, e), s(e)), e;\n    }function o(t, e) {\n      var i = e.__brushOption;u(e).updateCoverShape(t, e, i.range, i);\n    }function s(t) {\n      t[ve](function (t) {\n        t.z = J, t.z2 = J;\n      });\n    }function l(t, e) {\n      u(e).updateCommon(t, e), o(t, e);\n    }function u(t) {\n      return ue[t.__brushOption.brushType];\n    }function c(t, e, i) {\n      var n = t._panels;if (!n) return !0;var r;return j(n, function (t) {\n        t[$](e, i) && (r = t);\n      }), r;\n    }function h(t, e) {\n      var i = t._panels;if (!i) return !0;var n = e.__brushOption.panelId;return null != n ? i[n] : !0;\n    }function f(t) {\n      var e = t._covers,\n          i = e[Ae];return j(e, function (e) {\n        t.group[Le](e);\n      }, t), e[Ae] = 0, !!i;\n    }function d(t, e) {\n      var i = U(t._covers, function (t) {\n        var e = t.__brushOption,\n            i = H.clone(e.range);return { brushType: e.brushType, panelId: e.panelId, range: i };\n      });t[Te](\"brush\", i, { isEnd: !!e.isEnd, removeOnClick: !!e.removeOnClick });\n    }function p(t) {\n      var e = t._track;if (!e[Ae]) return !1;var i = e[e[Ae] - 1],\n          n = e[0],\n          r = i[0] - n[0],\n          a = i[1] - n[1],\n          o = Q(r * r + a * a, .5);return o > te;\n    }function m(t) {\n      var e = t[Ae] - 1;return 0 > e && (e = 0), [t[0], t[e]];\n    }function g(t, e, i, n) {\n      var r = new G.Group();return r.add(new G.Rect({ name: \"main\", style: w(i), silent: !0, draggable: !0, cursor: \"move\", drift: W(t, e, r, \"nswe\"), ondragend: W(d, e, { isEnd: !0 }) })), j(n, function (i) {\n        r.add(new G.Rect({ name: i, style: { opacity: 0 }, draggable: !0, silent: !0, invisible: !0, drift: W(t, e, r, i), ondragend: W(d, e, { isEnd: !0 }) }));\n      }), r;\n    }function y(t, e, i, n) {\n      var r = n.brushStyle[x] || 0,\n          a = Y(r, ie),\n          o = i[0][0],\n          s = i[1][0],\n          l = o - r / 2,\n          u = s - r / 2,\n          c = i[0][1],\n          h = i[1][1],\n          f = c - a + r / 2,\n          d = h - a + r / 2,\n          p = c - o,\n          v = h - s,\n          m = p + r,\n          g = v + r;b(t, e, \"main\", o, s, p, v), n.transformable && (b(t, e, \"w\", l, u, a, g), b(t, e, \"e\", f, u, a, g), b(t, e, \"n\", l, u, m, a), b(t, e, \"s\", l, d, m, a), b(t, e, \"nw\", l, u, a, a), b(t, e, \"ne\", f, u, a, a), b(t, e, \"sw\", l, d, a, a), b(t, e, \"se\", f, d, a, a));\n    }function _(t, e) {\n      var i = e.__brushOption,\n          n = i.transformable,\n          r = e.childAt(0);r.useStyle(w(i)), r.attr({ silent: !n, cursor: n ? \"move\" : \"default\" }), j([\"w\", \"e\", \"n\", \"s\", \"se\", \"sw\", \"ne\", \"nw\"], function (i) {\n        var r = e.childOfName(i),\n            a = A(t, i);r && r.attr({ silent: !n, invisible: !n, cursor: n ? ae[a] + \"-resize\" : null });\n      });\n    }function b(t, e, i, n, r, a, o) {\n      var s = e.childOfName(i);s && s[M](z(D(t, e, [[n, r], [n + a, r + o]])));\n    }function w(t) {\n      return H[Je]({ strokeNoScale: !0 }, t.brushStyle);\n    }function S(t, e, i, n) {\n      var r = [X(t, i), X(e, n)],\n          a = [Y(t, i), Y(e, n)];return [[r[0], a[0]], [r[1], a[1]]];\n    }function T(t) {\n      return G.getTransform(t.group);\n    }function A(t, e) {\n      if (e[Ae] > 1) {\n        e = e.split(\"\");var i = [A(t, e[0]), A(t, e[1])];return (\"e\" === i[0] || \"w\" === i[0]) && i.reverse(), i.join(\"\");\n      }var n = { w: \"left\", e: \"right\", n: \"top\", s: \"bottom\" },\n          r = { left: \"w\", right: \"e\", top: \"n\", bottom: \"s\" },\n          i = G.transformDirection(n[e], T(t));return r[i];\n    }function C(t, e, i, n, r, a, o) {\n      var s = n.__brushOption,\n          u = t(s.range),\n          c = P(i, a, o);j(r.split(\"\"), function (t) {\n        var e = re[t];u[e[0]][e[1]] += c[e[0]];\n      }), s.range = e(S(u[0][0], u[1][0], u[0][1], u[1][1])), l(i, n), d(i, { isEnd: !1 });\n    }function L(t, e, i, n) {\n      var r = e.__brushOption.range,\n          a = P(t, i, n);j(r, function (t) {\n        t[0] += a[0], t[1] += a[1];\n      }), l(t, e), d(t, { isEnd: !1 });\n    }function P(t, e, i) {\n      var n = t.group,\n          r = n.transformCoordToLocal(e, i),\n          a = n.transformCoordToLocal(0, 0);return [r[0] - a[0], r[1] - a[1]];\n    }function D(t, e, i) {\n      var n = h(t, e);if (n === !0) return H.clone(i);var r = n[ee]();return H.map(i, function (t) {\n        var e = t[0];e = Y(e, r.x), e = X(e, r.x + r.width);var i = t[1];return i = Y(i, r.y), i = X(i, r.y + r[Re]), [e, i];\n      });\n    }function z(t) {\n      var e = X(t[0][0], t[1][0]),\n          i = X(t[0][1], t[1][1]),\n          n = Y(t[0][0], t[1][0]),\n          r = Y(t[0][1], t[1][1]);return { x: e, y: i, width: n - e, height: r - i };\n    }function O(t, e) {\n      var i = e.offsetX,\n          n = e.offsetY,\n          r = t._zr;if (t._brushType) {\n        for (var a, o = t._panels, s = t._covers, l = 0; l < s[Ae]; l++) {\n          if (ue[s[l].__brushOption.brushType][$](s[l], i, n)) {\n            a = !0;break;\n          }\n        }a || (o ? j(o, function (t) {\n          t[$](i, n) && r.setCursorStyle(\"crosshair\");\n        }) : r.setCursorStyle(\"crosshair\"));\n      }\n    }function R(t) {\n      var e = t.event;e.preventDefault && e.preventDefault();\n    }function E(t, e, i) {\n      return t.childOfName(\"main\")[$](e, i);\n    }function N(t, e, i) {\n      var n,\n          s = e.offsetX,\n          l = e.offsetY,\n          u = t._creatingCover,\n          h = t._creatingPanel,\n          d = t._brushOption;if (t._track.push(t.group.transformCoordToLocal(s, l)), p(t) || u) {\n        if (h && !u) {\n          \"single\" === d.brushMode && f(t);var v = H.clone(d);v.panelId = h === !0 ? null : h.__brushPanelId, u = t._creatingCover = r(t, v), t._covers.push(u);\n        }if (u) {\n          var m = ue[t._brushType],\n              g = u.__brushOption;g.range = m.getCreatingRange(D(t, u, t._track)), i && (a(t, u), m.updateCommon(t, u)), o(t, u), n = { isEnd: i };\n        }\n      } else i && \"single\" === d.brushMode && d.removeOnClick && c(t, s, l) && f(t) && (n = { isEnd: i, removeOnClick: !0 });return n;\n    }function B(t) {\n      if (this._dragging) {\n        R(t);var e = N(this, t, !0);this._dragging = !1, this._track = [], this._creatingCover = null, e && d(this, e);\n      }\n    }function V(t) {\n      return { createCover: function createCover(e, i) {\n          return g(W(C, function (e) {\n            var i = [e, [0, 100]];return t && i.reverse(), i;\n          }, function (e) {\n            return e[t];\n          }), e, i, [[\"w\", \"e\"], [\"n\", \"s\"]][t]);\n        }, getCreatingRange: function getCreatingRange(e) {\n          var i = m(e),\n              n = X(i[0][t], i[1][t]),\n              r = Y(i[0][t], i[1][t]);return [n, r];\n        }, updateCoverShape: function updateCoverShape(e, i, n, r) {\n          var a,\n              o = r.brushStyle.width;if (null == o) {\n            var s = h(e, i),\n                l = 0;if (s !== !0) {\n              var u = s[ee]();o = t ? u.width : u[Re], l = t ? u.x : u.y;\n            }a = [l, l + (o || 0)];\n          } else a = [-o / 2, o / 2];var c = [n, a];t && c.reverse(), y(e, i, c, r);\n        }, updateCommon: _, contain: E };\n    }var F = t(\"zrender/mixin/Eventful\"),\n        H = t(ri),\n        G = t(I),\n        Z = t(\"./interactionMutex\"),\n        q = t(\"../../data/DataDiffer\"),\n        W = H.curry,\n        j = H.each,\n        U = H.map,\n        X = Math.min,\n        Y = Math.max,\n        Q = Math.pow,\n        J = 1e4,\n        te = 6,\n        ie = 6,\n        ne = \"globalPan\",\n        re = { w: [0, 0], e: [0, 1], n: [1, 0], s: [1, 1] },\n        ae = { w: \"ew\", e: \"ew\", n: \"ns\", s: \"ns\", ne: \"nesw\", sw: \"nesw\", nw: \"nwse\", se: \"nwse\" },\n        oe = { brushStyle: { lineWidth: 2, stroke: \"rgba(0,0,0,0.3)\", fill: \"rgba(0,0,0,0.1)\" }, transformable: !0, brushMode: \"single\", removeOnClick: !1 },\n        se = 0;e[Ue] = { constructor: e, enableBrush: function enableBrush(t) {\n        return this._brushType && n(this), t.brushType && i(this, t), this;\n      }, setPanels: function setPanels(t) {\n        var e = this._panels || {},\n            i = this._panels = t && t[Ae] && {},\n            n = this.group;return i && j(t, function (t) {\n          var r = t.panelId,\n              a = e[r];a || (a = new G.Rect({ silent: !0, invisible: !0 }), n.add(a)), a.attr(\"shape\", t.rect), a.__brushPanelId = r, i[r] = a, e[r] = null;\n        }), j(e, function (t) {\n          t && n[Le](t);\n        }), this;\n      }, mount: function mount(t) {\n        t = t || {}, this._enableGlobalPan = t.enableGlobalPan;var e = this.group;return this._zr.add(e), e.attr({ position: t[K] || [0, 0], rotation: t[v] || 0, scale: t.scale || [1, 1] }), this;\n      }, eachCover: function eachCover(t, e) {\n        j(this._covers, t, e);\n      }, updateCovers: function updateCovers(t) {\n        function e(t, e) {\n          return (null != t.id ? t.id : s + e) + \"-\" + t.brushType;\n        }function i(t, i) {\n          return e(t.__brushOption, i);\n        }function n(e, i) {\n          var n = t[e];if (null != i && u[i] === f) c[e] = u[i];else {\n            var o = c[e] = null != i ? (u[i].__brushOption = n, u[i]) : a(h, r(h, n));l(h, o);\n          }\n        }function o(t) {\n          u[t] !== f && h.group[Le](u[t]);\n        }t = H.map(t, function (t) {\n          return H.merge(H.clone(oe), t, !0);\n        });var s = \"\\x00-brush-index-\",\n            u = this._covers,\n            c = this._covers = [],\n            h = this,\n            f = this._creatingCover;return new q(u, t, i, e).add(n)[Ie](n)[Le](o)[k](), this;\n      }, unmount: function unmount() {\n        return this.enableBrush(!1), f(this), this._zr[Le](this.group), this;\n      }, dispose: function dispose() {\n        this.unmount(), this.off();\n      } }, H.mixin(e, F);var le = { mousedown: function mousedown(t) {\n        if (this._dragging) B.call(this, t);else if (!t[xe] || !t[xe].draggable) {\n          R(t);var e = t.offsetX,\n              i = t.offsetY;this._creatingCover = null;var n = this._creatingPanel = c(this, e, i);n && (this._dragging = !0, this._track = [this.group.transformCoordToLocal(e, i)]);\n        }\n      }, mousemove: function mousemove(t) {\n        if (O(this, t), this._dragging) {\n          R(t);var e = N(this, t, !1);e && d(this, e);\n        }\n      }, mouseup: B },\n        ue = { lineX: V(0), lineY: V(1), rect: { createCover: function createCover(t, e) {\n          return g(W(C, function (t) {\n            return t;\n          }, function (t) {\n            return t;\n          }), t, e, [\"w\", \"e\", \"n\", \"s\", \"se\", \"sw\", \"ne\", \"nw\"]);\n        }, getCreatingRange: function getCreatingRange(t) {\n          var e = m(t);return S(e[1][0], e[1][1], e[0][0], e[0][1]);\n        }, updateCoverShape: function updateCoverShape(t, e, i, n) {\n          y(t, e, i, n);\n        }, updateCommon: _, contain: E }, polygon: { createCover: function createCover(t, e) {\n          var i = new G.Group();return i.add(new G.Polyline({ name: \"main\", style: w(e), silent: !0 })), i;\n        }, getCreatingRange: function getCreatingRange(t) {\n          return t;\n        }, endCreating: function endCreating(t, e) {\n          e[Le](e.childAt(0)), e.add(new G.Polygon({ name: \"main\", draggable: !0, drift: W(L, t, e), ondragend: W(d, t, { isEnd: !0 }) }));\n        }, updateCoverShape: function updateCoverShape(t, e, i) {\n          e.childAt(0)[M]({ points: D(t, e, i) });\n        }, updateCommon: _, contain: E } };return e;\n  }), e(\"echarts/chart/helper/Line\", [ai, \"../../util/symbol\", Ye, \"./LinePath\", I, ri, u], function (t) {\n    function e(t) {\n      return \"_\" + t + \"Type\";\n    }function n(t, e, i) {\n      var n = e[S](i, \"color\"),\n          r = e[S](i, t),\n          a = e[S](i, t + \"Size\");if (r && \"none\" !== r) {\n        x[he](a) || (a = [a, a]);var o = f.createSymbol(r, -a[0] / 2, -a[1] / 2, a[0], a[1], n);return o.name = t, o;\n      }\n    }function r(t) {\n      var e = new p({ name: \"line\" });return a(e.shape, t), e;\n    }function a(t, e) {\n      var i = e[0],\n          n = e[1],\n          r = e[2];t.x1 = i[0], t.y1 = i[1], t.x2 = n[0], t.y2 = n[1], t.percent = 1, r ? (t.cpx1 = r[0], t.cpy1 = r[1]) : (t.cpx1 = 0 / 0, t.cpy1 = 0 / 0);\n    }function s() {\n      var t = this,\n          e = t.childOfName(\"fromSymbol\"),\n          n = t.childOfName(\"toSymbol\"),\n          r = t.childOfName(\"label\");if (e || n || !r[Ne]) {\n        for (var a = 1, o = this[m]; o;) {\n          o.scale && (a /= o.scale[0]), o = o[m];\n        }var s = t.childOfName(\"line\");if (this[i] || s[i]) {\n          var l = s.shape.percent,\n              u = s.pointAt(0),\n              c = s.pointAt(l),\n              h = d.sub([], c, u);if (d[Y](h, h), e) {\n            e.attr(K, u);var f = s.tangentAt(0);e.attr(v, Math.PI / 2 - Math.atan2(f[1], f[0])), e.attr(\"scale\", [a * l, a * l]);\n          }if (n) {\n            n.attr(K, c);var f = s.tangentAt(1);n.attr(v, -Math.PI / 2 - Math.atan2(f[1], f[0])), n.attr(\"scale\", [a * l, a * l]);\n          }if (!r[Ne]) {\n            r.attr(K, c);var p,\n                g,\n                y,\n                x = 5 * a;if (\"end\" === r.__position) p = [h[0] * x + c[0], h[1] * x + c[1]], g = h[0] > .8 ? \"left\" : h[0] < -.8 ? \"right\" : J, y = h[1] > .8 ? \"top\" : h[1] < -.8 ? Ee : te;else if (r.__position === te) {\n              var _ = l / 2,\n                  f = s.tangentAt(_),\n                  b = [f[1], -f[0]],\n                  w = s.pointAt(_);b[1] > 0 && (b[0] = -b[0], b[1] = -b[1]), p = [w[0] + b[0] * x, w[1] + b[1] * x], g = J, y = Ee;var M = -Math.atan2(f[1], f[0]);c[0] < u[0] && (M = Math.PI + M), r.attr(v, M);\n            } else p = [-h[0] * x + u[0], -h[1] * x + u[1]], g = h[0] > .8 ? \"right\" : h[0] < -.8 ? \"left\" : J, y = h[1] > .8 ? Ee : h[1] < -.8 ? \"top\" : te;r.attr({ style: { textVerticalAlign: r.__verticalAlign || y, textAlign: r.__textAlign || g }, position: p, scale: [a, a] });\n          }\n        }\n      }\n    }function l(t, e, i) {\n      y.Group.call(this), this._createLine(t, e, i);\n    }var f = t(\"../../util/symbol\"),\n        d = t(Ye),\n        p = t(\"./LinePath\"),\n        y = t(I),\n        x = t(ri),\n        _ = t(u),\n        M = [\"fromSymbol\", \"toSymbol\"],\n        T = l[Ue];return T.beforeUpdate = s, T._createLine = function (t, i, a) {\n      var o = t.hostModel,\n          s = t[P](i),\n          l = r(s);l.shape.percent = 0, y.initProps(l, { shape: { percent: 1 } }, o, i), this.add(l);var u = new y.Text({ name: \"label\" });this.add(u), x.each(M, function (r) {\n        var a = n(r, t, i);this.add(a), this[e(r)] = t[S](i, r);\n      }, this), this._updateCommonStl(t, i, a);\n    }, T[c] = function (t, i, r) {\n      var o = t.hostModel,\n          s = this.childOfName(\"line\"),\n          l = t[P](i),\n          u = { shape: {} };a(u.shape, l), y.updateProps(s, u, o, i), x.each(M, function (r) {\n        var a = t[S](i, r),\n            o = e(r);if (this[o] !== a) {\n          this[Le](this.childOfName(r));var s = n(r, t, i);this.add(s);\n        }this[o] = a;\n      }, this), this._updateCommonStl(t, i, r);\n    }, T._updateCommonStl = function (t, e, i) {\n      var n = t.hostModel,\n          r = this.childOfName(\"line\"),\n          a = i && i.lineStyle,\n          s = i && i.hoverLineStyle,\n          l = i && i.labelModel,\n          u = i && i.hoverLabelModel;if (!i || t[o]) {\n        var c = t[L](e);a = c[Ze](\"lineStyle.normal\").getLineStyle(), s = c[Ze](\"lineStyle.emphasis\").getLineStyle(), l = c[Ze](\"label.normal\"), u = c[Ze](\"label.emphasis\");\n      }var f = t[S](e, \"color\"),\n          d = x[V](t[S](e, Q), a[Q], 1);isNaN(p) && (p = t[h](e)), r.useStyle(x[Je]({ strokeNoScale: !0, fill: \"none\", stroke: f, opacity: d }, a)), r.hoverStyle = s, x.each(M, function (t) {\n        var e = this.childOfName(t);e && (e.setColor(f), e[pe]({ opacity: d }));\n      }, this);var p,\n          v,\n          m = l[g](\"show\"),\n          T = u[g](\"show\"),\n          A = this.childOfName(\"label\");if ((m || T) && (p = _.round(n[w](e)), v = f || \"#000\"), m) {\n        var C = l[Ze](ae);A[pe]({ text: x[V](n.getFormattedLabel(e, D, t.dataType), p), textFont: C[ne](), fill: C[ie]() || v }), A.__textAlign = C.get(\"align\"), A.__verticalAlign = C.get(\"baseline\"), A.__position = l.get(K);\n      } else A[pe](\"text\", \"\");if (T) {\n        var k = u[Ze](ae);A.hoverStyle = { text: x[V](n.getFormattedLabel(e, b, t.dataType), p), textFont: k[ne](), fill: k[ie]() || v };\n      } else A.hoverStyle = { text: \"\" };A[Ne] = !m && !T, y.setHoverStyle(this);\n    }, T[De] = function (t, e) {\n      this.setLinePoints(t[P](e));\n    }, T.setLinePoints = function (t) {\n      var e = this.childOfName(\"line\");a(e.shape, t), e.dirty();\n    }, x[oe](l, y.Group), l;\n  }), e(\"echarts/component/helper/interactionMutex\", [ai, z], function (t) {\n    function e(t) {\n      return t[i] || (t[i] = {});\n    }var i = \"\\x00_ec_interaction_mutex\",\n        n = { take: function take(t, i, n) {\n        var r = e(t);r[i] = n;\n      }, release: function release(t, i, n) {\n        var r = e(t),\n            a = r[i];a === n && (r[i] = null);\n      }, isTaken: function isTaken(t, i) {\n        return !!e(t)[i];\n      } };return t(z).registerAction({ type: \"takeGlobalCursor\", event: \"globalCursorTaken\", update: \"update\" }, function () {}), n;\n  }), e(\"echarts/chart/helper/LinePath\", [ai, I, Ye], function (t) {\n    function e(t) {\n      return isNaN(+t.cpx1) || isNaN(+t.cpy1);\n    }var i = t(I),\n        r = t(Ye),\n        a = i.Line[Ue],\n        o = i.BezierCurve[Ue];return i.extendShape({ type: \"ec-line\", style: { stroke: \"#000\", fill: null }, shape: { x1: 0, y1: 0, x2: 0, y2: 0, percent: 1, cpx1: null, cpy1: null }, buildPath: function buildPath(t, i) {\n        (e(i) ? a : o)[n](t, i);\n      }, pointAt: function pointAt(t) {\n        return e(this.shape) ? a.pointAt.call(this, t) : o.pointAt.call(this, t);\n      }, tangentAt: function tangentAt(t) {\n        var i = this.shape,\n            n = e(i) ? [i.x2 - i.x1, i.y2 - i.y1] : o.tangentAt.call(this, t);return r[Y](n, n);\n      } });\n  }), e(\"echarts/component/dataZoom/typeDefaulter\", [ai, \"../../model/Component\"], function (t) {\n    t(\"../../model/Component\").registerSubTypeDefaulter(\"dataZoom\", function () {\n      return \"slider\";\n    });\n  }), e(\"echarts/component/dataZoom/SelectZoomModel\", [ai, \"./DataZoomModel\"], function (t) {\n    var e = t(\"./DataZoomModel\");return e[ke]({ type: \"dataZoom.select\" });\n  }), e(\"echarts/component/dataZoom/DataZoomView\", [ai, \"../../view/Component\"], function (t) {\n    var e = t(\"../../view/Component\");return e[ke]({ type: \"dataZoom\", render: function render(t, e, i) {\n        this.dataZoomModel = t, this[s] = e, this.api = i;\n      }, getTargetInfo: function getTargetInfo() {\n        function t(t, e, i, n) {\n          for (var r, a = 0; a < i[Ae]; a++) {\n            if (i[a].model === t) {\n              r = i[a];break;\n            }\n          }r || i.push(r = { model: t, axisModels: [], coordIndex: n }), r.axisModels.push(e);\n        }var e = this.dataZoomModel,\n            i = this[s],\n            n = [],\n            r = [],\n            a = [];return e.eachTargetAxis(function (e, o) {\n          var s = i.getComponent(e.axis, o);if (s) {\n            a.push(s);var l;l = \"xAxis\" === e.axis || \"yAxis\" === e.axis ? \"grid\" : \"polar\";var u = i[F]({ mainType: l, index: s.get(l + \"Index\"), id: s.get(l + \"Id\") })[0];null != u && t(u, s, \"grid\" === l ? n : r, u[Z]);\n          }\n        }, this), { cartesians: n, polars: r, axisModels: a };\n      } });\n  }), e(\"echarts/component/dataZoom/SelectZoomView\", [ai, \"./DataZoomView\"], function (t) {\n    return t(\"./DataZoomView\")[ke]({ type: \"dataZoom.select\" });\n  }), e(\"echarts/component/dataZoom/dataZoomProcessor\", [ai, z], function (t) {\n    function e(t, e, i) {\n      i.getAxisProxy(t.name, e).reset(i);\n    }function i(t, e, i) {\n      i.getAxisProxy(t.name, e).filterData(i);\n    }var n = t(z);n.registerProcessor(function (t) {\n      t[Be](\"dataZoom\", function (t) {\n        t.eachTargetAxis(e), t.eachTargetAxis(i);\n      }), t[Be](\"dataZoom\", function (t) {\n        var e = t.findRepresentativeAxisProxy(),\n            i = e.getDataPercentWindow(),\n            n = e.getDataValueWindow();t.setRawRange({ start: i[0], end: i[1], startValue: n[0], endValue: n[1] });\n      });\n    });\n  }), e(\"echarts/component/dataZoom/DataZoomModel\", [ai, ri, Qe, z, \"../../util/model\", \"./helper\", \"./AxisProxy\"], function (t) {\n    function e(t) {\n      var e = {};return c([\"start\", \"end\", \"startValue\", \"endValue\", \"throttle\"], function (i) {\n        t.hasOwnProperty(i) && (e[i] = t[i]);\n      }), e;\n    }function i(t, e, i, n) {\n      null != i[e] && null == i[t] && (n[t] = null);\n    }var n = t(ri),\n        r = t(Qe),\n        a = t(z),\n        o = t(\"../../util/model\"),\n        l = t(\"./helper\"),\n        u = t(\"./AxisProxy\"),\n        c = n.each,\n        h = l.eachAxisDim,\n        f = a.extendComponentModel({ type: \"dataZoom\", dependencies: [\"xAxis\", \"yAxis\", \"zAxis\", \"radiusAxis\", \"angleAxis\", Se], defaultOption: { zlevel: 0, z: 4, orient: null, xAxisIndex: null, yAxisIndex: null, filterMode: \"filter\", throttle: null, start: 0, end: 100, startValue: null, endValue: null }, init: function init(t, i, n) {\n        this._dataIntervalByAxis = {}, this._dataInfo = {}, this._axisProxies = {}, this.textStyleModel, this._autoThrottle = !0;var r = e(t);this.mergeDefaultAndTheme(t, n), this.doInit(r);\n      }, mergeOption: function mergeOption(t) {\n        var i = e(t);n.merge(this[d], t, !0), this.doInit(i);\n      }, doInit: function doInit(t) {\n        var e = this[d];r[Fe] || (e.realtime = !1), this._setDefaultThrottle(t), i(\"start\", \"startValue\", t, e), i(\"end\", \"endValue\", t, e), this.textStyleModel = this[Ze](ae), this._resetTarget(), this._giveAxisProxies();\n      }, _giveAxisProxies: function _giveAxisProxies() {\n        var t = this._axisProxies;this.eachTargetAxis(function (e, i, n, r) {\n          var a = this.dependentModels[e.axis][i],\n              o = a.__dzAxisProxy || (a.__dzAxisProxy = new u(e.name, i, this, r));t[e.name + \"_\" + i] = o;\n        }, this);\n      }, _resetTarget: function _resetTarget() {\n        var t = this[d],\n            e = this._judgeAutoMode();h(function (e) {\n          var i = e.axisIndex;t[i] = o.normalizeToArray(t[i]);\n        }, this), \"axisIndex\" === e ? this._autoSetAxisIndex() : \"orient\" === e && this._autoSetOrient();\n      }, _judgeAutoMode: function _judgeAutoMode() {\n        var t = this[d],\n            e = !1;h(function (i) {\n          null != t[i.axisIndex] && (e = !0);\n        }, this);var i = t.orient;return null == i && e ? \"orient\" : e ? void 0 : (null == i && (t.orient = \"horizontal\"), \"axisIndex\");\n      }, _autoSetAxisIndex: function _autoSetAxisIndex() {\n        var t = !0,\n            e = this.get(\"orient\", !0),\n            i = this[d];if (t) {\n          var r = \"vertical\" === e ? { dim: \"y\", axisIndex: \"yAxisIndex\", axis: \"yAxis\" } : { dim: \"x\", axisIndex: \"xAxisIndex\", axis: \"xAxis\" };this.dependentModels[r.axis][Ae] && (i[r.axisIndex] = [0], t = !1);\n        }t && h(function (e) {\n          if (t) {\n            var n = [],\n                r = this.dependentModels[e.axis];if (r[Ae] && !n[Ae]) for (var a = 0, o = r[Ae]; o > a; a++) {\n              r[a].get(\"type\") === W && n.push(a);\n            }i[e.axisIndex] = n, n[Ae] && (t = !1);\n          }\n        }, this), t && this[s][ze](function (t) {\n          this._isSeriesHasAllAxesTypeOf(t, \"value\") && h(function (e) {\n            var r = i[e.axisIndex],\n                a = t.get(e.axisIndex),\n                o = t.get(e.axisId),\n                l = t[s][F]({ mainType: e.axis, index: a, id: o })[0];a = l[Z], n[se](r, a) < 0 && r.push(a);\n          });\n        }, this);\n      }, _autoSetOrient: function _autoSetOrient() {\n        var t;this.eachTargetAxis(function (e) {\n          !t && (t = e.name);\n        }, this), this[d].orient = \"y\" === t ? \"vertical\" : \"horizontal\";\n      }, _isSeriesHasAllAxesTypeOf: function _isSeriesHasAllAxesTypeOf(t, e) {\n        var i = !0;return h(function (n) {\n          var r = t.get(n.axisIndex),\n              a = this.dependentModels[n.axis][r];a && a.get(\"type\") === e || (i = !1);\n        }, this), i;\n      }, _setDefaultThrottle: function _setDefaultThrottle(t) {\n        if (t.hasOwnProperty(\"throttle\") && (this._autoThrottle = !1), this._autoThrottle) {\n          var e = this[s][d];this[d].throttle = e[qe] && e.animationDurationUpdate > 0 ? 100 : 20;\n        }\n      }, getFirstTargetAxisModel: function getFirstTargetAxisModel() {\n        var t;return h(function (e) {\n          if (null == t) {\n            var i = this.get(e.axisIndex);i[Ae] && (t = this.dependentModels[e.axis][i[0]]);\n          }\n        }, this), t;\n      }, eachTargetAxis: function eachTargetAxis(t, e) {\n        var i = this[s];h(function (n) {\n          c(this.get(n.axisIndex), function (r) {\n            t.call(e, n, r, this, i);\n          }, this);\n        }, this);\n      }, getAxisProxy: function getAxisProxy(t, e) {\n        return this._axisProxies[t + \"_\" + e];\n      }, setRawRange: function setRawRange(t) {\n        c([\"start\", \"end\", \"startValue\", \"endValue\"], function (e) {\n          this[d][e] = t[e];\n        }, this);\n      }, getPercentRange: function getPercentRange() {\n        var t = this.findRepresentativeAxisProxy();return t ? t.getDataPercentWindow() : void 0;\n      }, getValueRange: function getValueRange(t, e) {\n        if (null != t || null != e) return this.getAxisProxy(t, e).getDataValueWindow();var i = this.findRepresentativeAxisProxy();return i ? i.getDataValueWindow() : void 0;\n      }, findRepresentativeAxisProxy: function findRepresentativeAxisProxy() {\n        var t = this._axisProxies;for (var e in t) {\n          if (t.hasOwnProperty(e) && t[e].hostedBy(this)) return t[e];\n        }for (var e in t) {\n          if (t.hasOwnProperty(e) && !t[e].hostedBy(this)) return t[e];\n        }\n      } });return f;\n  }), e(\"echarts/component/dataZoom/dataZoomAction\", [ai, ri, \"./helper\", z], function (t) {\n    var e = t(ri),\n        i = t(\"./helper\"),\n        n = t(z);n.registerAction(\"dataZoom\", function (t, n) {\n      var r = i.createLinkedNodesFinder(e.bind(n[Be], n, \"dataZoom\"), i.eachAxisDim, function (t, e) {\n        return t.get(e.axisIndex);\n      }),\n          a = [];n[Be]({ mainType: \"dataZoom\", query: t }, function (t) {\n        a.push.apply(a, r(t).nodes);\n      }), e.each(a, function (e) {\n        e.setRawRange({ start: t.start, end: t.end, startValue: t.startValue, endValue: t.endValue });\n      });\n    });\n  }), e(\"echarts/component/dataZoom/helper\", [ai, \"../../util/format\", ri], function (t) {\n    var e = t(\"../../util/format\"),\n        i = t(ri),\n        n = {},\n        r = [\"x\", \"y\", \"z\", \"radius\", \"angle\"];return n.createNameEach = function (t, n) {\n      t = t.slice();var r = i.map(t, e.capitalFirst);n = (n || []).slice();var a = i.map(n, e.capitalFirst);return function (e, o) {\n        i.each(t, function (t, i) {\n          for (var s = { name: t, capital: r[i] }, l = 0; l < n[Ae]; l++) {\n            s[n[l]] = t + a[l];\n          }e.call(o, s);\n        });\n      };\n    }, n.eachAxisDim = n.createNameEach(r, [\"axisIndex\", \"axis\", \"index\", \"id\"]), n.createLinkedNodesFinder = function (t, e, n) {\n      function r(t, e) {\n        return i[se](e.nodes, t) >= 0;\n      }function a(t, r) {\n        var a = !1;return e(function (e) {\n          i.each(n(t, e) || [], function (t) {\n            r.records[e.name][t] && (a = !0);\n          });\n        }), a;\n      }function o(t, r) {\n        r.nodes.push(t), e(function (e) {\n          i.each(n(t, e) || [], function (t) {\n            r.records[e.name][t] = !0;\n          });\n        });\n      }return function (i) {\n        function n(t) {\n          !r(t, s) && a(t, s) && (o(t, s), l = !0);\n        }var s = { nodes: [], records: {} };if (e(function (t) {\n          s.records[t.name] = {};\n        }), !i) return s;o(i, s);var l;do {\n          l = !1, t(n);\n        } while (l);return s;\n      };\n    }, n;\n  }), e(\"echarts/component/dataZoom/AxisProxy\", [ai, ri, u], function (t) {\n    function e(t, e) {\n      var i = [1 / 0, -1 / 0];return l(e, function (e) {\n        var n = e[ni]();n && l(e.coordDimToDataDim(t), function (t) {\n          var e = n.getDataExtent(t);e[0] < i[0] && (i[0] = e[0]), e[1] > i[1] && (i[1] = e[1]);\n        });\n      }, this), i;\n    }function i(t, e, i) {\n      var r = i.getAxisModel(),\n          a = r.axis.scale,\n          s = [0, 100],\n          u = [t.start, t.end],\n          h = [];return e = e.slice(), n(e, r, a), l([\"startValue\", \"endValue\"], function (e) {\n        h.push(null != t[e] ? a.parse(t[e]) : null);\n      }), l([0, 1], function (t) {\n        var i = h[t],\n            n = u[t];null != n || null == i ? (null == n && (n = s[t]), i = a.parse(o.linearMap(n, s, e, !0))) : n = o.linearMap(i, e, s, !0), h[t] = i, u[t] = n;\n      }), { valueWindow: c(h), percentWindow: c(u) };\n    }function n(t, e, i) {\n      return l([\"min\", \"max\"], function (n, r) {\n        var a = e.get(n, !0);null != a && (a + \"\")[Xe]() !== \"data\" + n && (t[r] = i.parse(a));\n      }), e.get(\"scale\", !0) || (t[0] > 0 && (t[0] = 0), t[1] < 0 && (t[1] = 0)), t;\n    }function r(t, e) {\n      var i = t.getAxisModel(),\n          n = t._percentWindow,\n          r = t._valueWindow;if (n) {\n        var a = e || 0 === n[0] && 100 === n[1],\n            s = !e && o.getPixelPrecision(r, [0, 500]),\n            l = !(e || 20 > s && s >= 0),\n            u = e || a || l;i.setRange && i.setRange(u ? null : +r[0][f](s), u ? null : +r[1][f](s));\n      }\n    }var a = t(ri),\n        o = t(u),\n        l = a.each,\n        c = o.asc,\n        h = function h(t, e, i, n) {\n      this._dimName = t, this._axisIndex = e, this._valueWindow, this._percentWindow, this._dataExtent, this[s] = n, this._dataZoomModel = i;\n    };return h[Ue] = { constructor: h, hostedBy: function hostedBy(t) {\n        return this._dataZoomModel === t;\n      }, getDataExtent: function getDataExtent() {\n        return this._dataExtent.slice();\n      }, getDataValueWindow: function getDataValueWindow() {\n        return this._valueWindow.slice();\n      }, getDataPercentWindow: function getDataPercentWindow() {\n        return this._percentWindow.slice();\n      }, getTargetSeriesModels: function getTargetSeriesModels() {\n        var t = [],\n            e = this[s];return e[ze](function (i) {\n          var n = this._dimName,\n              r = e[F]({ mainType: n + \"Axis\", index: i.get(n + \"AxisIndex\"), id: i.get(n + \"AxisId\") })[0];\n          this._axisIndex === (r && r[Z]) && t.push(i);\n        }, this), t;\n      }, getAxisModel: function getAxisModel() {\n        return this[s].getComponent(this._dimName + \"Axis\", this._axisIndex);\n      }, getOtherAxisModel: function getOtherAxisModel() {\n        var t,\n            e,\n            i = this._dimName,\n            n = this[s],\n            r = this.getAxisModel(),\n            a = \"x\" === i || \"y\" === i;a ? (e = \"gridIndex\", t = \"x\" === i ? \"y\" : \"x\") : (e = \"polarIndex\", t = \"angle\" === i ? \"radius\" : \"angle\");var o;return n[Be](t + \"Axis\", function (t) {\n          (t.get(e) || 0) === (r.get(e) || 0) && (o = t);\n        }), o;\n      }, reset: function reset(t) {\n        if (t === this._dataZoomModel) {\n          var n = this._dataExtent = e(this._dimName, this.getTargetSeriesModels()),\n              a = i(t[d], n, this);this._valueWindow = a.valueWindow, this._percentWindow = a.percentWindow, r(this);\n        }\n      }, restore: function restore(t) {\n        t === this._dataZoomModel && (this._valueWindow = this._percentWindow = null, r(this, !0));\n      }, filterData: function filterData(t) {\n        function e(t) {\n          return t >= a[0] && t <= a[1];\n        }if (t === this._dataZoomModel) {\n          var i = this._dimName,\n              n = this.getTargetSeriesModels(),\n              r = t.get(\"filterMode\"),\n              a = this._valueWindow,\n              o = this.getOtherAxisModel();t.get(\"$fromToolbox\") && o && o.get(\"type\") === W && (r = \"empty\"), l(n, function (t) {\n            var n = t[ni]();n && l(t.coordDimToDataDim(i), function (i) {\n              \"empty\" === r ? t.setData(n.map(i, function (t) {\n                return e(t) ? t : 0 / 0;\n              })) : n.filterSelf(i, e);\n            });\n          });\n        }\n      } }, h;\n  }), e(\"zrender\", [\"zrender/zrender\"], function (t) {\n    return t;\n  }), e(\"echarts\", [\"echarts/echarts\"], function (t) {\n    return t;\n  });var oi = t(\"echarts\");return oi.graphic = t(\"echarts/util/graphic\"), oi.number = t(\"echarts/util/number\"), oi.format = t(\"echarts/util/format\"), t(\"echarts/chart/bar\"), t(\"echarts/chart/line\"), t(\"echarts/chart/pie\"), t(\"echarts/component/grid\"), t(\"echarts/component/title\"), t(\"echarts/component/legend\"), t(\"echarts/component/tooltip\"), t(\"echarts/component/markPoint\"), t(\"echarts/component/markLine\"), t(\"echarts/component/markArea\"), t(\"echarts/component/toolbox\"), t(\"zrender/vml/vml\"), oi;\n});\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }

});